> Task :buildSrc:checkKotlinGradlePluginConfigurationErrors
> Task :buildSrc:compileKotlin NO-SOURCE
> Task :buildSrc:compileJava NO-SOURCE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:processResources NO-SOURCE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:buildext:checkKotlinGradlePluginConfigurationErrors
> Task :buildSrc:buildext:compileKotlin UP-TO-DATE
> Task :buildSrc:buildext:compileJava NO-SOURCE
> Task :buildSrc:buildext:pluginDescriptors UP-TO-DATE
> Task :buildSrc:buildext:processResources UP-TO-DATE
> Task :buildSrc:buildext:classes UP-TO-DATE
> Task :buildSrc:buildext:jar UP-TO-DATE
> Task :buildSrc:fmpp:checkKotlinGradlePluginConfigurationErrors
> Task :buildSrc:fmpp:compileKotlin UP-TO-DATE
> Task :buildSrc:fmpp:compileJava NO-SOURCE
> Task :buildSrc:fmpp:pluginDescriptors UP-TO-DATE
> Task :buildSrc:fmpp:processResources UP-TO-DATE
> Task :buildSrc:fmpp:classes UP-TO-DATE
> Task :buildSrc:fmpp:jar UP-TO-DATE
> Task :buildSrc:javacc:checkKotlinGradlePluginConfigurationErrors
> Task :buildSrc:javacc:compileKotlin UP-TO-DATE
> Task :buildSrc:javacc:compileJava NO-SOURCE
> Task :buildSrc:javacc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:javacc:processResources UP-TO-DATE
> Task :buildSrc:javacc:classes UP-TO-DATE
> Task :buildSrc:javacc:jar UP-TO-DATE

> Configure project :
Building Apache Calcite 1.41.0-SNAPSHOT

> Task :core:checkKotlinGradlePluginConfigurationErrors
> Task :core:fmppMain UP-TO-DATE
> Task :core:javaCCMain UP-TO-DATE
> Task :core:versionClass UP-TO-DATE
> Task :linq4j:compileJava UP-TO-DATE
> Task :core:compileKotlin NO-SOURCE
> Task :core:compileJava UP-TO-DATE
> Task :arrow:compileJava UP-TO-DATE
> Task :arrow:processResources NO-SOURCE
> Task :arrow:classes UP-TO-DATE
> Task :arrow:jandexMain UP-TO-DATE
> Task :arrow:processJandexIndex NO-SOURCE
> Task :arrow:jar UP-TO-DATE
> Task :core:processResources UP-TO-DATE
> Task :core:classes UP-TO-DATE
> Task :core:jandexMain UP-TO-DATE
> Task :core:processJandexIndex NO-SOURCE
> Task :core:jar UP-TO-DATE
> Task :file:compileJava UP-TO-DATE
> Task :file:processResources NO-SOURCE
> Task :file:classes UP-TO-DATE
> Task :file:jandexMain UP-TO-DATE
> Task :file:processJandexIndex NO-SOURCE
> Task :testkit:checkKotlinGradlePluginConfigurationErrors
> Task :testkit:compileKotlin UP-TO-DATE
> Task :testkit:compileJava UP-TO-DATE
> Task :file:compileTestJava UP-TO-DATE
> Task :file:processTestResources UP-TO-DATE
> Task :file:testClasses UP-TO-DATE
> Task :linq4j:processResources NO-SOURCE
> Task :linq4j:classes UP-TO-DATE
> Task :linq4j:jandexMain UP-TO-DATE
> Task :linq4j:processJandexIndex NO-SOURCE
> Task :linq4j:jar UP-TO-DATE
> Task :testkit:processResources NO-SOURCE
> Task :testkit:classes UP-TO-DATE
> Task :testkit:jandexMain UP-TO-DATE
> Task :testkit:processJandexIndex NO-SOURCE
> Task :testkit:jar UP-TO-DATE

> Task :file:test
WARNING: Unknown module: org.apache.arrow.memory.core specified to --add-opens
WARNING: Unknown module: org.apache.arrow.memory.netty specified to --add-opens

JsonFlattenTest > testJsonFlatteningSpecificColumns() STANDARD_OUT

    === Test: Excel Conversion Without Conflicts ===

JsonFlattenTest > testJsonFlatteningSpecificColumns() STANDARD_ERROR
    SLF4J(W): No SLF4J providers were found.
    SLF4J(W): Defaulting to no-operation (NOP) logger implementation
    SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.
    SLF4J(W): Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
    SLF4J(W): Ignoring binding found at [jar:file:/Users/kennethstott/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-slf4j-impl/2.17.1/84692d456bcce689355d33d68167875e486954dd/log4j-slf4j-impl-2.17.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]
    SLF4J(W): Ignoring binding found at [jar:file:/Users/kennethstott/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-reload4j/1.7.36/db708f7d959dee1857ac524636e85ecf2e1781c1/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]
    SLF4J(W): Ignoring binding found at [jar:file:/Users/kennethstott/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-log4j12/1.7.25/110cefe2df103412849d72ef7a67e4e91e4266b4/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]
    SLF4J(W): See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
          0.1sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.CsvEnumeratorTest

FileAdapterCapabilitiesTest > testFileAdapterAsDataSource() STANDARD_OUT

    === FILE ADAPTER CAPABILITIES TEST ===
    Demonstrating file adapter as a data source for materialized views

FileAdapterCapabilitiesTest > testFileAdapterAsDataSource() STANDARD_ERROR
    org.apache.poi.EmptyFileException: The supplied file was empty (zero bytes long)
    	at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:218)
    	at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:185)
    	at org.apache.calcite.adapter.file.MultiTableExcelToJsonConverter.convertFileToJson(MultiTableExcelToJsonConverter.java:97)
    	at org.apache.calcite.adapter.file.SafeExcelToJsonConverter.convertIfNeeded(SafeExcelToJsonConverter.java:84)
    	at org.apache.calcite.adapter.file.FileSchema.convertExcelFilesToJson(FileSchema.java:338)
    	at org.apache.calcite.adapter.file.FileSchema.getTableMap(FileSchema.java:474)
    	at org.apache.calcite.adapter.file.ExcelConversionTest.testExcelConversionWithoutConflicts(ExcelConversionTest.java:61)
    	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:45)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)

FileAdapterCapabilitiesTest > testFileAdapterAsDataSource() STANDARD_OUT
    !
    [FileSchema] Found 0 files for processing
    Tables found: []

ExcelConversionTest > testConversionCaching() STANDARD_OUT

    === Test: Conversion Caching ===

ExcelConversionTest > testExcelConversionWithExistingJsonFiles() STANDARD_OUT

    === Test: Excel Conversion With Existing JSON Files ===
    Expected error without POI: The supplied file was empty (zero bytes long)

ExcelConversionTest > testMixedFileTypesInDirectory() STANDARD_OUT

    === Test: Mixed File Types in Directory ===

ExcelConversionTest > testMixedFileTypesInDirectory() STANDARD_ERROR
    org.apache.poi.EmptyFileException: The supplied file was empty (zero bytes long)
    	at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:218)
    	at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:185)
    	at org.apache.calcite.adapter.file.MultiTableExcelToJsonConverter.convertFileToJson(MultiTableExcelToJsonConverter.java:97)
    	at org.apache.calcite.adapter.file.SafeExcelToJsonConverter.convertIfNeeded(SafeExcelToJsonConverter.java:84)
    	at org.apache.calcite.adapter.file.FileSchema.convertExcelFilesToJson(FileSchema.java:338)
    	at org.apache.calcite.adapter.file.FileSchema.getTableMap(FileSchema.java:474)
    	at org.apache.calcite.adapter.file.ExcelConversionTest.testMixedFileTypesInDirectory(ExcelConversionTest.java:116)
    	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:45)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)

ExcelConversionTest > testMixedFileTypesInDirectory() STANDARD_OUT
    !
    [FileSchema] Found 2 files for processing

    ✓ File schema created successfully

    1. Aggregation query (typical MV source):

    === HIERARCHICAL SCHEMA SIMULATION ===

ExcelConversionTest > testMixedFileTypesInDirectory() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    log4j:WARN No appenders could be found for logger (com.amazonaws.AmazonWebServiceClient).
    log4j:WARN Please initialize the log4j system properly.
    log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
[0;31;1mFAILURE[0m   0.6sec, org.apache.calcite.adapter.file.[0;1mStorageProviderTest[0m > [0;1mtestStorageProviderFactory()[0m
    com.amazonaws.SdkClientException: Unable to find a region via the region provider chain. Must provide an explicit region in the builder or setup environment to supply a region.
        at app//com.amazonaws.client.builder.AwsClientBuilder.setRegion(AwsClientBuilder.java:462)
        at app//com.amazonaws.client.builder.AwsClientBuilder.configureMutableProperties(AwsClientBuilder.java:424)
        at app//com.amazonaws.client.builder.AwsSyncClientBuilder.build(AwsSyncClientBuilder.java:46)
        at app//org.apache.calcite.adapter.file.storage.S3StorageProvider.<init>(S3StorageProvider.java:47)
        at app//org.apache.calcite.adapter.file.storage.StorageProviderFactory.lambda$getCachedProvider$0(StorageProviderFactory.java:200)
        [0;0;90mat java.base@21.0.2/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
[0m        at app//org.apache.calcite.adapter.file.storage.StorageProviderFactory.getCachedProvider(StorageProviderFactory.java:200)
        at app//org.apache.calcite.adapter.file.storage.StorageProviderFactory.createFromUrl(StorageProviderFactory.java:61)
        [0;1mat app//org.apache.calcite.adapter.file.StorageProviderTest.testStorageProviderFactory(StorageProviderTest.java:107)
[0m
[0;31;1mFAILURE[0m   0.6sec,    4 completed, [0;31;1m  1[0m failed,   0 skipped, org.apache.calcite.adapter.file.[0;31;1mStorageProviderTest[0m

FileAdapterTest > testCustomTable() STANDARD_OUT
    Converting file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit16540676339736989403/multiple_tables.xlsx
    File exists: true
    File size: 3433 bytes

DocxTableTest > testDocxTableQuery() STANDARD_OUT
    Files in temp directory after conversion:
      multiple_tables.xlsx
      MultipleTables__Report_Sales_Data_T2.json
      single_no_id.xlsx
      single_with_id.xlsx
      MultipleTables__Report_Sales_Data_T1.json
    Testing multiple tables with conflicts:
      File 1: MultipleTables__Report_Sales_Data_T1.json exists=true
      File 2: MultipleTables__Report_Sales_Data_T2.json exists=true
      Unexpected file: MultipleTables__Report_Sales_Data.json exists=false
    [FileSchema] Found 2 files for processing

ExcelNamingTest > testSingleTableWithIdentifierNoSuffix() STANDARD_OUT
    Converting file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit4956951564878656524/single_with_id.xlsx
    File exists: true
    File size: 3374 bytes
    ❌ Query failed: Error while executing SQL "SELECT 'SALES' as dept, COUNT(*) as count FROM "ORG.DEPT.SALES".customers": parse failed: Encountered "count" at line 1, column 37.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    ❌ Query failed: Error while executing SQL "SELECT 'HR' as dept, COUNT(*) as count FROM "ORG.DEPT.HR".employees": parse failed: Encountered "count" at line 1, column 34.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    ❌ Query failed: Error while executing SQL "SELECT 'FINANCE' as dept, COUNT(*) as count FROM "ORG.FINANCE".budgets": parse failed: Encountered "count" at line 1, column 39.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    Conversion completed successfully
    Files in temp directory after conversion:
      OTHER: multiple_tables.xlsx
      JSON: SingleWithId__Sales_Q1_Results.json
      OTHER: single_no_id.xlsx
      OTHER: single_with_id.xlsx
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    Testing single table with identifier:
      Expected file: SingleWithId__Sales_Q1_Results.json exists=true
      Unexpected file: SingleWithId__Sales_Q1_Results_T1.json exists=false

ExcelNamingTest > testSingleTableWithoutIdentifierNoSuffix() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
[0;31;1mFAILURE[0m   1.1sec, org.apache.calcite.adapter.file.[0;1mJsonFlattenTest[0m > [0;1mtestJsonFlatteningSpecificColumns()[0m
    java.sql.SQLException: Error while executing SQL "select "id", "name", "address_city" from NESTED_FLAT where "id" = 1": From line 1, column 42 to line 1, column 52: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        at org.apache.calcite.adapter.file.FileAdapterTests.checkSql(FileAdapterTests.java:141)
        at org.apache.calcite.adapter.file.FileAdapterTests$Fluent.ok(FileAdapterTests.java:217)
        [0;1mat org.apache.calcite.adapter.file.JsonFlattenTest.testJsonFlatteningSpecificColumns(JsonFlattenTest.java:47)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 42 to line 1, column 52: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.resolveImpl(IdentifierNamespace.java:172)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.validateImpl(IdentifierNamespace.java:188)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3562)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3541)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4055)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 4 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 32 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]


JsonFlattenTest > testJsonFlattening() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    Converting file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit4367547808439060013/single_no_id.xlsx
    File exists: true
    File size: 3350 bytes
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    Files in temp directory after conversion:
      multiple_tables.xlsx
      SingleNoId__Data.json
      single_no_id.xlsx
      single_with_id.xlsx
    Testing single table without identifier:
      Expected file: SingleNoId__Data.json exists=true
      Unexpected file: SingleNoId__Data_T1.json exists=false
          1.1sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ExcelNamingTest

FileReaderTest > testJsonFileWithJoin() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
[0;31;1mFAILURE[0m   0.1sec, org.apache.calcite.adapter.file.[0;1mJsonFlattenTest[0m > [0;1mtestJsonFlattening()[0m
    java.sql.SQLException: Error while executing SQL "select * from NESTED_FLAT": From line 1, column 15 to line 1, column 25: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        at org.apache.calcite.adapter.file.FileAdapterTests.checkSql(FileAdapterTests.java:141)
        at org.apache.calcite.adapter.file.FileAdapterTests$Fluent.ok(FileAdapterTests.java:217)
        [0;1mat org.apache.calcite.adapter.file.JsonFlattenTest.testJsonFlattening(JsonFlattenTest.java:38)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 15 to line 1, column 25: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.resolveImpl(IdentifierNamespace.java:172)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.validateImpl(IdentifierNamespace.java:188)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3562)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3541)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4055)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 4 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Object 'nested_flat' not found within 'SALES'; did you mean 'NESTED_FLAT'?
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 32 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]

[0;31;1mFAILURE[0m   1.1sec,    4 completed, [0;31;1m  2[0m failed,   0 skipped, org.apache.calcite.adapter.file.[0;31;1mJsonFlattenTest[0m

FtpStorageProviderMockTest > testFtpErrorScenarios() STANDARD_OUT
    [FileSchema] Found 6 files for processing
          0.0sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.FtpStorageProviderMockTest
[0;34;1mWARNING[0m   0.0sec,    2 completed,   0 failed, [0;34;1m  2[0m skipped, org.apache.calcite.adapter.file.[0;34;1mFtpStorageProviderTest[0m

GlobParquetTableTest > testGlobTableRefresh() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

GlobParquetTableTest > testGlobTableRefresh() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12983441031574999905/data/sales_*.csv
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 2
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 2 files to Parquet

GlobParquetTableTest > testGlobTableRefresh() STANDARD_OUT
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

FileAdapterTest > testPushDownProjectAggregate(String) > [1] text STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProjectAggregate(String) > [1] text STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    Input: '1959-05-14 05:00:00' (timezone-naive)
    Parsed as local time in: America/New_York
    Stored as UTC: 1959-05-14T09:00:00Z
          1.5sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.TimezoneConversionTest

TimestampComparisonFocusedTest > testTimestampComparisonsWork() STANDARD_OUT
    [FileSchema] Found 1 files for processing

FileAdapterTest > testPushDownProject2() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProject2() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProject2() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProject2() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregate(String) STANDARD_OUT
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testDecimalType() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
          0.2sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.[0;1mFileAdapterTest[0m > [0;1mtestPushDownProjectAggregate(String)[0m

FileAdapterTest > testSelect() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
[0;31;1mFAILURE[0m   1.7sec, org.apache.calcite.adapter.file.[0;1mOracleLexicalSettingsTest[0m > [0;1mtestOracleLexicalSettings()[0m
    java.sql.SQLException: Error while executing SQL "SELECT NAME FROM SALES.DEPTS WHERE DEPTNO = 10": From line 1, column 18 to line 1, column 28: Object 'sales' not found; did you mean 'SALES'?
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        [0;1mat org.apache.calcite.adapter.file.OracleLexicalSettingsTest.testOracleLexicalSettings(OracleLexicalSettingsTest.java:66)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 18 to line 1, column 28: Object 'sales' not found; did you mean 'SALES'?
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.resolveImpl(IdentifierNamespace.java:169)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.validateImpl(IdentifierNamespace.java:188)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3562)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3541)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4055)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 2 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Object 'sales' not found; did you mean 'SALES'?
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 30 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]


OracleLexicalSettingsTest > testCaseSensitivityDemo() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
[0;31;1mFAILURE[0m   0.0sec, org.apache.calcite.adapter.file.[0;1mOracleLexicalSettingsTest[0m > [0;1mtestCaseSensitivityDemo()[0m
    java.sql.SQLException: Error while executing SQL "SELECT COUNT(*) FROM DEPTS": From line 1, column 22 to line 1, column 26: Object 'depts' not found within 'SALES'; did you mean 'DEPTS'?
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        [0;1mat org.apache.calcite.adapter.file.OracleLexicalSettingsTest.testCaseSensitivityDemo(OracleLexicalSettingsTest.java:139)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 22 to line 1, column 26: Object 'depts' not found within 'SALES'; did you mean 'DEPTS'?
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.resolveImpl(IdentifierNamespace.java:172)
            at app//org.apache.calcite.sql.validate.IdentifierNamespace.validateImpl(IdentifierNamespace.java:188)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3562)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:3541)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4055)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 2 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Object 'depts' not found within 'SALES'; did you mean 'DEPTS'?
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 30 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]

[0;31;1mFAILURE[0m   1.7sec,    2 completed, [0;31;1m  2[0m failed,   0 skipped, org.apache.calcite.adapter.file.[0;31;1mOracleLexicalSettingsTest[0m

GlobPatternTest > testGlobPatterns() STANDARD_OUT
    Testing pattern '**':
      'file.csv' matches: true
      'sub/file.csv' matches: true
      'sub/nested/file.csv' matches: true

    Testing pattern '**/*':
      'file.csv' matches: false
      'sub/file.csv' matches: true
      'sub/nested/file.csv' matches: true

    Testing pattern '*':
      'file.csv' matches: true
      'sub/file.csv' matches: false

    Testing pattern '{*,**/*}':
      'file.csv' matches: true
      'sub/file.csv' matches: true
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.GlobPatternTest

HtmlToJsonConverterTest > testNumericTypeInference() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in numeric.html

HtmlToJsonConverterTest > testNumericTypeInference() STANDARD_OUT

    === NUMERIC TYPE INFERENCE TEST ===
    ✅ Integer values detected and converted
    ✅ Double values detected and converted
    ✅ Boolean values detected and converted
    ✅ Proper JSON types in output
    ===================================


HtmlToJsonConverterTest > testSimpleHtmlConversion() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in simple.html

HtmlToJsonConverterTest > testSimpleHtmlConversion() STANDARD_OUT

    === SIMPLE HTML CONVERSION TEST ===
    ✅ Single table extracted from HTML
    ✅ Generated file: simple_table1.json
    ✅ 3 rows with correct data
    ✅ Column headers used as JSON keys
    ===================================


HtmlToJsonConverterTest > testHasExtractedFiles() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in simple.html

HtmlToJsonConverterTest > testHasExtractedFiles() STANDARD_OUT

    === EXTRACTED FILES CHECK TEST ===
    ✅ Correctly detects no extracted files initially
    ✅ Correctly detects extracted files after conversion
    ==================================


HtmlToJsonConverterTest > testEmptyHtml() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 0 tables in empty.html

HtmlToJsonConverterTest > testEmptyHtml() STANDARD_OUT

    === EMPTY HTML TEST ===
    ✅ HTML with no tables produces no JSON files
    ✅ Converter handles empty case gracefully
    =======================


HtmlToJsonConverterTest > testSpecialCharactersInTableName() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in special.html

HtmlToJsonConverterTest > testSpecialCharactersInTableName() STANDARD_OUT

    === SPECIAL CHARACTERS TEST ===
    ✅ Special characters in table ID sanitized
    ✅ Generated filename: special_salesdata_2024.json
    ✅ File created successfully
    ===============================


HtmlToJsonConverterTest > testMultiTableHtmlConversion() STANDARD_ERROR
    Aug 05, 2025 3:44:48 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 2 tables in multi.html

HtmlToJsonConverterTest > testMultiTableHtmlConversion() STANDARD_OUT

    === MULTI-TABLE HTML CONVERSION TEST ===
    ✅ 2 tables extracted from single HTML file
    ✅ Tables named using id attributes
    ✅ Sales table: 2 rows
    ✅ Inventory table: 3 rows
    ========================================

          0.0sec,    6 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.HtmlToJsonConverterTest

MarkdownTableTest > testMarkdownTableQuery() STANDARD_OUT
    [FileSchema] Found 3 files for processing
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07

FileAdapterTest STANDARD_OUT
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

FileAdapterTest > testReadme() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
        [0;1m  2.4sec[0m, org.apache.calcite.adapter.file.[0;1mFileReaderTest[0m > [0;1mtestJsonFileWithJoin()[0m

FileReaderTest > testFileReaderHeadings() STANDARD_OUT
    [FileSchema] Found 4 files for processing

FileReaderTest > testFileReaderBadSelector() STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileReaderTest > testCsvFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

FileReaderTest > testCsvFile() STANDARD_ERROR
    Aug 05, 2025 3:44:50 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Successfully generated Parquet cache: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12983441031574999905/cache/SALES_GLOB_fe067dd6.parquet

FileReaderTest > testCsvFile() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

DocxTableTest > testEmptyDocxFile() STANDARD_OUT
    [FileSchema] Found 12 files for processing

MarkdownTableTest > testEmptyMarkdownFile() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    Mixed directory tables: [CONFIG, DATA]
    [FileSchema] Found 1 files for processing
        [0;1m  3.6sec[0m, org.apache.calcite.adapter.file.[0;1mExcelFileTest[0m > [0;1mtestExcelFileConversion(Path)[0m
        [0;1m  3.5sec[0m, org.apache.calcite.adapter.file.[0;1mExcelConversionTest[0m > [0;1mtestMixedFileTypesInDirectory()[0m

ExcelConversionTest STANDARD_OUT
    [FileSchema] Found 6 files for processing

ExcelConversionTest > testTimestampBasedConversion() STANDARD_OUT

    === Test: Timestamp-based Conversion ===
    Would convert because Excel is newer
          3.6sec,    5 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ExcelConversionTest

MaterializationTest > testMaterializationsOperand() STANDARD_OUT
    [FileSchema] Found 12 files for processing

    === FILE ADAPTER MATERIALIZATIONS TEST ===

    1. Creating file schema with materializations...
       ✓ Schema created with 2 materializations

    2. Querying base sales table:

MarkdownTableTest STANDARD_OUT
    [FileSchema] Found 2 files for processing

MarkdownTableTest > testMarkdownWithSpecialCharacters() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing

DocxTableTest STANDARD_OUT
    [FileSchema] Found 1 files for processing

MarkdownTableTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

MarkdownTableTest > testMarkdownInFileSchema() STANDARD_OUT
       Date       | Transactions | Total
       -----------|--------------|--------
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
       2024-01-01 |            2 | 3000.00
       2024-01-02 |            2 | 4500.00
       ✓ Aggregation successful

    2. Product summary (another MV pattern):
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing

FileReaderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    ❌ Cross-hierarchy join failed: cannot convert to long (org.apache.calcite.avatica.util.AbstractCursor$StringAccessor@3ff88b08)
    ====================================

    [FileSchema] Found 3 files for processing

FileReaderTest > testFileReaderIterator() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

FileReaderTest > testJsonFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
        [0;1m  3.6sec[0m, org.apache.calcite.adapter.file.[0;1mDotNotationSchemaTest[0m > [0;1mtestHierarchicalSchemaSimulation()[0m

DotNotationSchemaTest > testDotNotationInSchemaNames() STANDARD_OUT
    [FileSchema] Found 3 files for processing

    === DOT NOTATION SCHEMA TEST ===
    [FileSchema] Found 3 files for processing
    ❌ Dot notation query failed: Error while executing SQL "SELECT COUNT(*) as count FROM "COMPANY.SALES".customers": parse failed: Encountered "count" at line 1, column 20.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 6 files for processing

FileAdapterTest > testWackyColumns() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing

ExcelFileTest > testExcelFileDirectoryProcessing(Path) STANDARD_OUT
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing

MarkdownTableTest STANDARD_OUT
    [FileSchema] Found 3 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet

MarkdownTableTest > testMarkdownWithGroupHeaders() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

MarkdownTableTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
       ✓ Base table has 6 rows

    3. Checking available tables:
    DEBUG testGreaterThanFilterOnDateType: Date=1996-08-02, epochDays=9710, millis=838958400000, string=1996-08-02
    [FileSchema] Found 12 files for processing
        [0;1m  2.9sec[0m, org.apache.calcite.adapter.file.[0;1mDocxTableTest[0m > [0;1mtestDocxTableQuery()[0m

DocxTableTest > testMultipleTablesInDocx() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
          2.0sec,    8 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MarkdownTableTest

MaterializedViewParquetQueryTest > testQueryMaterializedViewsWithParquet() STANDARD_OUT
    Created pre-materialized CSV file (simulating Parquet): /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/daily_summary_mv.csv
    NOTE: In a real implementation, this would be a .parquet file
    [FileSchema] Found 2 files for processing

    === QUERYING MATERIALIZED VIEWS WITH PARQUET ENGINE TEST ===

    1. Creating schema with PARQUET engine and materialized view 'daily_summary'

    2. Listing all tables in schema:
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
       - DAILY_SALES_SUMMARY
       - PRODUCTS
       - SALES
       - PRODUCT_SUMMARY
       ✓ Found 4 tables

    4. Testing aggregation query (MV source):

FileReaderTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing

DocxTableTest > testDocxTableExtraction() STANDARD_OUT
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
       Product | Count | Revenue | Avg Sale
       --------|-------|---------|----------
       Gizmo   |     1 | 3000.00 | 3000.00
       Widget  |     2 | 2500.00 | 1250.00
       Gadget  |     1 | 2000.00 | 2000.00
       ✓ Product summary successful

    3. Schema metadata:
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
       Table: SALES
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
       Available tables:
       - DAILY_SUMMARY
       - SALES

       ✓ SUCCESS: Materialized view 'daily_summary' is registered!

    3. Querying the materialized view:
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
         - date (VARCHAR NOT NULL)
         - product (VARCHAR NOT NULL)
         - amount (DOUBLE NOT NULL)
       ✓ Metadata access successful

    ✅ FILE ADAPTER CAPABILITIES VERIFIED

    The file adapter successfully:
      • Provides tables from CSV files
      • Supports complex aggregation queries
      • Works with GROUP BY and ORDER BY
      • Exposes proper metadata

    These capabilities make it suitable as a data source
    for materialized views when used with Calcite Server DDL.

    Note: CREATE MATERIALIZED VIEW requires:
      • Calcite Server module for DDL support
    [FileSchema] Found 1 files for processing
      • MaterializationService for MV management
      • Appropriate storage configuration
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    Creating materialized view: DAILY_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    Materializing view DAILY_SUMMARY by executing SQL: SELECT "date", COUNT(*) as transaction_count, SUM("quantity") as total_quantity, SUM("quantity" * "price") as total_revenue FROM PARQUET_MV_TEST.SALES GROUP BY "date"
        [0;1m  3.7sec[0m, org.apache.calcite.adapter.file.[0;1mFileAdapterCapabilitiesTest[0m > [0;1mtestFileAdapterAsDataSource()[0m
          3.7sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.FileAdapterCapabilitiesTest

DocxTableTest STANDARD_OUT
    Created .materialized_views directory: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2752952256760209829/.materialized_views

    === MATERIALIZED VIEWS WITH PARQUET ENGINE TEST ===

    1. Creating schema with Parquet engine and materialized view 'daily_summary'

    2. Checking for materialized view Parquet file:
       Expected location: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2752952256760209829/.materialized_views/daily_summary_mv.parquet
       File exists: false

    3. Listing all tables in schema:
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
          3.8sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ExcelFileTest

MaterializedViewQueryTest > testQueryMaterializedViews() STANDARD_OUT

    === QUERYING MATERIALIZED VIEWS TEST ===
    [FileSchema] Found 12 files for processing

    1. Creating schema with materialized view 'daily_summary'

    2. Attempting to query materialized view 'daily_summary':
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Columns in metadata.COLUMNS:
      tableCat
      tableSchem
      tableName
      columnName
      dataType
      typeName
      columnSize
      bufferLength
      decimalDigits
      numPrecRadix
      nullable
      remarks
      columnDef
      sqlDataType
      sqlDatetimeSub
      charOctetLength
      ordinalPosition
      isNullable
      scopeCatalog
      scopeSchema
      scopeTable
      sourceDataType
      isAutoincrement
      isGeneratedcolumn
    [FileSchema] Found 4 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2752952256760209829/.materialized_views/daily_summary_mv.parquet
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2752952256760209829/.materialized_views/daily_summary_mv.parquet
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2752952256760209829/.materialized_views/daily_summary_mv.parquet
       - DAILY_SUMMARY
       - SALES

    4. Testing with non-Parquet engine:
       Creating schema with LINQ4J engine and materializations...

MaterializedViewQueryTest > testQueryMaterializedViews() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MaterializedViewQueryTest > testQueryMaterializedViews() STANDARD_OUT
       Expected: Error message that MV only works with Parquet
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

MaterializedViewParquetTest > testMaterializedViewsWithOtherEngines() STANDARD_OUT
    Created .materialized_views directory: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit3297520158967994589/.materialized_views
    [FileSchema] Found 4 files for processing

    === TESTING MATERIALIZED VIEWS WITH NON-PARQUET ENGINES ===

    Testing with linq4j engine:
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
       ✓ Correctly showed error for linq4j engine
       Error message: WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: LINQ4J
    To use materialized views, set executionEngine to 'parquet' in your schema configuration
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: LINQ4J
    To use materialized views, set executionEngine to 'parquet' in your schema configuration

    Testing with arrow engine:
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
       ✓ Correctly showed error for arrow engine
       Error message: WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: ARROW
    To use materialized views, set executionEngine to 'parquet' in your schema configuration
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: ARROW
    To use materialized views, set executionEngine to 'parquet' in your schema configuration

    Testing with vectorized engine:
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
       ✓ Correctly showed error for vectorized engine
       Error message: WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: VECTORIZED
    To use materialized views, set executionEngine to 'parquet' in your schema configuration
    ERROR: Materialized views are only supported with Parquet execution engine
    Current engine: VECTORIZED
    To use materialized views, set executionEngine to 'parquet' in your schema configuration
    [FileSchema] Found 12 files for processing
          0.1sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MaterializedViewParquetTest
[0;31;1mFAILURE[0m [0;1m  3.9sec[0m, org.apache.calcite.adapter.file.metadata.[0;1mMetadataCatalogIntegrationTest[0m > [0;1mtestMetadataSchemaAccess()[0m
    java.sql.SQLException: Error while executing SQL "SELECT * FROM "metadata".COLUMNS WHERE "TABLE_NAME" = 'SALES' AND "TABLE_SCHEM" = 'FILES'": From line 1, column 40 to line 1, column 51: Column 'TABLE_NAME' not found in any table
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        [0;1mat org.apache.calcite.adapter.file.metadata.MetadataCatalogIntegrationTest.testMetadataSchemaAccess(MetadataCatalogIntegrationTest.java:123)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 40 to line 1, column 51: Column 'TABLE_NAME' not found in any table
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.DelegatingScope.fullyQualify(DelegatingScope.java:293)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.visit(SqlValidatorImpl.java:7198)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.visit(SqlValidatorImpl.java:7154)
            at app//org.apache.calcite.sql.SqlIdentifier.accept(SqlIdentifier.java:324)
            at app//org.apache.calcite.sql.util.SqlShuttle$CallCopyingArgHandler.visitChild(SqlShuttle.java:134)
            at app//org.apache.calcite.sql.util.SqlShuttle$CallCopyingArgHandler.visitChild(SqlShuttle.java:101)
            at app//org.apache.calcite.sql.SqlOperator.acceptCall(SqlOperator.java:985)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.visitScoped(SqlValidatorImpl.java:7223)
            at app//org.apache.calcite.sql.validate.SqlScopedShuttle.visit(SqlScopedShuttle.java:54)
            at app//org.apache.calcite.sql.validate.SqlScopedShuttle.visit(SqlScopedShuttle.java:37)
            at app//org.apache.calcite.sql.SqlCall.accept(SqlCall.java:175)
            at app//org.apache.calcite.sql.util.SqlShuttle$CallCopyingArgHandler.visitChild(SqlShuttle.java:134)
            at app//org.apache.calcite.sql.util.SqlShuttle$CallCopyingArgHandler.visitChild(SqlShuttle.java:101)
            at app//org.apache.calcite.sql.SqlOperator.acceptCall(SqlOperator.java:985)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.visitScoped(SqlValidatorImpl.java:7223)
            at app//org.apache.calcite.sql.validate.SqlScopedShuttle.visit(SqlScopedShuttle.java:54)
            at app//org.apache.calcite.sql.validate.SqlScopedShuttle.visit(SqlScopedShuttle.java:37)
            at app//org.apache.calcite.sql.SqlCall.accept(SqlCall.java:175)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.go(SqlValidatorImpl.java:7163)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.expand(SqlValidatorImpl.java:6735)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateWhereClause(SqlValidatorImpl.java:4986)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4058)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 2 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Column 'TABLE_NAME' not found in any table
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 44 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]


MaterializedViewUtilTest > testMaterializedViewFilename() STANDARD_OUT
    [FileSchema] Found 12 files for processing

MaterializedViewUtilTest > testMaterializedViewFilename() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    WARNING: Using execution engine 'ARROW' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
          0.0sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MaterializedViewUtilTest

MicrosoftGraphCredentialTest > verifyCredentialsAvailable() STANDARD_OUT

    === Microsoft Graph API Credential Check ===

    1. Checking environment variables:
       ✗ No credentials in environment variables

    2. Checking system properties:
       ✗ No credentials in system properties

    3. Checking local-test.properties:
       ✓ Found credentials in local-test.properties
         - Tenant ID: 5d26...fafc
         - Client ID: d6f6...36be
         - Client Secret: [set]
         - Site URL: https://kenstott.sharepoint.com

    4. Checking ~/.sharepoint/credentials.properties:
       ✗ File not found: /Users/kennethstott/.sharepoint/credentials.properties
    [FileSchema] Found 4 files for processing

    === Summary ===
    ✓ Microsoft Graph API credentials are available!

    Credentials can be used for:
    - SharePoint file access via Microsoft Graph API
    - OneDrive for Business access
    - Teams file access

    === Implementation Status ===
    Current implementation uses: SharePoint REST API (/_api endpoints)
    Recommended: Migrate to Microsoft Graph API for better compatibility

    To use Microsoft Graph API, the implementation should use:
    - https://graph.microsoft.com/v1.0/sites/{site-id}/drive
    - https://graph.microsoft.com/v1.0/drives/{drive-id}/items

MicrosoftGraphCredentialTest STANDARD_OUT
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MicrosoftGraphCredentialTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 12 files for processing

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Credentials loaded from local-test.properties
    Materialized view written to Parquet: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet

MicrosoftGraphStorageProviderTest > testDirectoryOperations() STANDARD_OUT

    === Testing Directory Operations ===
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Materializing view daily_summary by executing SQL: SELECT "date", COUNT(*) as transaction_count, SUM("quantity") as total_quantity, SUM("quantity" * "price") as total_revenue FROM MV_TEST.SALES GROUP BY "date"
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    ✅ Cross-schema result: Alice <-> John
    ✅ Cross-schema result: Bob <-> Jane
    ✅ Cross-schema dot notation queries work!
    Could not list schemas: Error while executing SQL "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA": From line 1, column 25 to line 1, column 51: Object 'INFORMATION_SCHEMA' not found; did you mean 'information_schema'?
    ==============================

    [FileSchema] Found 12 files for processing
          3.9sec,    7 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.DocxTableTest

DotNotationSchemaTest > testUnderscoreVsDotNotation() STANDARD_OUT
    [FileSchema] Found 6 files for processing

    === NAMING STRATEGY COMPARISON ===
    ❌ Dot notation failed: Error while executing SQL "SELECT COUNT(*) as count FROM "COMPANY.SALES".customers": parse failed: Encountered "count" at line 1, column 20.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    ❌ Underscore notation failed: Error while executing SQL "SELECT COUNT(*) as count FROM COMPANY_HR.employees": parse failed: Encountered "count" at line 1, column 20.
    Was expecting one of:
        "MEASURE" ...
        <QUOTED_STRING> ...
        <BRACKET_QUOTED_IDENTIFIER> ...
        <QUOTED_IDENTIFIER> ...
        <BACK_QUOTED_IDENTIFIER> ...
        <BIG_QUERY_BACK_QUOTED_IDENTIFIER> ...
        <HYPHENATED_IDENTIFIER> ...
        <IDENTIFIER> ...
        <UNICODE_QUOTED_IDENTIFIER> ...
    
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
       Date       | Transactions | Quantity | Revenue
       -----------|--------------|----------|--------
       2024-01-01 |            2 |       15 | 505.00
       2024-01-02 |            2 |       23 | 982.50
       2024-01-03 |            2 |       32 | 1110.00
       ✓ Aggregation query successful

    5. Testing product summary query:
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 6 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 6 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 2 files for processing
    Creating materialized view: DAILY_SALES_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/daily_sales_mv.parquet
    Creating materialized view: PRODUCT_SUMMARY
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7524792623726406705/.materialized_views/product_summary_mv.parquet
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
       Date       | Count | Quantity | Revenue
       -----------|-------|----------|--------
       2024-01-01 |     2 |       15 | 505.00
       2024-01-02 |     2 |       23 | 982.50
       2024-01-03 |     2 |       32 | 1110.00

       ✓ Successfully queried materialized view with 3 rows!

    4. Comparing with direct SQL on base table:
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: DAILY_SUMMARY
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: DAILY_SUMMARY
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2244400174512708630/.materialized_views/DAILY_SUMMARY_MV.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: DAILY_SUMMARY
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Materialized view written to Parquet: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    [FileSchema] Found 1 files for processing
       Product | Quantity | Revenue
       --------|----------|--------
       Widget  |       45 | 1147.50
       Gadget  |       17 | 850.00
       Gizmo   |        8 | 600.00
       ✓ Product summary successful

    ✅ MATERIALIZATIONS TEST COMPLETE

    The file adapter successfully:
      • Accepts materializations operand
      • Registers materialized view definitions
      • Supports Parquet execution engine for MV storage
      • Base tables remain queryable

    Note: The materializations are registered and ready
    for execution by the Parquet engine when queried.
       FAILED - Cannot query by view name: Error while executing SQL "SELECT * FROM MV_TEST."daily_summary"": From line 1, column 15 to line 1, column 37: Object 'daily_summary' not found within 'MV_TEST'; did you mean 'DAILY_SUMMARY'?

    3. Attempting to query by table name 'daily_summary_mv':
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary

MaterializationTest > testParquetEngineForMaterializations() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary

    === PARQUET ENGINE MATERIALIZATION TEST ===

    1. Creating schema with Parquet engine and materializations...
       ✓ Schema created with Parquet execution engine
       ✓ Materialization 'product_totals' registered

    ✅ PARQUET ENGINE TEST COMPLETE
    The Parquet execution engine is configured to handle
    materialized view storage when views are accessed.
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
       FAILED - Cannot query by table name: Error while executing SQL "SELECT * FROM MV_TEST."daily_summary_mv"": From line 1, column 15 to line 1, column 40: Object 'daily_summary_mv' not found within 'MV_TEST'

    4. Listing all tables in schema:
          0.4sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MaterializationTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing

MultiTableExtractorTest STANDARD_OUT
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary

MultiTableExtractorTest > testExtractTablesFromComplexExcel() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    Converting lots_of_tables.xlsx with multi-table detection...
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
       Available tables:
       - DAILY_SUMMARY
       - SALES

       ⚠️  MATERIALIZED VIEW NOT FOUND IN TABLE LIST
       The materialized view was registered but is not queryable
       This suggests the implementation is incomplete

    5. Running the MV's SQL directly on base table:
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found existing materialized view: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14187977429081005443/.materialized_views/daily_summary_mv.parquet
    Using ParquetTranslatableTable to read it
    Successfully added ParquetTranslatableTable for view: daily_summary
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
       2024-01-01 |     2 |       15 | 505.00
       2024-01-02 |     2 |       23 | 982.50
       2024-01-03 |     2 |       32 | 1110.00

       The materialized view should match these results!

MaterializedViewParquetQueryTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
          0.3sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MaterializedViewParquetQueryTest

MultiTableHtmlTest > testComplexHtmlFile() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    Tables found in complex_tables.html:
      - COMPLEX_TABLES__T3
      - COMPLEX_TABLES__EXPENSES
      - COMPLEX_TABLES__REVENUE

FileAdapterTest > testJsonSalesEmpty() STANDARD_OUT
    [FileSchema] Found 2 files for processing

FileAdapterTest STANDARD_OUT

    Tables extracted from lots_of_tables.xlsx:
      - LotsOfTables__Organization_table_1.json
    [FileSchema] Found 6 files for processing
        Content preview:
          [ {
            "id_1_2" : "3",
            "name_John Doe_Jane Smith" : "Bob Johnson",
      - LotsOfTables__Organization_table_2.json
        Content preview:
          [ {
            "Company_Department" : "Engineering",
            "Company_Team" : "Backend",

    Total tables found: 2
    [FileSchema] Found 6 files for processing
          0.1sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MultiTableExtractorTest

MultipleSchemaTest > testDuplicateSchemaNames() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregateNested(String) STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing

FileAdapterTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_OUT
    [FileSchema] Found 12 files for processing
[0;31;1mFAILURE[0m   0.2sec, org.apache.calcite.adapter.file.metadata.[0;1mMetadataCatalogIntegrationTest[0m > [0;1mtestToolCompatibilityQueries()[0m
    java.sql.SQLException: Error while executing SQL "SELECT DISTINCT TABLE_SCHEM FROM "metadata".TABLES ORDER BY TABLE_SCHEM": From line 1, column 17 to line 1, column 27: Column 'TABLE_SCHEM' not found in any table
        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)
        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)
        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:164)
        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:228)
        [0;1mat org.apache.calcite.adapter.file.metadata.MetadataCatalogIntegrationTest.testToolCompatibilityQueries(MetadataCatalogIntegrationTest.java:252)
[0m        Next exception 1: [CIRCULAR REFERENCE SQLException]
        Next exception 2: org.apache.calcite.runtime.CalciteContextException: From line 1, column 17 to line 1, column 27: Column 'TABLE_SCHEM' not found in any table
            at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:960)
            at app//org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:945)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:5960)
            at app//org.apache.calcite.sql.validate.DelegatingScope.fullyQualify(DelegatingScope.java:293)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.visit(SqlValidatorImpl.java:7198)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$SelectExpander.visit(SqlValidatorImpl.java:7481)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$SelectExpander.visit(SqlValidatorImpl.java:7433)
            at app//org.apache.calcite.sql.SqlIdentifier.accept(SqlIdentifier.java:324)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$Expander.go(SqlValidatorImpl.java:7163)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl$SelectExpander.go(SqlValidatorImpl.java:7472)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.expandSelectExpr(SqlValidatorImpl.java:6726)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.expandSelectItem(SqlValidatorImpl.java:489)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelectList(SqlValidatorImpl.java:5076)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:4068)
            at app//org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:62)
            at app//org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:96)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:1142)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:1113)
            at app//org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:282)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:1079)
            at app//org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:785)
            at app//org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:625)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:258)
            at app//org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:221)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:673)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:524)
            at app//org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:492)
            at app//org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:247)
            at app//org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:654)
            at app//org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:677)
            at app//org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:157)
[0;0;90m            ... 2 more
[0m            Caused by: org.apache.calcite.sql.validate.SqlValidatorException: Column 'TABLE_SCHEM' not found in any table
                at app//org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:511)
                at app//org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:605)
[0;0;90m                ... 33 more
[0m        Next exception 3: [CIRCULAR REFERENCE PlaceholderException]
        Caused by: [CIRCULAR REFERENCE PlaceholderException]


MetadataCatalogIntegrationTest > testInformationSchemaQueries() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    ✅ Mixed notation query works: North / Sales
    ================================

    [FileSchema] Found 2 files for processing
          4.1sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.DotNotationSchemaTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 2 files for processing

ParquetAutoConversionTest > testAutoConversionToParquet() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing

    === TESTING AUTO-CONVERSION TO PARQUET ===
       Date       | Count | Quantity | Revenue
       -----------|-------|----------|--------
       2024-01-01 |     2 |       15 | 505.00
       2024-01-02 |     2 |       23 | 982.50
       2024-01-03 |     2 |       32 | 1110.00
       ✓ Base table aggregation works correctly

    1. Creating schema with PARQUET execution engine

    2. Querying CSV file (should auto-convert to Parquet):
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 2 files for processing

FileAdapterTest > testInToSemiJoinWithCast() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
          0.3sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MaterializedViewQueryTest

ParquetFileTest > testParquetFileWithExplicitFormat() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    DEBUG TIMESTAMP: actual=838987262000, timestamp=1996-08-02 08:01:02.0, expected values: 838944062000L, 838958462000L, 838972862000L, 838915262000L

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 2 files for processing

FileAdapterTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    Created test Parquet file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit4787912603196418415/employees.parquet

    === TESTING PARQUET FILE WITH EXPLICIT FORMAT ===

    1. Creating schema with explicit Parquet table mapping

    2. Querying the explicitly mapped Parquet file:
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    Tables from lots_of_tables.xlsx:
      - LOTSOFTABLES__ORGANIZATION_TABLE_1
      - LOTSOFTABLES__ORGANIZATION_TABLE_2
    Total tables found: 2
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
          0.1sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.[0;1mFileAdapterTest[0m > [0;1mtestPushDownProjectAggregateNested(String)[0m

FileAdapterTest > testSelectLongMultiplyInteger() STANDARD_OUT
    [FileSchema] Found 12 files for processing

MultiTableHtmlTest > testMultiTableHtmlDetection() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    Discovered tables:
      - MULTI_TABLE_TEST__SALES_DATA
      - MULTI_TABLE_TEST__EMPLOYEE_DATA
      - MULTI_TABLE_TEST__INVENTORY_STATUS
      - COMPLEX_TABLES__REVENUE
      - COMPLEX_TABLES__EXPENSES
      - COMPLEX_TABLES__T3
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
       High earners (salary > 100k):
       Name     | Department  | Salary
       ---------|-------------|--------
       Alice    | Engineering | 120000.00
       Charlie  | Engineering | 110000.00

       ✓ Successfully queried explicitly mapped Parquet file!
    [FileSchema] Found 2 files for processing

ParquetFileTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

ParquetFileTest > testQueryParquetFileDirectly() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    Found table in DATA schema: EMPLOYEES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    Created test Parquet file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit6372675383987113868/employees.parquet

    === TESTING PARQUET FILE AS INPUT ===

    1. Creating schema with directory containing Parquet file

    2. Listing all tables in schema:
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
       Available tables:
       - EMPLOYEES

       ✓ SUCCESS: Parquet file 'employees' is registered as a table!

    3. Querying the Parquet file:
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
       Customer 1: Alice from New York - $1500.50
       Customer 2: Bob from San Francisco - $2200.00
       Customer 4: Diana from Boston - $3100.25

       ✓ CSV file was converted to Parquet: customers.parquet

    3. Querying JSON file (should auto-convert to Parquet):
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
       Order 101: Customer 1 - $250.00 (shipped)
       Order 104: Customer 3 - $500.00 (shipped)

       ✓ JSON file was converted to Parquet: orders.parquet

    4. Testing join query across converted files:

MultiTableHtmlTest > testExplicitHtmlTableWithSelector() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
       ID | Name     | Department  | Salary
       ---|----------|-------------|--------
        1 | Alice    | Engineering | 120000.00
        2 | Bob      | Sales       | 95000.00
        3 | Charlie  | Engineering | 110000.00
        4 | Diana    | HR          | 85000.00

       ✓ Successfully queried Parquet file with 4 rows!

    4. Testing aggregation query on Parquet file:
    [FileSchema] Found 1 files for processing
    Found table in DATA schema: DEPARTMENTS
    [FileSchema] Found 1 files for processing

    === DUPLICATE SCHEMA NAME TEST ===
    Exception thrown: None
    Has sales tables: false
    Has HR tables: true
    ✅ Second schema replaced first (hr directory)
    ===============================

    [FileSchema] Found 4 files for processing

MultipleSchemaTest > testMultipleDistinctSchemas() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing

MetadataCatalogIntegrationTest > testPgCatalogQueries() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
          0.5sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MultiTableExcelTest

PartitionedTableTest > testConfiguredNonHivePartitionedTable() STANDARD_OUT
    [FileSchema] Found 2 files for processing

FileAdapterTest > testUnionGroupByWithoutGroupKey() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
          0.4sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MultiTableHtmlTest

ProofMaterializedViewsWorkWithParquet > proofThatMaterializedViewsWorkWithParquet() STANDARD_OUT

    === PROOF THAT MATERIALIZED VIEWS WORK WITH PARQUET ENGINE ===

    Created test data: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/sales.csv

    Creating FileSchema with Parquet engine and materializations...
    Expected: Materialized view registration with Parquet storage path

          0.3sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ParquetFileTest

ParquetAutoConversionTest > testCacheInvalidation() STANDARD_OUT
    --- CAPTURED OUTPUT ---
    [FileSchema] Found 4 files for processing
       Department  | Count | Avg Salary
       ------------|-------|------------
       Engineering |     2 | 115000.00
       HR          |     1 | 85000.00
       Sales       |     1 | 95000.00

       ✓ Aggregation queries work on Parquet files!
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
       Customer | Orders | Total Spent
       ---------|--------|------------
       Charlie  |      1 | $500.00
       Alice    |      2 | $325.25
       Bob      |      1 | $150.50

       ✓ Complex queries work on auto-converted Parquet files!

    === TESTING PARQUET CACHE INVALIDATION ===
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet

    --- END OUTPUT ---


    --- MATERIALIZED VIEW STORAGE ---
    Expected Parquet file location: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    Directory exists: true
    Parquet file exists: false

    --- ATTEMPTING TO QUERY MATERIALIZED VIEW ---
    Query: SELECT * FROM PARQUET_TEST."daily_summary"
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    [FileSchema] Found 1 files for processing
    Creating materialized view: daily_summary
    Will materialize to: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    Materializing view daily_summary by executing SQL: SELECT "date", COUNT(*) as cnt, SUM("quantity") as total FROM PARQUET_TEST.SALES GROUP BY "date"
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
[0;34;1mWARNING[0m   3.4sec,   15 completed,   0 failed, [0;34;1m  3[0m skipped, org.apache.calcite.adapter.file.[0;34;1mFileReaderTest[0m

RecursiveGlobTest STANDARD_OUT
    1

FileAdapterTest > testBadDirectory() STANDARD_ERROR
    Error scanning for files with pattern: *
    java.nio.file.NoSuchFileException: /does/not/exist
    	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
    	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
    	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
    	at java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)
    	at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:171)
    	at java.base/java.nio.file.Files.readAttributes(Files.java:1853)
    	at java.base/java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:226)
    	at java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:277)
    	at java.base/java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:323)
    	at java.base/java.nio.file.Files.walkFileTree(Files.java:2779)
    	at org.apache.calcite.adapter.file.FileSchema.findMatchingFiles(FileSchema.java:1433)
    	at org.apache.calcite.adapter.file.FileSchema.getFilesForProcessing(FileSchema.java:1475)
    	at org.apache.calcite.adapter.file.FileSchema.getTableMap(FileSchema.java:487)
    	at org.apache.calcite.schema.impl.AbstractSchema.getTableNames(AbstractSchema.java:105)
    	at org.apache.calcite.schema.lookup.CompatibilityLookup.getNames(CompatibilityLookup.java:65)
    	at org.apache.calcite.schema.lookup.TransformingLookup.getNames(TransformingLookup.java:53)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.loadNameMap(SnapshotLookup.java:62)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.lambda$delegate$0(SnapshotLookup.java:57)
    	at org.apache.calcite.util.LazyReference.getOrCompute(LazyReference.java:53)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.delegate(SnapshotLookup.java:57)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.getNames(SnapshotLookup.java:50)
    	at org.apache.calcite.schema.lookup.ConcatLookup.lambda$getNames$0(ConcatLookup.java:62)
    	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:273)
    	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
    	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
    	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
    	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
    	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
    	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
    	at org.apache.calcite.schema.lookup.ConcatLookup.getNames(ConcatLookup.java:63)

FileAdapterTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 1 files for processing

FileAdapterTest > testBadDirectory() STANDARD_ERROR
    	at org.apache.calcite.jdbc.CalciteSchema.getTableNames(CalciteSchema.java:343)
    	at org.apache.calcite.jdbc.CalciteMetaImpl.tables(CalciteMetaImpl.java:425)

FileAdapterTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 5 files for processing

FileAdapterTest > testBadDirectory() STANDARD_ERROR
    	at org.apache.calcite.jdbc.CalciteMetaImpl.lambda$getTables$2(CalciteMetaImpl.java:360)
    	at org.apache.calcite.linq4j.EnumerableDefaults$20$1.moveNext(EnumerableDefaults.java:3104)
    	at org.apache.calcite.linq4j.EnumerableDefaults$29.moveNext(EnumerableDefaults.java:3911)
    	at org.apache.calcite.linq4j.Linq4j$EnumeratorIterator.<init>(Linq4j.java:666)
    	at org.apache.calcite.linq4j.Linq4j.enumeratorIterator(Linq4j.java:99)
    	at org.apache.calcite.linq4j.AbstractEnumerable.iterator(AbstractEnumerable.java:33)
    	at org.apache.calcite.linq4j.Linq4j$IterableEnumerable.iterator(Linq4j.java:528)
    	at org.apache.calcite.avatica.MetaImpl.createCursor(MetaImpl.java:94)
    	at org.apache.calcite.avatica.AvaticaResultSet.execute(AvaticaResultSet.java:186)
    	at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:64)
    	at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:43)
    	at org.apache.calcite.avatica.AvaticaConnection.executeQueryInternal(AvaticaConnection.java:575)
    	at org.apache.calcite.avatica.AvaticaConnection.createResultSet(AvaticaConnection.java:692)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData$9.call(AvaticaDatabaseMetaData.java:663)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData$9.call(AvaticaDatabaseMetaData.java:660)
    	at org.apache.calcite.avatica.AvaticaConnection.invokeWithRetries(AvaticaConnection.java:795)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData.getTables(AvaticaDatabaseMetaData.java:659)
    	at org.apache.calcite.adapter.file.FileAdapterTest.testBadDirectory(FileAdapterTest.java:284)
    	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:45)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)

FileAdapterTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 29 files for processing

FileAdapterTest > testBadDirectory() STANDARD_ERROR
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)

FileAdapterTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 0 files for processing

FileAdapterTest > testSelectSingleProject() STANDARD_OUT
    [FileSchema] Found 4 files for processing
        [0;1m  3.0sec[0m, org.apache.calcite.adapter.file.temporal.[0;1mTimestampComparisonFocusedTest[0m > [0;1mtestTimestampComparisonsWork()[0m
          3.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.TimestampComparisonFocusedTest

TimeFormatTest > testTimeFormats() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

TimeFormatTest > testTimeFormats() STANDARD_OUT

    === TIME Format Test ===
    Verifying times are stored as milliseconds since midnight

    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

PartitionedTableTest > testHiveStylePartitionedTable() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 4 files for processing
    Found 6 files for partitioned table: EVENTS
    Test 1: Midnight
      Millis since midnight: 0
      Time value: 00:00:00
      Calculated: 00:00:00.000

    Test 2: One second past midnight
      Millis since midnight: 1000
      Time value: 00:00:01
      Calculated: 00:00:01.000

    Test 3: One minute past midnight
      Millis since midnight: 60000
      Time value: 00:01:00
      Calculated: 00:01:00.000

    Test 4: One hour past midnight
      Millis since midnight: 3600000
      Time value: 01:00:00
      Calculated: 01:00:00.000

    Test 5: Two hours past midnight
      Millis since midnight: 7200000
      Time value: 02:00:00
      Calculated: 02:00:00.000

    Test 6: Ten minutes past midnight
      Millis since midnight: 600000
      Time value: 00:10:00
      Calculated: 00:10:00.000

    Test 7: Noon
      Millis since midnight: 43200000
      Time value: 12:00:00
      Calculated: 12:00:00.000

    Test 8: One PM
      Millis since midnight: 46800000
      Time value: 13:00:00
      Calculated: 13:00:00.000

    Test 9: 11:59:59 PM
      Millis since midnight: 86399000
      Time value: 23:59:59
      Calculated: 23:59:59.000

    Test 10: With milliseconds
      Millis since midnight: 37845123
      Time value: 10:30:45
      Calculated: 10:30:45.123

    Test 11: Morning time
      Millis since midnight: 33330000
      Time value: 09:15:30
      Calculated: 09:15:30.000

    Test 12: Afternoon time
      Millis since midnight: 56720000
      Time value: 15:45:20
      Calculated: 15:45:20.000

    Test 13: Evening time
      Millis since midnight: 70200000
      Time value: 19:30:00
      Calculated: 19:30:00.000

    Test 14: Without seconds
      Millis since midnight: 52200000
      Time value: 14:30:00
      Calculated: 14:30:00.000

    Test 15: Complex time
      Millis since midnight: 40953000
      Time value: 11:22:33
      Calculated: 11:22:33.000

    Test 16: Quarter past
      Millis since midnight: 29700000
      Time value: 08:15:00
      Calculated: 08:15:00.000

    Test 17: Half past
      Millis since midnight: 30600000
      Time value: 08:30:00
      Calculated: 08:30:00.000

    Test 18: Quarter to
      Millis since midnight: 31500000
      Time value: 08:45:00
      Calculated: 08:45:00.000

    Test 19: Early morning
      Millis since midnight: 18000000
      Time value: 05:00:00
      Calculated: 05:00:00.000

    Test 20: Late night
      Millis since midnight: 79200000
    [FileSchema] Found 0 files for processing
      Time value: 22:00:00
      Calculated: 22:00:00.000

    === SQL Time Operations ===
    Found 6 files for partitioned table: EVENTS
    Sales
    Marketing
    Accounts

FileAdapterTest > testJoinOnString() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
[0;31;1mFAILURE[0m   0.3sec, org.apache.calcite.adapter.file.metadata.[0;1mMetadataCatalogIntegrationTest[0m > [0;1mtestPgCatalogQueries()[0m
    org.opentest4j.AssertionFailedError: Should find 3 tables ==> expected: <3> but was: <0>
        [0;0;90mat app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
[0m        [0;0;90mat app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
[0m        [0;0;90mat app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
[0m        [0;0;90mat app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:150)
[0m        [0;0;90mat app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:560)
[0m        [0;1mat app//org.apache.calcite.adapter.file.metadata.MetadataCatalogIntegrationTest.testPgCatalogQueries(MetadataCatalogIntegrationTest.java:175)
[0m

MetadataCatalogIntegrationTest > testJdbcDatabaseMetadata() STANDARD_OUT
    Found schema: FILES
    Found schema: information_schema
    Found schema: metadata
    Found schema: pg_catalog
    All schemas found: [FILES, information_schema, metadata, pg_catalog]
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    Materialized view written to Parquet: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12357758792395152862/.materialized_views/daily_summary_table.parquet
    EXPECTED FAILURE: Error while executing SQL "SELECT * FROM PARQUET_TEST."daily_summary"": From line 1, column 15 to line 1, column 42: Object 'daily_summary' not found within 'PARQUET_TEST'; did you mean 'DAILY_SUMMARY'?
    (This is expected - full Parquet MV creation not yet implemented)

    --- ACTUAL TABLES IN SCHEMA ---
    Table: DAILY_SUMMARY
    Table: SALES
    Total tables found: 2

    === CONCLUSION ===
    1. FileSchemaFactory accepts 'materializations' with Parquet engine
    2. FileSchema shows 'Materialized view registered (Parquet storage pending)'
    3. Shows where the Parquet file would be stored
    4. Does NOT show error for Parquet engine (unlike other engines)
    5. Full implementation would:
       - Execute the SQL query
       - Write results to Parquet file
       - Create a ParquetTable to read from that file
    1. Initial cache created with 2 items
          0.2sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ProofMaterializedViewsWorkWithParquet

RefreshableTableTest > testCustomRegexPartitions() STANDARD_OUT
    [FileSchema] Found 8 files for processing
    Customer: Alice, Employee: John
    Customer: Bob, Employee: Jane

    === MULTIPLE DISTINCT SCHEMAS TEST ===
    ✅ Cross-schema query executed successfully
    ✅ Result rows: 2
    ✅ SALES and HR schemas working independently
    ====================================


MultipleSchemaTest > testSchemaReplacement() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    Found 6 files for partitioned table: SALES
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: SALES
    Found 2 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 29 files for processing

RecursiveGlobTest > testCustomGlobPatterns() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    Rows with time 12:00:00 (noon): 1
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testFileSelect() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
          0.4sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.RecursiveDirectoryTest

Gradle Test Executor 5 STANDARD_OUT
    Original time (noon): 12:00:00
    As string: 12:00:00
[0;34;1mWARNING[0m   0.0sec,    3 completed,   0 failed, [0;34;1m  3[0m skipped, org.apache.calcite.adapter.file.[0;34;1mRemoteFileRefreshIntegrationTest[0m

RemoteFileRefreshTest > testHttpHeadFallback() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

RemoteFileRefreshTest > testHttpHeadFallback() STANDARD_OUT

    === SQL SELECT Time Output ===
    Testing what SQL SELECT returns for TIME values

    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Initial customer count: 2
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES_CUSTOM
    [FileSchema] Found 29 files for processing
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found 2 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: SALES
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 4 files for processing
    Found 6 files for partitioned table: SALES
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    Test 1: Midnight
      getTime(): 00:00:00
      CAST AS VARCHAR: 00:00:00
      Millis since midnight (getInt): 0

    Test 4: One hour past midnight
      getTime(): 01:00:00
      CAST AS VARCHAR: 01:00:00
      Millis since midnight (getInt): 3600000

    Test 7: Noon
      getTime(): 12:00:00
      CAST AS VARCHAR: 12:00:00
      Millis since midnight (getInt): 43200000

    Test 9: 11:59:59 PM
      getTime(): 23:59:59
      CAST AS VARCHAR: 23:59:59
      Millis since midnight (getInt): 86399000

    Test 10: With milliseconds
      getTime(): 10:30:45
      CAST AS VARCHAR: 10:30:45
      Millis since midnight (getInt): 37845123

          0.4sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.TimeFormatTest

NullTimestampQueryTest > testFilteringOnNulls() STANDARD_OUT
    [FileSchema] Found 0 files for processing

    === Testing IS NULL filtering ===

RecursiveGlobTest > testNonRecursiveOnlyFindsRoot() STANDARD_OUT
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    SALES columns: [order_id (BIGINT NOT NULL), customer (VARCHAR NOT NULL), amount (DOUBLE NOT NULL)]
    No primary keys defined (expected for file tables)
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testDateType() STANDARD_OUT
    Test JVM timezone: America/New_York offset: -5 hours
    Found 6 files for partitioned table: EVENTS

MetadataCatalogIntegrationTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
[0;31;1mFAILURE[0m   4.9sec,    5 completed, [0;31;1m  3[0m failed,   0 skipped, org.apache.calcite.adapter.file.metadata.[0;31;1mMetadataCatalogIntegrationTest[0m
[0;34;1mWARNING[0m   0.0sec,    3 completed,   0 failed, [0;34;1m  3[0m skipped, org.apache.calcite.adapter.file.[0;34;1mS3StorageProviderTest[0m

SftpIntegrationTest > Test SFTP error handling STANDARD_OUT

    === Testing Error Handling ===
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Employee count after replacement: 2

    === SCHEMA REPLACEMENT TEST ===
    ✅ Schema replacement successful
    ✅ Now accessing HR data instead of Sales data
    ==============================

    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
          0.9sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MultipleSchemaTest

SftpStorageProviderTest > testSchemaConfiguration() STANDARD_OUT
    Example SFTP schema configuration:
    {
      "version": "1.0",
      "defaultSchema": "SFTP_FILES",
      "schemas": [{
        "name": "SFTP_FILES",
        "type": "custom",
        "factory": "org.apache.calcite.adapter.file.FileSchemaFactory",
        "operand": {
          "directory": "sftp://demo:password@test.rebex.net/",
          "recursive": false
        }
      }]
    }

    Advanced SFTP schema configuration:
    {
      "version": "1.0",
      "defaultSchema": "SFTP_FILES",
      "schemas": [{
        "name": "SFTP_FILES",
        "type": "custom",
        "factory": "org.apache.calcite.adapter.file.FileSchemaFactory",
        "operand": {
          "storageType": "sftp",
          "storageConfig": {
            "username": "demo",
            "password": "password",
            "strictHostKeyChecking": false
          },
          "directory": "sftp://test.rebex.net/",
          "recursive": false
        }
      }]
    }
[0;34;1mWARNING[0m   0.0sec,    6 completed,   0 failed, [0;34;1m  3[0m skipped, org.apache.calcite.adapter.file.[0;34;1mSftpStorageProviderTest[0m

SharePointAutoConfigTest STANDARD_OUT
    SharePoint credentials loaded successfully from: local-test.properties

SharePointAutoConfigTest > testCredentialSetup() STANDARD_OUT
    Credentials loaded from: local-test.properties
    Site URL: https://kenstott.sharepoint.com

SharePointAutoConfigTest > testSharePointConnection() STANDARD_OUT
    Testing SharePoint connection to: https://kenstott.sharepoint.com
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
          0.5sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.RecursiveGlobTest

SharePointLiveIntegrationTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
[0;34;1mWARNING[0m   0.0sec,    4 completed,   0 failed, [0;34;1m  4[0m skipped, org.apache.calcite.adapter.file.[0;34;1mSharePointLiveIntegrationTest[0m

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 12 files for processing
[0;34;1mWARNING[0m   0.0sec,    2 completed,   0 failed, [0;34;1m  2[0m skipped, org.apache.calcite.adapter.file.[0;34;1mSharePointPersonalAuthTest[0m

SimpleExcelTest > testSingleSimpleTable() STANDARD_OUT

    === TESTING SINGLE SIMPLE TABLE ===
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    Row 0: 'Name', 'Value'
    Row 1: 'Test', '123'
    Row 2: 'Demo', '456'
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

    Converting...
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

    Files created:
      simple.xlsx

    This should have created: Simple__Sheet1.json
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.SimpleExcelTest

SimpleGlobTest > testHtmlToJsonConverter() STANDARD_ERROR
    Aug 05, 2025 3:44:51 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in test.html

SimpleGlobTest > testHtmlToJsonConverter() STANDARD_OUT
    [FileSchema] Found 29 files for processing

    === HTML TO JSON CONVERTER TEST ===
    ✅ HTML file converted to JSON successfully
    ✅ Generated file: test_T1.json
    ===================================

    [FileSchema] Found 29 files for processing

SimpleGlobTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

SimpleGlobTest > testGlobParquetTableCreation() STANDARD_OUT

    === GLOB PARQUET TABLE TEST ===
    ✅ GlobParquetTable created successfully
    ✅ Glob pattern: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit10323683758067336915/data/data*.csv
    ✅ Initial refresh needed: true
    ==============================


SimpleGlobTest STANDARD_OUT
    [FileSchema] Found 0 files for processing

SimpleGlobTest > testGlobPatternDetection() STANDARD_OUT

    === GLOB PATTERN DETECTION TEST ===
    ✅ Correctly identified patterns with * wildcard
    ✅ Correctly identified patterns with ? wildcard
    ✅ Correctly identified patterns with [] ranges
    ✅ Correctly rejected non-glob patterns
    ==================================

    Found 6 files for partitioned table: SALES
          0.0sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.SimpleGlobTest

SimpleMultiTableTest > testShowExtractedTables() STANDARD_OUT

    Tables extracted from lots_of_tables.xlsx:
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: SALES
    [FileSchema] Found 12 files for processing
    Rows where TIME IS NULL: 0
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

PartitionedTableTest > testTypedPartitionColumns() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
          0.1sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.SimpleMultiTableTest

SingleTableTest > testSingleTableWithIdentifier() STANDARD_OUT

    === TESTING SINGLE TABLE WITH IDENTIFIER ===
    Row 0: identifier = 'Products'
    Row 2: headers = 'ProductName', 'Category'
    Row 3: data = 'Widget', 'Electronics'
    Row 4: data = 'Gadget', 'Tools'
    Converting single table with identifier...
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    Rows where TIMESTAMP IS NULL: 0
    [FileSchema] Found 12 files for processing

    Files created:
    Total JSON files: 0

    Expected: 1 file named 'SingleTable__Data_Products.json' (no _T1 suffix)
    ❌ ISSUE: Found _T1 suffix or wrong number of files
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.SingleTableTest

StorageProviderChangeDetectionTest > testLocalFileChangeDetection() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

PartitionedTableTest > testUnconfiguredPartitionedTable() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    Fred
    Eric
    John
    Wilma
    Alice

FileAdapterTest > testTimestampGroupBy() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 12 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 29 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 12 files for processing
    Rows where TIMESTAMPTZ IS NULL: 0
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testFilterableWhereWithNot1() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    Rows where DATE IS NULL: 0

NullTimestampQueryTest > testQueryNullTimestamps() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testFilterableWhereWithNot2() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 4 files for processing
    Found 6 files for partitioned table: EVENTS
    WARN: No partition scheme detected for table 'EVENTS'. Treating as unpartitioned. Query performance may be impacted.
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 12 files for processing
    Found 6 files for partitioned table: EVENTS
    WARN: No partition scheme detected for table 'EVENTS'. Treating as unpartitioned. Query performance may be impacted.
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileAdapterTest > testCsvSalesDepts() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    WARNING: Row with ID=2 (all nulls) was filtered out during Parquet conversion
    This is a known limitation when using the Parquet engine with rows containing all null timestamp fields
          0.6sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.NullTimestampQueryTest

DualTimestampTypeTest > testNullTimestampHandling() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 0 files for processing
    Found 6 files for partitioned table: EVENTS
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testCsvSalesEmpty() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testJsonSalesEmps() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileAdapterTest > testFilterableSelectStar() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    Found 6 files for partitioned table: EVENTS
    WARN: No partition scheme detected for table 'EVENTS'. Treating as unpartitioned. Query performance may be impacted.
    [FileSchema] Found 0 files for processing
    [FileSchema] Found 4 files for processing
    Found 6 files for partitioned table: EVENTS
    WARN: No partition scheme detected for table 'EVENTS'. Treating as unpartitioned. Query performance may be impacted.
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

TableNameCasingTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

TableNameCasingTest > testMixedCasing() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

FileAdapterTest > testFilterableSelect() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testNoThSelect() STANDARD_OUT
    [FileSchema] Found 12 files for processing
          1.3sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.PartitionedTableTest

TestMultiTableFix > testConversion() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest STANDARD_OUT
    Fred
    Eric
    John
    Wilma
    Alice

FileAdapterTest > testFilterableWhere2() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

    Generated JSON files:
      LotsOfTables__Organization_table_1.json
      LotsOfTables__Organization_table_2.json
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.TestMultiTableFix

CasingConfigurationTest > testUnchangedTableAndColumnNames() STANDARD_OUT
    [FileSchema] Found 4 files for processing

TableNameCasingTest STANDARD_OUT
    [FileSchema] Found 1 files for processing

TableNameCasingTest > testColumnNameCasing() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing

FileAdapterTest > testFilterableWhere3() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

TableNameCasingTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

CasingConfigurationTest > testSnakeCaseConfigurationSupport() STANDARD_OUT
    Total rows in NULL_TIMESTAMP_TEST: 2
    Next row ID: 3, Name: Bob Wilson
    WARNING: Row with ID=2 (all nulls) was filtered out during Parquet conversion

DualTimestampTypeTest > testMixedValidTimestamps() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testDecimalTypeArithmeticOperations() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    Available tables in schema 'test':
      Table: TEST_DATA
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testInToSemiJoinWithoutCast() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing

CasingConfigurationTest STANDARD_OUT
    [FileSchema] Found 6 files for processing

CasingConfigurationTest > testUppercaseTableAndColumnNames() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    Query executed successfully
    ResultSet.next() = true
    id = 1
    name = Alice
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    Exception message: Error while executing SQL "SELECT * FROM test.test_data": From line 1, column 15 to line 1, column 28: Object 'test_data' not found within 'test'; did you mean 'TEST_DATA'?
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing

TableNameCasingTest > testUnchangedCasing() STANDARD_OUT
    [FileSchema] Found 1 files for processing

FileAdapterTest > testPrepared() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    Row 1 - Local: 2024-03-15 18:30:45.000, UTC: 2024-03-15 14:30:45.000
    Row 2 - Local: 2024-03-15 18:30:45.000, UTC: 2024-03-15 14:30:45.000
    Row 3 - Local: 2024-03-15 18:30:45.000, UTC: 2024-03-15 14:30:45.123
    Row 4 - Local: 2024-03-15 18:30:45.000, UTC: 2024-03-15 14:30:45.000

DualTimestampTypeTest > testDualTimestampTypesWithLinq4j() STANDARD_OUT

    === Testing Dual Timestamp Types with LINQ4J ===
    Current JVM timezone: America/New_York

DualTimestampTypeTest > testDualTimestampTypesWithLinq4j() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testDualTimestampTypesWithLinq4j() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

CasingConfigurationTest > testMixedCasing() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    Row 1 - TIMESTAMP (naive): 2024-03-15 14:30:45 (1710513045000 ms)
    Row 1 - TIMESTAMPTZ (aware): 2024-03-15 10:30:45 (1710498645000 ms)
    Row 2 - TIMESTAMP (naive): 2024-03-15 14:30:45 (1710513045000 ms)
    Row 2 - TIMESTAMPTZ (aware): 2024-03-15 05:00:45 (1710478845000 ms)
    Row 3 - TIMESTAMPTZ (aware): 2024-03-15 18:30:45
    2. Cache file was regenerated (timestamp changed)
       Original cache time: 1754423091453
       New cache time: 1754423092856
       ✓ Cache invalidation is working correctly!
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testDualTimestampTypesWithParquet() STANDARD_OUT

    === Testing Dual Timestamp Types with PARQUET ===
    Current JVM timezone: America/New_York

ParquetAutoConversionTest > testCacheReuse() STANDARD_OUT

    === TESTING PARQUET CACHE REUSE ===
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Exception message: Error while executing SQL "SELECT * FROM test.test_data": From line 1, column 15 to line 1, column 28: Object 'test_data' not found within 'test'; did you mean 'Test_Data'?

TableNameCasingTest > testLowerCasing() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing

FileAdapterTest > testGroupByDate() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    1. Initial conversion created cache file
       Cache file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit1148183940009095027/.parquet_cache/products.parquet
       Cache time: 1754423092927
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testGroupByDate() STANDARD_ERROR
    Aug 05, 2025 3:44:52 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit12983441031574999905/data/sales_*.csv

CasingConfigurationTest STANDARD_ERROR
    Aug 05, 2025 3:44:52 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 3 files matching pattern

CasingConfigurationTest > testLowercaseTableAndColumnNames() STANDARD_ERROR
    Aug 05, 2025 3:44:52 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 3
    Aug 05, 2025 3:44:52 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 3 files to Parquet

CasingConfigurationTest > testLowercaseTableAndColumnNames() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testGroupByTime() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testGroupByTime() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testNonNullFilterOnDateType() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Exception message: Error while executing SQL "SELECT * FROM test.TEST_DATA": From line 1, column 15 to line 1, column 28: Object 'TEST_DATA' not found within 'test'; did you mean 'test_data'?
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
          0.4sec,    5 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.TableNameCasingTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 12 files for processing

DateDebugTest > debugDateWithLinq4j() STANDARD_OUT
    DEBUG: Test JVM timezone: America/New_York offset: -5 hours

DateDebugTest > debugDateWithLinq4j() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DateDebugTest > debugDateWithLinq4j() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    Row 1 - TIMESTAMP (naive): 2024-03-15 18:30:45.000 (1710527445000 ms)
    Row 1 - TIMESTAMPTZ (aware): 2024-03-15 14:30:45.000 (1710513045000 ms)
    Row 2 - TIMESTAMP (naive): 2024-03-15 18:30:45.000 (1710527445000 ms)
    Row 2 - TIMESTAMPTZ (aware): 2024-03-15 09:00:45.000 (1710493245000 ms)
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    Row 3 - TIMESTAMPTZ (aware): 2024-03-15 22:30:45.000

DualTimestampTypeTest > testInvalidTimestampFormats() STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileAdapterTest STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable refresh
    WARNING: Failed to refresh glob cache
    java.io.IOException: Failed to write Parquet cache
    	at org.apache.calcite.adapter.file.GlobParquetTable.writeToParquet(GlobParquetTable.java:361)
    	at org.apache.calcite.adapter.file.GlobParquetTable.regenerateCache(GlobParquetTable.java:244)
    	at org.apache.calcite.adapter.file.GlobParquetTable.refresh(GlobParquetTable.java:208)
    	at org.apache.calcite.adapter.file.GlobParquetTableTest.testGlobTableRefresh(GlobParquetTableTest.java:368)
    	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:45)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
    Caused by: java.io.IOException: Failed to merge files to Parquet
    	at org.apache.calcite.adapter.file.GlobParquetTable.mergeFilesToParquet(GlobParquetTable.java:551)
    	at org.apache.calcite.adapter.file.GlobParquetTable.writeToParquet(GlobParquetTable.java:347)
    	... 56 more
    Caused by: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Integer (java.lang.String and java.lang.Integer are in module java.base of loader 'bootstrap')
    	at org.apache.calcite.avatica.util.AbstractCursor$IntAccessor.getInt(AbstractCursor.java:522)
    	at org.apache.calcite.avatica.AvaticaSite.get(AvaticaSite.java:340)
    	at org.apache.calcite.avatica.AvaticaResultSet.getObject(AvaticaResultSet.java:395)
    	at org.apache.calcite.adapter.file.ParquetConversionUtil.performConversion(ParquetConversionUtil.java:373)
    	at org.apache.calcite.adapter.file.ParquetConversionUtil.lambda$convertToParquet$0(ParquetConversionUtil.java:178)
    	at org.apache.calcite.adapter.file.ConcurrentParquetCache.performConversion(ConcurrentParquetCache.java:108)
    	at org.apache.calcite.adapter.file.ConcurrentParquetCache.performConversionWithFileLock(ConcurrentParquetCache.java:145)
    	at org.apache.calcite.adapter.file.ConcurrentParquetCache.convertWithLocking(ConcurrentParquetCache.java:79)
    	at org.apache.calcite.adapter.file.ParquetConversionUtil.convertToParquet(ParquetConversionUtil.java:177)
    	at org.apache.calcite.adapter.file.GlobParquetTable.mergeFilesToParquet(GlobParquetTable.java:536)
    	... 57 more


FileAdapterTest STANDARD_OUT

    === GLOB TABLE REFRESH TEST ===
    ✅ Initial refresh detected 2 files
    ✅ Refresh interval working (2 seconds)
    ✅ New file detection after refresh

FileAdapterTest > testFilterOnNullableTimestamp() STANDARD_OUT
    ✅ RefreshBehavior: DIRECTORY_SCAN
    ================================


FileAdapterTest > testFilterOnNullableTimestamp() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

CasingConfigurationTest STANDARD_OUT
    [FileSchema] Found 2 files for processing

CasingConfigurationTest > testDefaultCasingBehavior() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
        [0;1m  5.0sec[0m, org.apache.calcite.adapter.file.[0;1mGlobParquetTableTest[0m > [0;1mtestGlobTableRefresh()[0m

GlobParquetTableTest > testGlobPatternWithCsvFiles() STANDARD_OUT
    DEBUG: LINQ4J result: 1996-08-02
    DEBUG: Expected: 1996-08-02

DateDebugTest STANDARD_OUT
    [FileSchema] Found 12 files for processing
          0.1sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.debug.DateDebugTest

ParquetDateDebugTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT

    === PARQUET Date Corruption Debug ===

    Step 1: Raw CSV Content

ParquetDateDebugTest > debugDateCorruption() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
      ID:int,FORMAT_DESC:string,DATE_VALUE:date
      1,"Basic date format","2024-03-15"
      2,"Slash date format","2024/03/15"
      3,"Dot date format","2024.03.15"
      4,"Epoch date (1970-01-01)","1970-01-01"
      5,"Day before epoch","1969-12-31"
    [FileSchema] Found 12 files for processing

    Step 2: Clear Parquet Cache
      Deleted: /Users/kennethstott/ndc-calcite/calcite-rs-jni/calcite/file/build/resources/test/bug/.parquet_cache/DATE_FORMATS.parquet

    Step 3: LINQ4J Engine Results

ParquetDateDebugTest > debugDateCorruption() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ParquetDateDebugTest > debugDateCorruption() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ParquetDateDebugTest > debugDateCorruption() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

ParquetDateDebugTest > debugDateCorruption() STANDARD_ERROR
    Failed to convert INVALID_AWARE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_AWARE_TEST"": java.lang.IllegalArgumentException: TIMESTAMPTZ column must contain timezone information. Use TIMESTAMP type for timezone-naive timestamps. Invalid value: '2024-03-15 10:30:45'

ParquetDateDebugTest > debugDateCorruption() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    2. Second query reused existing cache (timestamps match)
       ✓ Cache reuse is working correctly!

ParquetAutoConversionTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_OUT

    === TESTING JSON FILE CACHE INVALIDATION ===
    [FileSchema] Found 12 files for processing

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_OUT
      ID 4: 1970-01-01 (epoch day: 0)
    [FileSchema] Found 1 files for processing
      ID 5: 1969-12-31 (epoch day: -1)
    [FileSchema] Found 12 files for processing
      ID 6: 1970-01-02 (epoch day: 1)

    Step 4: PARQUET Engine Results
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_ERROR
    Failed to convert INVALID_AWARE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_AWARE_TEST"": java.lang.IllegalArgumentException: TIMESTAMPTZ column must contain timezone information. Use TIMESTAMP type for timezone-naive timestamps. Invalid value: '2024-03-15 10:30:45'

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ParquetAutoConversionTest > testJsonFileCacheInvalidation() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
          0.5sec,    6 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.config.CasingConfigurationTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 12 files for processing

ErrorHandlingTest STANDARD_ERROR
    Failed to convert INVALID_AWARE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_AWARE_TEST"": java.lang.IllegalArgumentException: TIMESTAMPTZ column must contain timezone information. Use TIMESTAMP type for timezone-naive timestamps. Invalid value: '2024-03-15 10:30:45'

ErrorHandlingTest > testCyclicSymbolicLink() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ErrorHandlingTest > testOutOfMemoryHandling() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

ErrorHandlingTest > testOutOfMemoryHandling() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ErrorHandlingTest > testOutOfMemoryHandling() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing

ErrorHandlingTest > testOutOfMemoryHandling() STANDARD_ERROR
    Failed to convert INVALID_AWARE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_AWARE_TEST"": java.lang.IllegalArgumentException: TIMESTAMPTZ column must contain timezone information. Use TIMESTAMP type for timezone-naive timestamps. Invalid value: '2024-03-15 10:30:45'

ErrorHandlingTest > testOutOfMemoryHandling() STANDARD_OUT
    [FileSchema] Found 1 files for processing

ErrorHandlingTest > testRemoteFileTimeout() STANDARD_ERROR
    Failed to convert INVALID_NAIVE_TEST to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."INVALID_NAIVE_TEST"": java.lang.IllegalArgumentException: TIMESTAMP column cannot contain timezone information. Use TIMESTAMPTZ type for timezone-aware timestamps. Invalid value: '2024-03-15 10:30:45Z'

ErrorHandlingTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

ErrorHandlingTest > testInvalidJsonFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing

DualTimestampTypeTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testCustomTable() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07
    [FileSchema] Found 29 files for processing
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [1] text STANDARD_OUT
    DEBUG testNonNullFilterOnDateType: Date=1996-08-02, epochDays=9710, millis=838958400000, string=1996-08-02
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [1] text STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [1] text STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    1. Initial cache created with 2 records
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7033867548853477536/data/sales_*.csv
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 2

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 2 files to Parquet

DualTimestampTypeTest > testPushDownProjectAggregate(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
          0.0sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.[0;1mDualTimestampTypeTest[0m > [0;1mtestPushDownProjectAggregate(String)[0m

DualTimestampTypeTest > testSelect() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found 3 files for partitioned table: SALES_CUSTOM
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES_CUSTOM
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ErrorHandlingTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

ErrorHandlingTest > testFilePermissionDenied() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
          1.1sec,    3 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.StorageProviderChangeDetectionTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 12 files for processing

DebugMultiTableTest > debugMultiTableDetection() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    Creating first table (Employee):
    [FileSchema] Found 1 files for processing
      Row 0: Employee ID, Name, Department
      Row 1: 1, Alice, Engineering
    [FileSchema] Found 12 files for processing
      Row 2: 2, Bob, Sales
      Row 3: (empty)
      Row 4: (empty)
    Creating second table (Product):
    [FileSchema] Found 12 files for processing
      Row 5: Product ID, Product Name, Price
      Row 6: 101, Widget, 19.99
      Row 7: 102, Gadget, 29.99
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

DualTimestampTypeTest > testReadme() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
      ID 1:
        Raw object: 2024-03-15 (type: java.sql.Date)
        String: 2024-03-15
        Date: 2024-03-15
        Epoch day (simple): 19797
        Epoch day (floor): 19797
      ID 2:
        Raw object: 2024-03-15 (type: java.sql.Date)
        String: 2024-03-15
        Date: 2024-03-15
        Epoch day (simple): 19797
        Epoch day (floor): 19797
      ID 3:
        Raw object: 2024-03-15 (type: java.sql.Date)
        String: 2024-03-15
        Date: 2024-03-15
        Epoch day (simple): 19797
        Epoch day (floor): 19797
      ID 4:
        Raw object: 1970-01-01 (type: java.sql.Date)
        String: 1970-01-01
        Date: 1970-01-01
        Epoch day (simple): 0
        Epoch day (floor): 0
      ID 5:
        Raw object: 1969-12-31 (type: java.sql.Date)
        String: 1969-12-31
        Date: 1969-12-31
        Epoch day (simple): 0
        Epoch day (floor): -1
      ID 6:
        Raw object: 1970-01-02 (type: java.sql.Date)
        String: 1970-01-02
        Date: 1970-01-02
        Epoch day (simple): 1
        Epoch day (floor): 1
      ID 7:
        Raw object: 1959-05-14 (type: java.sql.Date)
        String: 1959-05-14
        Date: 1959-05-14
        Epoch day (simple): -3884
        Epoch day (floor): -3885
      ID 8:
        Raw object: 2030-12-25 (type: java.sql.Date)
        String: 2030-12-25
        Date: 2030-12-25
        Epoch day (simple): 22273
        Epoch day (floor): 22273
      ID 9:
        Raw object: 2024-02-29 (type: java.sql.Date)
        String: 2024-02-29
        Date: 2024-02-29
        Epoch day (simple): 19782
        Epoch day (floor): 19782
      ID 10:
        Raw object: 2000-01-01 (type: java.sql.Date)
        String: 2000-01-01
        Date: 2000-01-01
        Epoch day (simple): 10957
        Epoch day (floor): 10957
      ID 11:
        Raw object: 2001-01-01 (type: java.sql.Date)
        String: 2001-01-01
        Date: 2001-01-01
        Epoch day (simple): 11323
        Epoch day (floor): 11323
      ID 12:
        Raw object: 1900-01-01 (type: java.sql.Date)
        String: 1900-01-01
        Date: 1900-01-01
        Epoch day (simple): -25566
        Epoch day (floor): -25567
      ID 13:
        Raw object: 2024-01-01 (type: java.sql.Date)
        String: 2024-01-01
        Date: 2024-01-01
        Epoch day (simple): 19723
        Epoch day (floor): 19723
      ID 14:
        Raw object: 2023-12-31 (type: java.sql.Date)
        String: 2023-12-31
        Date: 2023-12-31
        Epoch day (simple): 19722
        Epoch day (floor): 19722
      ID 15:
        Raw object: 2023-01-01 (type: java.sql.Date)
        String: 2023-01-01
        Date: 2023-01-01
        Epoch day (simple): 19358
        Epoch day (floor): 19358

    Step 5: Parquet File Status
      Parquet file created: 1505 bytes
    [FileSchema] Found 29 files for processing

    Converting Excel to JSON with multi-table detection...
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Successfully generated Parquet cache: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7033867548853477536/data/.glob_cache/ALL_SALES_2f0c5117.parquet

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_ERROR
    Failed to convert restricted to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."restricted"": java.io.FileNotFoundException: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit9138223326758060410/restricted.csv (Permission denied)
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_ERROR
    Failed to convert restricted to Parquet: Error while executing SQL "SELECT * FROM TEMP_CONVERT."restricted"": java.io.FileNotFoundException: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit9138223326758060410/restricted.csv (Permission denied)

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing

ErrorHandlingTest > testEmptyDirectory() STANDARD_OUT
    [FileSchema] Found 0 files for processing

ErrorHandlingTest > testInvalidCharacterEncoding() STANDARD_OUT
    [FileSchema] Found 29 files for processing
      Could not read parquet file with parquet-tools: Cannot run program "parquet-tools": error=2, No such file or directory

    Step 6: Conversion Process Analysis
      ParquetConversionUtil should use:
        - rs.getString(i) to get original value
        - LocalDate.parse() for ISO dates
        - Math.floorDiv() for negative epoch days

      Potential corruption points:
        1. CsvEnumerator parsing (both engines use this)
        2. ParquetConversionUtil.convertToParquet()
        3. ParquetEnumerableFactory date retrieval
        4. Null handling converting null -> Date(0)
          0.2sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.debug.ParquetDateDebugTest

DetailedDebugTest > testDetailedDebug() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

    JSON files created: 2
      DebugTables__Sheet1_T1.json
      DebugTables__Sheet1_T2.json
    [FileSchema] Found 1 files for processing
          0.1sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.DebugMultiTableTest

ExactReproTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

    === CUSTOM REGEX PARTITION TEST SUMMARY ===
    ✅ Custom regex pattern 'sales_(\d{4})_(\d{2})\.parquet$' correctly extracts year and month
    ✅ Partition columns extracted successfully
    ✅ Partition pruning works with custom regex partitions
    ✅ New partitions automatically discovered after refresh
    ✅ Aggregations work correctly with typed partition columns
    ==========================================


ExactReproTest > testExactRepro() STANDARD_OUT

    Total JSON files: 2

    File: Test__Sheet1_T1.json
    Content: [ {
      "ID" : 1,
      "Name" : "Alice"
    } ]

    File: Test__Sheet1_T2.json
    Content: [ {
      "Product" : "Widget",

FileAdapterTest > testPushDownProjectAggregateWithFilter(String) STANDARD_OUT
      "Price" : 10
    } ]
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.DetailedDebugTest

GuidHexDetectionTest > testGuidHexDetection() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

RefreshableTableTest > testRefreshableJsonTable() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    Created Excel file: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit320772643846419027/embedded_tables.xlsx
    Testing GUID/hex detection...
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    Table type: org.apache.calcite.adapter.file.RefreshableJsonTable
    Is RefreshableTable: true
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 4 files for processing
    JSON files created: 1
      GuidTest__Sheet1.json
    [FileSchema] Found 3 files for processing
    ✓ GUID/hex detection working correctly!
    [FileSchema] Found 4 files for processing
    JSON files created: 2
      EmbeddedTables__Sheet1_T2.json
      Size: 150 bytes
      First 200 chars: [ {
      "Product ID" : 101,
      "Product Name" : "Widget",
      "Price" : 19.99
    }, {
      "Product ID" : 102,
      "Product Name" : "Gadget",
      "Price" : 29.99

GuidHexDetectionTest STANDARD_OUT
    } ]
      EmbeddedTables__Sheet1_T1.json
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.GuidHexDetectionTest

Gradle Test Executor 5 STANDARD_OUT
      Size: 148 bytes
      First 200 chars: [ {
      "Employee ID" : 1,
      "Name" : "Alice",
      "Department" : "Engineering"
    }, {
      "Employee ID" : 2,
      "Name" : "Bob",
      "Department" : "Sales"
    } ]

RecursiveDirectoryComprehensiveTest > testBasicRecursiveDirectoryScanning() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 3 files for processing
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.ExactReproTest

RedisIntegrationTest > testRedisConfigurationValidation() STANDARD_OUT
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest STANDARD_OUT
    [FileSchema] Found 4 files for processing

DualTimestampTypeTest > testWackyColumns() STANDARD_OUT
    [FileSchema] Found 3 files for processing

DualTimestampTypeTest > testWackyColumns() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7033867548853477536/data/sales_*.csv

RedisIntegrationTest STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache

RedisIntegrationTest > testRedisIntegrationPlaceholder() STANDARD_ERROR
    INFO: Total files after preprocessing: 2
[0;34;1mWARNING[0m   0.0sec,    4 completed,   0 failed, [0;34;1m  1[0m skipped, org.apache.calcite.adapter.file.feature.[0;34;1mRedisIntegrationTest[0m

SpuriousTableComprehensiveTest STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 2 files to Parquet

SpuriousTableComprehensiveTest > testCsvSpuriousLineDetection() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
          0.1sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.[0;1mFileAdapterTest[0m > [0;1mtestPushDownProjectAggregateWithFilter(String)[0m

FileAdapterTest > testFilterableWhere() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

ErrorHandlingTest > testCorruptedParquetFile() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testJsonJoinOnString() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    DEBUG TIMESTAMP: actual=838987262000, timestamp=1996-08-02 08:01:02.0, expected values: 838944062000L, 838958462000L, 838972862000L, 838915262000L

FileAdapterTest > testCsvSalesHeaderOnly() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

FileAdapterTest > testCsvSalesHeaderOnly() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Successfully generated Parquet cache: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit7033867548853477536/data/.glob_cache/ALL_SALES_2f0c5117.parquet

FileAdapterTest > testCsvSalesHeaderOnly() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    CSV has 1 columns:
      Column 1: __this_is_a_comment
    Row 1: firstCol='[Ljava.lang.Object;@4817d64d'
    Row 2: firstCol='[Ljava.lang.Object;@310d9af8'
    Row 3: firstCol='[Ljava.lang.Object;@f8e541'
    Row 4: firstCol='[Ljava.lang.Object;@549a256c'
    Row 5: firstCol='[Ljava.lang.Object;@2249340c'
    Row 6: firstCol='[Ljava.lang.Object;@7fceb0e7'
    Row 7: firstCol='[Ljava.lang.Object;@385b80b2'
    Row 8: firstCol='[Ljava.lang.Object;@3d6f7390'
    Total rows: 8, Valid data rows: 8
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

SpuriousTableComprehensiveTest > testEmptyRowSpuriousTable() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testDateType2() STANDARD_ERROR
    Failed to convert malformed to Parquet: Index 2 out of bounds for length 2

FileAdapterTest > testDateType2() STANDARD_OUT

    === GLOB CSV FILES TEST SUMMARY ===
    ✅ Glob pattern 'sales_*.csv' matched 2 files
    ✅ Combined data from multiple CSV files
    ✅ Total 5 records with sum amount $1740.00
    ✅ Grouped by year: 2023 (3 records), 2024 (2 records)
    ====================================

    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

GlobParquetTableTest > testGlobPatternDetection() STANDARD_OUT

    === GLOB PATTERN DETECTION TEST ===
    ✅ Correctly identified patterns with * wildcard
    ✅ Correctly identified patterns with ? wildcard
    ✅ Correctly identified patterns with [] ranges
    ✅ Correctly rejected non-glob patterns
    ===================================


GlobParquetTableTest > testGlobPatternWithJsonFiles() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testPushDownProject() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

FileAdapterTest > testPushDownProject() STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileAdapterTest > testPushDownProject() STANDARD_ERROR
    Failed to convert malformed to Parquet: Index 2 out of bounds for length 2

FileAdapterTest > testPushDownProject() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
          0.3sec,   12 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.error.ErrorHandlingTest

VerboseDebugTest STANDARD_OUT
    [FileSchema] Found 4 files for processing

VerboseDebugTest > verboseDebug() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    Creating Excel structure:
    Row 0 (header): 'Employee ID', 'Name', 'Department'
    Row 1 (data): 1.0, 'Alice', 'Engineering'
    Row 2 (data): 2.0, 'Bob', 'Sales'
    Row 3: (empty)
    Row 4: (empty)
    Row 5 (header): 'Product ID', 'Product Name', 'Price'
    Row 6 (data): 101.0, 'Widget', 19.99
    Row 7 (data): 102.0, 'Gadget', 29.99

FileAdapterTest > testSalesEmps() STANDARD_OUT
    [FileSchema] Found 12 files for processing

    Converting with multi-table detection...
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing

SpuriousTableComprehensiveTest > testSpuriousTableDetection() STANDARD_OUT
    [FileSchema] Found 8 files for processing

    JSON files created: 2
      EmbeddedTables__Sheet1_T2.json
      EmbeddedTables__Sheet1_T1.json

    Expected: 2 JSON files
    Actual: 2 JSON files
          0.0sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.VerboseDebugTest

ArrowFileTest > testArrowWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Excel file location: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit4180625675646172161/embedded_tables.xlsx
    Temp dir contents:
      EmbeddedTables__Sheet1_T2.json
      embedded_tables.xlsx
      EmbeddedTables__Sheet1_T1.json
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing

ArrowFileTest > testArrowWithParquetEngine() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14656398089918676331/data/data_q*.json
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 2
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 2 files to Parquet

ArrowFileTest > testArrowWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testCsvSalesEmps() STANDARD_ERROR
    Failed to convert BUG_YAML to Parquet: null

FileAdapterTest > testCsvSalesEmps() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Successfully generated Parquet cache: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14656398089918676331/data/.glob_cache/QUARTERLY_DATA_7904e7c6.parquet

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_OUT
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [1] text STANDARD_OUT
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 8 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_ERROR
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregateNested(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
          0.0sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.[0;1mDualTimestampTypeTest[0m > [0;1mtestPushDownProjectAggregateNested(String)[0m

DualTimestampTypeTest > testSelectLongMultiplyInteger() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing

FileAdapterTest > testJsonWithCsvJoin() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 29 files for processing

FileAdapterTest > testJsonWithCsvJoin() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14656398089918676331/data/data_q*.json

FileAdapterTest > testJsonWithCsvJoin() STANDARD_OUT
    [FileSchema] Found 12 files for processing

FileAdapterTest > testJsonWithCsvJoin() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 2
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 2 files to Parquet

FileAdapterTest > testJsonWithCsvJoin() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testUnionGroupByWithoutGroupKey() STANDARD_OUT
    [FileSchema] Found 4 files for processing

SpuriousTableComprehensiveTest > testHtmlSpuriousTableDetection() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing

GlobParquetTableTest > testMixedFileTypes() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    HTML test found tables: [nested_tables__sales_report, nested_tables__t1, nested_tables__t3]

GlobParquetTableTest > testMixedFileTypes() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Successfully generated Parquet cache: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit14656398089918676331/data/.glob_cache/QUARTERLY_DATA_7904e7c6.parquet

GlobParquetTableTest > testMixedFileTypes() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 8 files for processing
    Failed to query table nested_tables__sales_report: Error while executing SQL "SELECT * FROM "nested_tables__sales_report" LIMIT 5": org.apache.calcite.adapter.file.FileReaderException: 0 HTML element(s) selected
    Table nested_tables__sales_report correctly identified as unreadable (spurious)
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Failed to query table nested_tables__t1: Error while executing SQL "SELECT * FROM "nested_tables__t1" LIMIT 5": org.apache.calcite.adapter.file.FileReaderException: 3 HTML element(s) selected
    Table nested_tables__t1 correctly identified as unreadable (spurious)
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Failed to query table nested_tables__t3: Error while executing SQL "SELECT * FROM "nested_tables__t3" LIMIT 5": org.apache.calcite.adapter.file.FileReaderException: 0 HTML element(s) selected
    Table nested_tables__t3 correctly identified as unreadable (spurious)

SpuriousTableComprehensiveTest > testMergedCellSpuriousTable() STANDARD_OUT
    [FileSchema] Found 29 files for processing

    === GLOB JSON FILES TEST SUMMARY ===
    ✅ Glob pattern 'data_q*.json' matched 2 files
    ✅ Combined JSON arrays from multiple files
    ✅ Total 6 months with revenue $85,000
    ✅ Q1: $37,000, Q2: $48,000
    ====================================

    [FileSchema] Found 8 files for processing

GlobParquetTableTest STANDARD_OUT
    [FileSchema] Found 8 files for processing

GlobParquetTableTest > testGlobPatternWithHtmlFiles() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    1
    [FileSchema] Found 2 files for processing

DualTimestampTypeTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 2 files for processing

DualTimestampTypeTest > testBadDirectory() STANDARD_ERROR
    Error scanning for files with pattern: *
    java.nio.file.NoSuchFileException: /does/not/exist
    	at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)
    	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
    	at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
    	at java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:55)
    	at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:171)
    	at java.base/java.nio.file.Files.readAttributes(Files.java:1853)
    	at java.base/java.nio.file.FileTreeWalker.getAttributes(FileTreeWalker.java:226)
    	at java.base/java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:277)
    	at java.base/java.nio.file.FileTreeWalker.walk(FileTreeWalker.java:323)
    	at java.base/java.nio.file.Files.walkFileTree(Files.java:2779)
    	at org.apache.calcite.adapter.file.FileSchema.findMatchingFiles(FileSchema.java:1433)
    	at org.apache.calcite.adapter.file.FileSchema.getFilesForProcessing(FileSchema.java:1475)
    	at org.apache.calcite.adapter.file.FileSchema.getTableMap(FileSchema.java:487)
    	at org.apache.calcite.schema.impl.AbstractSchema.getTableNames(AbstractSchema.java:105)
    	at org.apache.calcite.schema.lookup.CompatibilityLookup.getNames(CompatibilityLookup.java:65)
    	at org.apache.calcite.schema.lookup.TransformingLookup.getNames(TransformingLookup.java:53)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.loadNameMap(SnapshotLookup.java:62)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.lambda$delegate$0(SnapshotLookup.java:57)
    	at org.apache.calcite.util.LazyReference.getOrCompute(LazyReference.java:53)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.delegate(SnapshotLookup.java:57)
    	at org.apache.calcite.schema.lookup.SnapshotLookup.getNames(SnapshotLookup.java:50)
    	at org.apache.calcite.schema.lookup.ConcatLookup.lambda$getNames$0(ConcatLookup.java:62)
    	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:273)
    	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
    	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
    	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
    	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
    	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
    	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
    	at org.apache.calcite.schema.lookup.ConcatLookup.getNames(ConcatLookup.java:63)
    	at org.apache.calcite.jdbc.CalciteSchema.getTableNames(CalciteSchema.java:343)
    	at org.apache.calcite.jdbc.CalciteMetaImpl.tables(CalciteMetaImpl.java:425)
    	at org.apache.calcite.jdbc.CalciteMetaImpl.lambda$getTables$2(CalciteMetaImpl.java:360)
    	at org.apache.calcite.linq4j.EnumerableDefaults$20$1.moveNext(EnumerableDefaults.java:3104)
    	at org.apache.calcite.linq4j.EnumerableDefaults$29.moveNext(EnumerableDefaults.java:3911)
    	at org.apache.calcite.linq4j.Linq4j$EnumeratorIterator.<init>(Linq4j.java:666)
    	at org.apache.calcite.linq4j.Linq4j.enumeratorIterator(Linq4j.java:99)
    	at org.apache.calcite.linq4j.AbstractEnumerable.iterator(AbstractEnumerable.java:33)
    	at org.apache.calcite.linq4j.Linq4j$IterableEnumerable.iterator(Linq4j.java:528)
    	at org.apache.calcite.avatica.MetaImpl.createCursor(MetaImpl.java:94)
    	at org.apache.calcite.avatica.AvaticaResultSet.execute(AvaticaResultSet.java:186)
    	at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:64)
    	at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:43)
    	at org.apache.calcite.avatica.AvaticaConnection.executeQueryInternal(AvaticaConnection.java:575)
    	at org.apache.calcite.avatica.AvaticaConnection.createResultSet(AvaticaConnection.java:692)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData$9.call(AvaticaDatabaseMetaData.java:663)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData$9.call(AvaticaDatabaseMetaData.java:660)
    	at org.apache.calcite.avatica.AvaticaConnection.invokeWithRetries(AvaticaConnection.java:795)
    	at org.apache.calcite.avatica.AvaticaDatabaseMetaData.getTables(AvaticaDatabaseMetaData.java:659)
    	at org.apache.calcite.adapter.file.FileAdapterTest.testBadDirectory(FileAdapterTest.java:284)
    	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
    	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
    	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
    	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:45)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
    	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
    	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
    	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
    	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.tryRemoveAndExec(ForkJoinPool.java:1351)
    	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:422)
    	at java.base/java.util.concurrent.ForkJoinTask.join(ForkJoinTask.java:651)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.joinConcurrentTasksInReverseOrderToEnableWorkStealing(ForkJoinPoolHierarchicalTestExecutorService.java:162)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:136)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
    	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
    	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)

DualTimestampTypeTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 2 files for processing

DualTimestampTypeTest > testBadDirectory() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Regenerating Parquet cache for glob: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit5874132162163879418/data/report*.html
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
    	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
    	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:185)
    	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Found 2 files matching pattern
    	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
    	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
    	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
    	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
    	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)

DualTimestampTypeTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 0 files for processing

DualTimestampTypeTest > testBadDirectory() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 1 tables in report2.html

DualTimestampTypeTest > testBadDirectory() STANDARD_OUT
    [FileSchema] Found 8 files for processing

DualTimestampTypeTest STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.HtmlToJsonConverter convert
    INFO: Found 2 tables in report1.html

DualTimestampTypeTest > testSelectSingleProject() STANDARD_ERROR
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable regenerateCache
    INFO: Total files after preprocessing: 3
    Aug 05, 2025 3:44:53 PM org.apache.calcite.adapter.file.GlobParquetTable mergeFilesToParquet
    INFO: Merging 3 files to Parquet

DualTimestampTypeTest > testSelectSingleProject() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    Checking for extracted files:
    report1_sales.json exists: true
    report1_summary.json exists: true
    report2_table1.json exists: false

    === GLOB HTML FILES TEST SUMMARY ===
    ✅ Glob pattern 'report*.html' matched 2 files
    ✅ HTML tables extracted to JSON files
    ✅ report1.html → 2 tables extracted
    ✅ report2.html → 1 table extracted
    ====================================

    [FileSchema] Found 4 files for processing

GlobParquetTableTest STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

RecursiveDirectoryComprehensiveTest > testRecursiveDepthLimit() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 10 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    Sales
    Marketing
    Accounts
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testJoinOnString() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

SpuriousTableComprehensiveTest > testHeaderOnlySpuriousTable() STANDARD_OUT
    Header-only test: Created 0 JSON files

SpuriousTableComprehensiveTest STANDARD_OUT
    [FileSchema] Found 29 files for processing

SpuriousTableComprehensiveTest > testFormattingArtifactSpuriousTable() STANDARD_OUT
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testFileSelect() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

    === MIXED FILE TYPES TEST ===
    ✅ Glob pattern '*.*' accepts all file types
    ✅ CSV and JSON files in same glob
    ✅ GlobParquetTable created successfully
    ==============================

          5.9sec,    6 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.GlobParquetTableTest

CompressedFileTest > testGzippedCsvFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
          0.7sec,    7 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.SpuriousTableComprehensiveTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest > testExcelWithMergedCells() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
        [0;1m  2.3sec[0m, org.apache.calcite.adapter.file.[0;1mRemoteFileRefreshTest[0m > [0;1mtestHttpHeadFallback()[0m

RemoteFileRefreshTest > testHttpMetadataFetch() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

CompressedFileTest > testGzippedJsonFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest > testBasicExcelFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

CompressedFileTest > testGzippedWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

CompressedFileTest > testGzippedWithParquetEngine() STANDARD_ERROR
    Failed to convert BUG_YAML to Parquet: null

CompressedFileTest > testGzippedWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

CompressedFileTest > testMultipleCompressedFiles() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 2 files for processing

FileAdapterTest STANDARD_OUT
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest STANDARD_OUT
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [7] CamelCase STANDARD_OUT
    [FileSchema] Found 20 files for processing
    Tables created for sheet 'CamelCase':
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
[0;34;1mWARNING[0m   6.8sec,   56 completed,   0 failed, [0;34;1m  2[0m skipped, org.apache.calcite.adapter.file.[0;34;1mFileAdapterTest[0m

YamlFileTest > testYamlWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 20 files for processing

MixedFormatGlobTest > testMixedFormatWithParquetEngine() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__camelcase
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 20 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [1] Sheet with Spaces STANDARD_OUT
    Tables created for sheet 'Sheet with Spaces':
    [FileSchema] Found 20 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

YamlFileTest > testBasicYamlFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
          0.5sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.format.CompressedFileTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing

ComprehensiveEnginePerformanceTest > testAllEnginesPerformance() STANDARD_OUT
    [FileSchema] Found 2 files for processing
[0;34;1mWARNING[0m   0.0sec,    1 completed,   0 failed, [0;34;1m  1[0m skipped, org.apache.calcite.adapter.file.performance.[0;34;1mComprehensiveEnginePerformanceTest[0m

DirectParquetPerformanceTest > testDirectPerformanceComparison() STANDARD_OUT

    === DIRECT PARQUET VS CSV PERFORMANCE TEST ===
    Creating CSV dataset...
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__sheetwithspaces
    [FileSchema] Found 1 files for processing
    2. JSON cache file was regenerated (timestamp changed)
       Original cache time: 1754423093164
       New cache time: 1754423094467
       ✓ JSON cache invalidation is working correctly!
    [FileSchema] Found 1 files for processing
          3.5sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.ParquetAutoConversionTest

LargeScaleEnginePerformanceTest > testLargeScalePerformance() STANDARD_OUT
    Creating large test datasets...
      Creating sales_100000.csv with 100,000 rows...
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [2] Sheet-With-Dashes STANDARD_OUT
    Tables created for sheet 'Sheet-With-Dashes':

RefreshableTableTest > testTableLevelRefreshOverride() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

RefreshableTableTest > testNoRefreshWithoutInterval() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing

YamlFileTest > testYmlExtension() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__sheetwithdashes

RefreshableTableTest > testPartitionedParquetTableRefresh() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

MixedFormatGlobTest > testMixedFormatSpecificExtensions() STANDARD_OUT
    [FileSchema] Found 6 files for processing

RecursiveDirectoryComprehensiveTest > testRecursiveWithIgnorePatterns() STANDARD_OUT
    [FileSchema] Found 1 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [3] Sheet_With_Underscores STANDARD_OUT
    [FileSchema] Found 4 files for processing
    Tables created for sheet 'Sheet_With_Underscores':
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

YamlFileTest > testNestedYaml() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES
    [FileSchema] Found 1 files for processing
    Found 2 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 2 files for table: SALES
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__sheetwithunderscores
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [4] Sheet.With.Dots STANDARD_OUT
    Tables created for sheet 'Sheet.With.Dots':
    [FileSchema] Found 29 files for processing
          0.4sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.format.YamlFileTest

ParquetColdStartPerformanceTest > testColdStartPerformance() STANDARD_OUT

    === PARQUET COLD START PERFORMANCE TEST ===
    Setting up test with pre-converted Parquet files...

    Creating large CSV dataset: sales.csv
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__sheet.with.dots
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

/Users/runner/work/crossbow/crossbow/arrow/cpp/src/gandiva/cache.cc:61: Creating gandiva cache with capacity of 5000
/Users/runner/work/crossbow/crossbow/arrow/cpp/src/gandiva/engine.cc:276: Detected CPU Name : apple-m1
/Users/runner/work/crossbow/crossbow/arrow/cpp/src/gandiva/engine.cc:277: Detected CPU Features: []

> Task :file:test
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [5] 123Numbers STANDARD_OUT
    Tables created for sheet '123Numbers':
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 8 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing

RecursiveDirectoryComprehensiveTest > testRecursiveWithSymlinks() STANDARD_OUT
    testMixedFormatSpecificExtensions found tables: [report__t1, inventory, sales_2024, config, sales_2023, products]
    [FileSchema] Found 2 files for processing

MixedFormatGlobTest > testRecursiveMixedFormat() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing

ArrowFileTest > testArrowGlobPattern() STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

ArrowFileTest > testArrowGlobPattern() STANDARD_OUT
    [FileSchema] Found 1 files for processing
      Found table: namingtest__123numbers
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 2 files for processing

ArrowFileTest > testArrowWithNullValues() STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing

ExcelComprehensiveTest > testExcelSheetNaming(String) > [6] UPPERCASE STANDARD_OUT
    [FileSchema] Found 3 files for processing
    Tables created for sheet 'UPPERCASE':
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing

DualTimestampTypeTest > testNoThSelect() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
      Found table: namingtest__uppercase
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
          0.8sec,    7 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.format.[0;1mExcelComprehensiveTest[0m > [0;1mtestExcelSheetNaming(String)[0m

ExcelComprehensiveTest > testEmptyExcelSheet() STANDARD_OUT
    [FileSchema] Found 7 files for processing
    [FileSchema] Found 7 files for processing

ArrowFileTest > testBasicArrowFile() STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

ArrowFileTest > testBasicArrowFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 7 files for processing
    [FileSchema] Found 0 files for processing

ExcelComprehensiveTest > testLargeExcelFile() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 7 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

MixedFormatGlobTest > testJoinAcrossMixedFormats() STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
          1.8sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.format.ArrowFileTest

SeparatedPerformanceTest > testSeparatedPerformance() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 65 files for processing
[0;34;1mWARNING[0m   0.0sec,    1 completed,   0 failed, [0;34;1m  1[0m skipped, org.apache.calcite.adapter.file.performance.[0;34;1mSeparatedPerformanceTest[0m

SimpleParquetColdStartTest > testParquetColdStart() STANDARD_OUT

    === SIMPLE PARQUET COLD START TEST ===
    Creating test dataset: 100000 rows
    [FileSchema] Found 29 files for processing
        Completed: sales_100000.csv (8.5 MB)
      Creating sales_500000.csv with 500,000 rows...
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

MixedFormatGlobTest > testMixedFormatGlobAllFiles() STANDARD_OUT
    [FileSchema] Found 5 files for processing

ExcelComprehensiveTest > testExcelFormulas() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    Created: sales.csv (6.5 MB)

    Testing cold start performance...

    Testing: Direct CSV processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing

ExcelComprehensiveTest > testExcelDataTypes() STANDARD_OUT
    [FileSchema] Found 29 files for processing
          4.0sec,    5 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.RemoteFileRefreshTest

DateFormatTest > testDateFormats() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DateFormatTest > testDateFormats() STANDARD_OUT

    === DATE Format Test ===
    Verifying dates are stored as days since Unix epoch (1970-01-01)

    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    testMixedFormatGlobAllFiles found tables: [archive, config, employees, products, report__t1]
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    Test 1: Basic date format
      Days since epoch: 19797
      Date value: 2024-03-15

    Test 2: Slash date format
      Days since epoch: 19797
      Date value: 2024-03-15

    Test 3: Dot date format
      Days since epoch: 19797
      Date value: 2024-03-15

    Test 4: Epoch date (1970-01-01)
      Days since epoch: 0
      Date value: 1970-01-01

    Test 5: Day before epoch
      Days since epoch: -1
      Date value: 1969-12-31

    Test 6: Day after epoch
      Days since epoch: 1
      Date value: 1970-01-02

    Test 7: Historical date
      Days since epoch: -3885
      Date value: 1959-05-14

    Test 8: Future date
      Days since epoch: 22273
      Date value: 2030-12-25

    Test 9: Leap year date
      Days since epoch: 19782
      Date value: 2024-02-29

    Test 10: Century boundary
      Days since epoch: 10957
      Date value: 2000-01-01

    Test 11: Millennium start
      Days since epoch: 11323
      Date value: 2001-01-01

    Test 12: Very old date
      Days since epoch: -25567
      Date value: 1900-01-01

    Test 13: Recent date
      Days since epoch: 19723
      Date value: 2024-01-01

    Test 14: End of year
      Days since epoch: 19722
      Date value: 2023-12-31

    Test 15: Start of year
      Days since epoch: 19358
      Date value: 2023-01-01

    === SQL Date Operations ===
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DateFormatTest > testDateFormats() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DateFormatTest > testDateFormats() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 29 files for processing
    Original date (epoch): 1970-01-01
    Next day: 1970-01-02
    Previous day: 1969-12-31

DateFormatTest > testDateParsingWithParquet() STANDARD_OUT

    === Parquet Date Storage Test ===
    [FileSchema] Found 12 files for processing

ExcelComprehensiveTest > testMultiSheetExcel() STANDARD_OUT
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 5 files for processing
    Found 3 files for partitioned table: SALES
    [FileSchema] Found 29 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 5 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found 3 files for partitioned table: SALES
    [FileSchema] Found 5 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
          1.7sec,    5 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.integration.MixedFormatGlobTest

DateSelectTest > testDateSelectOutput() STANDARD_OUT
    [FileSchema] Found 12 files for processing

DateSelectTest > testDateSelectOutput() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DateSelectTest > testDateSelectOutput() STANDARD_OUT

    === SQL SELECT Date Output ===
    Testing what SQL SELECT returns for DATE values

    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
        100,000 rows written...
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    Test 1: Basic date format
      getDate(): 2024-03-15
      CAST AS VARCHAR: 2024-03-15
      Days since epoch (getInt): 19797

    Test 4: Epoch date (1970-01-01)
      getDate(): 1970-01-01
      CAST AS VARCHAR: 1970-01-01
      Days since epoch (getInt): 0

    Test 5: Day before epoch
      getDate(): 1969-12-31
      CAST AS VARCHAR: 1969-12-31
      Days since epoch (getInt): -1

    Test 6: Day after epoch
      getDate(): 1970-01-02
      CAST AS VARCHAR: 1970-01-02
      Days since epoch (getInt): 1

    Test 7: Historical date
      getDate(): 1959-05-14
      CAST AS VARCHAR: 1959-05-14
      Days since epoch (getInt): -3885

    === Date Comparison Test ===
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    ID 4: 1970-01-01 = 0 days
    ID 5: 1969-12-31 = -1 days
    ID 6: 1970-01-02 = 1 days
          0.3sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.DateFormatTest

DualTimestampTypeTest > testPushDownProject2() STANDARD_OUT
    [FileSchema] Found 2 files for processing

DualTimestampTypeTest > testPushDownProject2() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProject2() STANDARD_OUT
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Found 3 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 1 files for processing

DualTimestampTypeTest > testPushDownProject2() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProject2() STANDARD_OUT
    Found 3 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES
    [FileSchema] Found 4 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testDecimalType() STANDARD_OUT
    Rows with date 2024-03-15: 3
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 2 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
      Run 1: 100000 rows, 306 ms
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    Rows with epoch date: 1

DateSelectTest STANDARD_OUT
    [FileSchema] Found 29 files for processing
          0.2sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.DateSelectTest

Gradle Test Executor 5 STANDARD_OUT
      200,000 rows written...

DualTimestampTypeTest > testJsonSalesDepts() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
          2.1sec,   14 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.format.ExcelComprehensiveTest

DualTimestampTypeTest > testJsonSalesEmpty() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    Column names in result set:
      Column 1: id (type: INTEGER)
      Column 2: amount (type: DOUBLE)
      Column 3: product (type: VARCHAR)
      Column 4: year (type: INTEGER)
      Column 5: month (type: INTEGER)
    Values: id=3, year=2023, month=3
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    Found 3 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 1 files for processing

DualTimestampTypeTest > testInToSemiJoinWithCast() STANDARD_OUT
    Found 3 files for partitioned table: SALES

DualTimestampTypeTest > testFindBiggerNoTh() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES

DualTimestampTypeTest > testFindBiggerNoTh() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testFindBiggerNoTh() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Found 3 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 3 files for table: SALES
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
      Run 2: 100000 rows, 119 ms
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    DEBUG testGreaterThanFilterOnDateType: Date=1996-08-02, epochDays=9710, millis=838958400000, string=1996-08-02
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testFindBiggerNoTh() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testFindBiggerNoTh() STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testSalesDepts() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
      Run 3: 100000 rows, 103 ms
      Average: 176 ms

    Testing: Parquet with conversion
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testDateType() STANDARD_OUT
    Test JVM timezone: America/New_York offset: -5 hours
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
        200,000 rows written...
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    DEBUG TIMESTAMP: actual=838987262000, timestamp=1996-08-02 08:01:02.0, expected values: 838944062000L, 838958462000L, 838972862000L, 838915262000L

DualTimestampTypeTest > testSelectSingleProjectGz() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    Fred
    Eric
    John
    Wilma
    Alice

DualTimestampTypeTest > testTimestampGroupBy() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testFilterableWhereWithNot1() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testFilterableWhereWithNot2() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testCsvSalesDepts() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testCsvSalesEmpty() STANDARD_OUT
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testJsonSalesEmps() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testJson() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testFilterableSelectStar() STANDARD_OUT
    [FileSchema] Found 12 files for processing
        300,000 rows written...
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
      400,000 rows written...
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    100, Fred, 10, , , 30, 25, true, false, 1996-08-03
    110, Eric, 20, M, San Francisco, 3, 80, null, false, 2001-01-01
    110, John, 40, M, Vancouver, 2, null, false, true, 2002-05-03
    120, Wilma, 20, F, , 1, 5, null, true, 2005-09-07
    130, Alice, 40, F, Vancouver, 2, null, false, true, 2007-01-01

DualTimestampTypeTest > testFilterableSelect() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    Fred
    Eric
    John
    Wilma
    Alice

DualTimestampTypeTest > testGroupByTimeParquet() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testFilterableWhere2() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testFilterableWhere3() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testDecimalTypeArithmeticOperations() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testInToSemiJoinWithoutCast() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testPrepared() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testNonNullFilterOnDateType() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testFilterOnNullableTimestamp() STANDARD_OUT
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testFilterOnNullableTimestamp() STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testFilterOnNullableTimestamp() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    Found 4 files for partitioned table: SALES
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    Found 4 files for partitioned table: SALES
    [FileSchema] Found 12 files for processing
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found 4 files for partitioned table: SALES
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
        400,000 rows written...

DualTimestampTypeTest > testJsonWithCsvJoin() STANDARD_OUT
      Run 1: 100000 rows, 953 ms
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    Found 4 files for partitioned table: SALES

DualTimestampTypeTest STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) STANDARD_OUT
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [1] text STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [1] text STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [1] text STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    Found 4 files for partitioned table: SALES
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 4 files for processing
    Found 4 files for partitioned table: SALES
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_OUT
    [RefreshablePartitionedParquetTable] Discovered 4 files for table: SALES

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProjectAggregateWithFilter(String) > [2] dot STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    DEBUG testNonNullFilterOnDateType: Date=1996-08-02, epochDays=9710, millis=838958400000, string=1996-08-02
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

DualTimestampTypeTest > testCsvSalesEmps() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
          0.1sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.temporal.[0;1mDualTimestampTypeTest[0m > [0;1mtestPushDownProjectAggregateWithFilter(String)[0m

DualTimestampTypeTest > testFilterableWhere() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testJsonJoinOnString() STANDARD_OUT
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing

    === PARTITIONED TABLE REFRESH TEST SUMMARY ===
    ✅ Initial state: 2 partitions (2023/01, 2023/02) with 2 records
    ✅ Added 2023/03 partition → Automatically discovered (3 records total)
    ✅ Added 2024/01 partition → Automatically discovered (4 records total)
    ✅ Partition pruning works: year=2023 returns 3 records, year=2024 returns 1 record
    ✅ RefreshablePartitionedParquetTable successfully discovers new partitions!
    ==============================================

    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testSalesEmps() STANDARD_OUT
    [FileSchema] Found 12 files for processing
        [0;1m  3.3sec[0m, org.apache.calcite.adapter.file.[0;1mRefreshableTableTest[0m > [0;1mtestPartitionedParquetTableRefresh()[0m

RefreshableTableTest > testRefreshBehavior() STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing

DualTimestampTypeTest > testCsvSalesHeaderOnly() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
      Run 2: 100000 rows, 175 ms
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing

DualTimestampTypeTest > testDateType2() STANDARD_OUT
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProject() STANDARD_OUT
    [FileSchema] Found 12 files for processing

DualTimestampTypeTest > testPushDownProject() STANDARD_ERROR
    WARNING: Using execution engine 'LINQ4J' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

DualTimestampTypeTest > testPushDownProject() STANDARD_OUT
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 4 files for processing

MicrosoftGraphStorageProviderTest > testMicrosoftGraphProviderConnection() STANDARD_OUT

    === Testing Microsoft Graph API Provider ===
    Site URL: https://kenstott.sharepoint.com
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
        Completed: sales_500000.csv (42.6 MB)
      Creating sales_1000000.csv with 1,000,000 rows...
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
      Run 3: 100000 rows, 98 ms
      Average: 408 ms

    Testing: Parquet cached
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 12 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 12 files for processing
      600,000 rows written...
    [FileSchema] Found 12 files for processing

MicrosoftGraphStorageProviderTest > testMicrosoftGraphListFiles() STANDARD_OUT

    === Testing Microsoft Graph API ===
    [FileSchema] Found 29 files for processing
    DEBUG TIMESTAMP: actual=838987262000, timestamp=1996-08-02 08:01:02.0, expected values: 838944062000L, 838958462000L, 838972862000L, 838915262000L

RecursiveDirectoryComprehensiveTest > testRecursiveWithMultipleFormats() STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
      Run 1: 100000 rows, 87 ms
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
      Created: sales.csv (72.5 MB)
    Creating Parquet dataset...
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
      Run 2: 100000 rows, 72 ms
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
        100,000 rows written...
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 6 files for processing
    [FileSchema] Found 29 files for processing

RecursiveDirectoryComprehensiveTest STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
      Run 3: 100000 rows, 77 ms
      Average: 79 ms

    ## COLD START PERFORMANCE RESULTS ##
    Dataset: 100,000 rows
    Query: Simple COUNT(*) aggregation

    LINQ4J (CSV direct):             176 ms  (baseline)
    PARQUET (with conversion):        408 ms  (0.4x vs baseline)
    PARQUET (cached):                 79 ms  (2.2x vs baseline)

    ## KEY INSIGHTS ##
    • Conversion overhead: 329 ms
    • Cache speedup: 5.2x faster
    • True Parquet advantage: 2.2x vs CSV
        [0;1m  3.3sec[0m, org.apache.calcite.adapter.file.performance.[0;1mSimpleParquetColdStartTest[0m > [0;1mtestParquetColdStart()[0m
          3.3sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.performance.SimpleParquetColdStartTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 29 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 29 files for processing
[0;34;1mWARNING[0m   6.3sec,   61 completed,   0 failed, [0;34;1m  2[0m skipped, org.apache.calcite.adapter.file.temporal.[0;34;1mDualTimestampTypeTest[0m
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        200,000 rows written...
      800,000 rows written...
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        300,000 rows written...
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        400,000 rows written...
      CSV file created: 85.2 MB

    Pre-converting CSV to Parquet using file adapter...
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

    === Testing File Metadata ===
    Test file: calcite-test.txt
    [FileSchema] Found 130 files for processing
        500,000 rows written...
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
    [FileSchema] Found 4 files for processing
        [0;1m  2.2sec[0m, org.apache.calcite.adapter.file.[0;1mRefreshableTableTest[0m > [0;1mtestRefreshBehavior()[0m
          8.5sec,    8 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.RefreshableTableTest
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    Successfully connected! Found 2 items
      [DIR]  Shared Documents
      [FILE] calcite-test.txt
        [0;1m  8.5sec[0m, org.apache.calcite.adapter.file.[0;1mSharePointAutoConfigTest[0m > [0;1mtestSharePointConnection()[0m
          8.5sec,    2 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.SharePointAutoConfigTest
        600,000 rows written...
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        700,000 rows written...
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        800,000 rows written...
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    Testing directory: Shared Documents
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
        900,000 rows written...
    [FileSchema] Found 130 files for processing
    File size: 134 bytes
    Content type: text/plain
    ETag: "{06BD4C98-B9C6-444F-9316-C23543B530A1},1"
    [FileSchema] Found 130 files for processing
      Conversion triggered. Row count: 1000000
      Moved Parquet file to: sales.parquet (22.0 MB)

    Setup complete:
      CSV directory: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2331550861017311837/csv_only
      Parquet directory: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit2331550861017311837/parquet_only

    Contents of csv_only:
      sales.csv (72.5 MB)

    Contents of parquet_only:
      sales.parquet (22.0 MB)

    ## TEST CONFIGURATION ##
    Dataset size: 1,000,000 rows
    Warmup runs: 2
    Test runs: 5
    Each test creates new connection (cold start)

    ## TEST 1: Simple COUNT(*) ##

    ### Count Query ###
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
        Completed: sales_1000000.csv (85.2 MB)
    Test datasets created.

    === LARGE-SCALE FILE ADAPTER EXECUTION ENGINE PERFORMANCE TEST ===
    Date: Tue Aug 05 15:45:01 EDT 2025
    JVM: 21.0.2
    OS: Mac OS X aarch64
    Heap Size: 1536 MB

    Dataset sizes: 100K, 500K, 1M rows
    Warmup runs: 1
    Test runs: 3 (average time reported)

    ## QUERY TYPE 1: Complex Aggregation with GROUP BY ##
    Query: SELECT region, product_category, COUNT(*), SUM(quantity), AVG(unit_price)
           GROUP BY region, product_category HAVING COUNT(*) > 100

    ### Dataset: 100,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    Pre-conversion complete. Row count: 1000000
    Setup complete. Test directory: /var/folders/rr/h5hdkhcd38s3q01th7q_jyr40000gn/T/junit16703284706901925045

    Files in test directory:
      sales.csv (85.2 MB)

    Files in .parquet_cache:
      .sales.parquet.tmp.67.crc (0.2 MB)
      sales.parquet (24.2 MB)
      sales.parquet.lock (0.0 MB)

    ## TEST 1: Aggregation Query (GROUP BY multiple columns) ##

    ### Aggregation Query ###
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration               Avg Time(ms)  Speedup    Rows  Status
    -------------------------   -----------  --------  ------  ------
    Baseline test failed!

    ## TEST 2: Selective Column Scan ##

    ### Selective Scan ###
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing
    [FileSchema] Found 130 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration               Avg Time(ms)  Speedup    Rows  Status
    -------------------------   -----------  --------  ------  ------
    Baseline test failed!

    ## TEST 3: Top-N Query with Sorting ##

    ### Top-N Query ###

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
    Microsoft Graph API found: 2 items

    Graph API items:
      - Shared Documents [DIR]
      - calcite-test.txt
        [0;1m  6.5sec[0m, org.apache.calcite.adapter.file.[0;1mMicrosoftGraphStorageProviderTest[0m > [0;1mtestMicrosoftGraphListFiles()[0m

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 130 files for processing
        [0;1m  9.5sec[0m, org.apache.calcite.adapter.file.feature.[0;1mRecursiveDirectoryComprehensiveTest[0m > [0;1mtestRecursivePerformanceWithManyFiles()[0m
         11.5sec,    7 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.feature.RecursiveDirectoryComprehensiveTest

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
        [0;1m 11.0sec[0m, org.apache.calcite.adapter.file.[0;1mMicrosoftGraphStorageProviderTest[0m > [0;1mtestFileMetadata()[0m

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration               Avg Time(ms)  Speedup    Rows  Status
    -------------------------   -----------  --------  ------  ------
    Baseline test failed!

    ## TEST 4: Complex Analytics Query ##

    ### Complex Analytics ###

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Successfully connected via Microsoft Graph API!
    Found 2 items in /Shared Documents:
      [DIR]  Shared Documents (size: 709 bytes)
      [FILE] calcite-test.txt (size: 134 bytes)
        [0;1m  7.2sec[0m, org.apache.calcite.adapter.file.[0;1mMicrosoftGraphStorageProviderTest[0m > [0;1mtestMicrosoftGraphProviderConnection()[0m
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

MicrosoftGraphStorageProviderTest STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

MicrosoftGraphStorageProviderTest STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration               Avg Time(ms)  Speedup    Rows  Status
    -------------------------   -----------  --------  ------  ------
    Baseline test failed!

    ## PERFORMANCE INSIGHTS ##

    1. Cold Start Performance:
       - Each test run creates a new connection (simulating restart)
       - No warmup runs to test true cold performance
       - CSV_PARQUET_CACHED uses pre-converted files from .parquet_cache

    2. Expected Results:
       - CSV_LINQ4J: Baseline (parsing CSV on every query)
       - CSV_PARQUET_CACHED: Should show 10-30x speedup (no conversion needed)
       - PARQUET_* variants: Direct Parquet file access

    3. Key Findings:
       - Pre-converted Parquet files eliminate conversion overhead
       - Columnar format benefits are more apparent without conversion cost
       - Restart scenarios show true Parquet performance advantage
        [0;1m 10.7sec[0m, org.apache.calcite.adapter.file.performance.[0;1mParquetColdStartPerformanceTest[0m > [0;1mtestColdStartPerformance()[0m
         10.7sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.performance.ParquetColdStartPerformanceTest

Gradle Test Executor 5 STANDARD_OUT
    ✓ Error handling tests passed
        [0;1m 13.7sec[0m, org.apache.calcite.adapter.file.[0;1mSftpIntegrationTest[0m > [0;1mtestErrorHandling(),[0m Test SFTP error handling

SftpIntegrationTest > Test SFTP configuration options STANDARD_OUT

    === Testing Configuration Options ===
    ✓ Configuration tests passed
[0;34;1mWARNING[0m  13.7sec,    7 completed,   0 failed, [0;34;1m  5[0m skipped, org.apache.calcite.adapter.file.[0;34;1mSftpIntegrationTest[0m

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    Subdirectory contains 2 items
        [0;1m 15.3sec[0m, org.apache.calcite.adapter.file.[0;1mMicrosoftGraphStorageProviderTest[0m > [0;1mtestDirectoryOperations()[0m
         15.3sec,    4 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.MicrosoftGraphStorageProviderTest

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           146   1.00x   ████████████████████
      VECTORIZED       144   1.01x   ████████████████████
      ARROW            120   1.22x   ████████████████████████
      PARQUET          110   1.33x   ██████████████████████████

    ### Dataset: 500,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           390   1.00x   ████████████████████
      VECTORIZED       415   0.94x   ██████████████████
      ARROW            353   1.10x   ██████████████████████
      PARQUET          306   1.27x   █████████████████████████

    ### Dataset: 1,000,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           606   1.00x   ████████████████████
      VECTORIZED       659   0.92x   ██████████████████
      ARROW            584   1.04x   ████████████████████
      PARQUET          715   0.85x   ████████████████

    ## QUERY TYPE 2: Filtering with Sorting and Projection ##
    Query: SELECT order_id, customer_id, total FROM sales
           WHERE total > 500 AND status = 'completed' ORDER BY total DESC LIMIT 1000

    ### Dataset: 100,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

    Results:
    Configuration        Avg Time(ms)   Speedup vs CSV+LINQ4J
    ------------------   -----------   --------------------
    CSV+LINQ4J                   601          1.0x → SIMILAR
    CSV+ARROW                    639          0.9x ↘ SLOWER
    CSV+VECTORIZED               623          1.0x ↘ SLOWER
    Parquet+LINQ4J               541          1.1x → SIMILAR
    Parquet+ARROW                381          1.6x ↗ BETTER
    Parquet+PARQUET              383          1.6x ↗ BETTER

    ## TEST 2: GROUP BY Aggregation ##

    ### Group By Query ###

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J            88   1.00x   ████████████████████
      VECTORIZED       109   0.81x   ████████████████
      ARROW            103   0.85x   █████████████████
      PARQUET          108   0.81x   ████████████████

    ### Dataset: 500,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           483   1.00x   ████████████████████
      VECTORIZED       519   0.93x   ██████████████████
      ARROW            456   1.06x   █████████████████████
      PARQUET          476   1.01x   ████████████████████

    ### Dataset: 1,000,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration        Avg Time(ms)   Speedup vs CSV+LINQ4J
    ------------------   -----------   --------------------
    CSV+LINQ4J                   475          1.0x → SIMILAR
    CSV+ARROW                    478          1.0x ↘ SLOWER
    CSV+VECTORIZED               515          0.9x ↘ SLOWER
    Parquet+LINQ4J               400          1.2x → SIMILAR
    Parquet+ARROW                406          1.2x → SIMILAR
    Parquet+PARQUET              407          1.2x → SIMILAR

    ## TEST 3: Filtered Aggregation ##

    ### Filtered Aggregation ###

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           994   1.00x   ████████████████████
      VECTORIZED     1,100   0.90x   ██████████████████
      ARROW            947   1.05x   ████████████████████
      PARQUET          902   1.10x   ██████████████████████

    ## QUERY TYPE 3: Complex Join Simulation (self-join) ##
    Query: Aggregation by month with filtering

    ### Dataset: 100,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J            71   1.00x   ████████████████████
      VECTORIZED        72   0.99x   ███████████████████
      ARROW             65   1.09x   █████████████████████
      PARQUET           72   0.99x   ███████████████████

    ### Dataset: 500,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           272   1.00x   ████████████████████
      VECTORIZED       293   0.93x   ██████████████████
      ARROW            261   1.04x   ████████████████████
      PARQUET          264   1.03x   ████████████████████

    ### Dataset: 1,000,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           507   1.00x   ████████████████████
      VECTORIZED       551   0.92x   ██████████████████
      ARROW            515   0.98x   ███████████████████
      PARQUET          484   1.05x   ████████████████████

    ## QUERY TYPE 4: Window Function Simulation ##
    Query: Top products by revenue per category

    ### Dataset: 100,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J            83   1.00x   ████████████████████
      VECTORIZED        81   1.02x   ████████████████████
      ARROW             84   0.99x   ███████████████████
      PARQUET           87   0.95x   ███████████████████

    ### Dataset: 500,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

    Results:
    Configuration        Avg Time(ms)   Speedup vs CSV+LINQ4J
    ------------------   -----------   --------------------
    CSV+LINQ4J                   519          1.0x → SIMILAR
    CSV+ARROW                    498          1.0x → SIMILAR
    CSV+VECTORIZED               546          1.0x ↘ SLOWER
    Parquet+LINQ4J               399          1.3x → SIMILAR
    Parquet+ARROW                403          1.3x → SIMILAR
    Parquet+PARQUET              403          1.3x → SIMILAR

    ## TEST 4: Top-N Query ##

    ### Top-N Query ###

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           325   1.00x   ████████████████████
      VECTORIZED       340   0.96x   ███████████████████
      ARROW            349   0.93x   ██████████████████
      PARQUET          305   1.07x   █████████████████████

    ### Dataset: 1,000,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           638   1.00x   ████████████████████
      VECTORIZED       734   0.87x   █████████████████
      ARROW            644   0.99x   ███████████████████
      PARQUET          552   1.16x   ███████████████████████

    ## QUERY TYPE 5: Full Table Scan with Projection ##
    Query: SELECT specific columns from entire dataset

    ### Dataset: 100,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J            62   1.00x   ████████████████████
      VECTORIZED        66   0.94x   ██████████████████
      ARROW             71   0.87x   █████████████████
      PARQUET           64   0.97x   ███████████████████

    ### Dataset: 500,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           312   1.00x   ████████████████████
      VECTORIZED       460   0.68x   █████████████
      ARROW            297   1.05x   █████████████████████
      PARQUET          257   1.21x   ████████████████████████

    ### Dataset: 1,000,000 rows

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 3 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

      Results:
      Engine       Time(ms)  Speedup  Relative Performance
      ----------   --------  -------  --------------------
      LINQ4J           570   1.00x   ████████████████████
      VECTORIZED       631   0.90x   ██████████████████
      ARROW            602   0.95x   ██████████████████
      PARQUET          449   1.27x   █████████████████████████

    ## PERFORMANCE INSIGHTS ##

    1. PARQUET Engine:
       - Shows significant improvement with larger datasets
       - Excels at aggregation queries due to columnar storage
       - Initial conversion overhead amortized over multiple queries
       - Best for analytical workloads with selective column access

    2. ARROW Engine:
       - Excellent performance for in-memory operations
       - Benefits from zero-copy reads and SIMD optimizations
       - Particularly effective for projection and filtering

    3. VECTORIZED Engine:
       - Good balance between memory usage and performance
       - Batch processing reduces per-row overhead
       - Scales well with dataset size

    4. LINQ4J Engine:
       - Baseline row-by-row processing
       - Simple and predictable performance
       - May struggle with very large datasets

    ## RECOMMENDATIONS ##
    - Use PARQUET for large analytical workloads
    - Use ARROW when memory is available and speed is critical
    - Use VECTORIZED for balanced performance across various workloads
    - Use LINQ4J for compatibility and simple queries
        [0;1m100.9sec[0m, org.apache.calcite.adapter.file.performance.[0;1mLargeScaleEnginePerformanceTest[0m > [0;1mtestLargeScalePerformance()[0m
        100.9sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.performance.LargeScaleEnginePerformanceTest
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration        Avg Time(ms)   Speedup vs CSV+LINQ4J
    ------------------   -----------   --------------------
    CSV+LINQ4J                   613          1.0x → SIMILAR
    CSV+ARROW                    652          0.9x ↘ SLOWER
    CSV+VECTORIZED               721          0.9x ↘ SLOWER
    Parquet+LINQ4J               539          1.1x → SIMILAR
    Parquet+ARROW                566          1.1x → SIMILAR
    Parquet+PARQUET              510          1.2x → SIMILAR

    ## TEST 5: Selective Column Projection ##

    ### Selective Projection ###

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'vectorized' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'linq4j' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

Gradle Test Executor 5 STANDARD_ERROR
    WARNING: Using execution engine 'arrow' is not recommended for production use.
             The PARQUET engine is the default and recommended choice for:
             - Best performance (1.6x faster)
             - Automatic file update detection
             - Disk spillover for unlimited dataset sizes
             - Redis distributed cache support
             Other engines are primarily for benchmarking purposes.

Gradle Test Executor 5 STANDARD_OUT
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing
    [FileSchema] Found 1 files for processing

    Results:
    Configuration        Avg Time(ms)   Speedup vs CSV+LINQ4J
    ------------------   -----------   --------------------
    CSV+LINQ4J                   490          1.0x → SIMILAR
    CSV+ARROW                    488          1.0x → SIMILAR
    CSV+VECTORIZED               482          1.0x → SIMILAR
    Parquet+LINQ4J               391          1.3x → SIMILAR
    Parquet+ARROW                384          1.3x → SIMILAR
    Parquet+PARQUET              372          1.3x → SIMILAR

    ## CONCLUSIONS ##

    1. File Format Impact:
       - Parquet files provide columnar storage benefits
       - Compression reduces I/O overhead
       - Schema is embedded, no parsing needed

    2. Engine Performance:
       - PARQUET engine optimized for Parquet format
       - ARROW engine provides good general performance
       - LINQ4J baseline for compatibility

    3. Query Type Matters:
       - Aggregations benefit most from columnar format
       - Selective projections show significant speedup
       - Full scans have less improvement
        [0;1m122.9sec[0m, org.apache.calcite.adapter.file.performance.[0;1mDirectParquetPerformanceTest[0m > [0;1mtestDirectPerformanceComparison()[0m
        122.9sec,    1 completed,   0 failed,   0 skipped, org.apache.calcite.adapter.file.performance.DirectParquetPerformanceTest
[0;31;1mFAILURE[0m 131.1sec,  382 completed, [0;31;1m  8[0m failed, [0;34;1m 32[0m skipped, [0;31;1mGradle Test Run :file:test[0m

382 tests completed, 8 failed, 32 skipped

> Task :file:test FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':file:test'.
> There were failing tests. See the report at: file:///Users/kennethstott/ndc-calcite/calcite-rs-jni/calcite/file/build/reports/tests/test/index.html

Deprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

For more on this, please refer to https://docs.gradle.org/8.7/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.

BUILD FAILED in 2m 16s
41 actionable tasks: 7 executed, 34 up-to-date
