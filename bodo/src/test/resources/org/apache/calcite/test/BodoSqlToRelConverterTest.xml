<?xml version="1.0" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<Root>
  <TestCase name="testCreateOrReplaceTable">
    <Resource name="plan">
      <![CDATA[
LogicalTableCreate(TableName=[OUT_TEST], Target Schema=[[CUSTOMER]], IsReplace=[true])
  LogicalProject(DEPTNO=[$9], EMPNO=[$0])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[CREATE OR REPLACE TABLE CUSTOMER.out_test AS
select dept.deptno, emp.empno
 from emp join dept on emp.deptno = dept.deptno]]>
    </Resource>
  </TestCase>
  <TestCase name="testCreateTableIfNotExists">
    <Resource name="plan">
      <![CDATA[
LogicalTableCreate(TableName=[OUT_TEST], Target Schema=[[SALES]], IsReplace=[false])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[CREATE TABLE IF NOT EXISTS out_test AS select * from emp]]>
    </Resource>
  </TestCase>
  <TestCase name="testCreateTableRewrite">
    <Resource name="plan">
      <![CDATA[
LogicalTableCreate(TableName=[FOO], Target Schema=[[SALES]], IsReplace=[false])
  LogicalSort(fetch=[10])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[CREATE TABLE foo as select * from dept limit 10]]>
    </Resource>
  </TestCase>
  <TestCase name="testCreateTableSimple">
    <Resource name="plan">
      <![CDATA[
LogicalTableCreate(TableName=[OUT_TEST], Target Schema=[[SALES]], IsReplace=[false])
  LogicalProject(EXPR$0=[1], EXPR$1=[2], EXPR$2=[3])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCreateTableWith">
    <Resource name="plan">
      <![CDATA[
LogicalTableCreate(TableName=[FOO], Target Schema=[[SALES]], IsReplace=[false])
  LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3])
    LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      LogicalSort(fetch=[10])
        LogicalProject(DEPTNO=[$0], NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalSort(fetch=[10])
        LogicalProject(DEPTNO=[$0], NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[CREATE TABLE foo as
with temporaryTable as (select * from dept limit 10),
temporaryTable2 as (select * from dept limit 10)
SELECT * from temporaryTable join temporaryTable2
on temporaryTable.deptno = temporaryTable2.deptno]]>
    </Resource>
  </TestCase>
  <TestCase name="testValueUnreserved">
    <Resource name="plan">
      <![CDATA[
LogicalProject(ENAME=[$1], EXPR$1=[+($0, $2)])
  LogicalJoin(condition=[=($2, $0)], joinType=[inner])
    LogicalProject(VALUE=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1], VALUE=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[SELECT ename, dept2.value + value.value FROM
(select deptno as value from dept) dept2 JOIN
(select ename, deptno as value from emp) value
on value.value = dept2.value]]>
    </Resource>
  </TestCase>
  <TestCase name="testValuesUnreserved">
    <Resource name="plan">
      <![CDATA[
LogicalProject(ENAME=[$1], EXPR$1=[+($0, $2)])
  LogicalJoin(condition=[=($2, $0)], joinType=[inner])
    LogicalProject(VALUES=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1], VALUES=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[SELECT ename, dept2.values + values.values FROM
(select deptno as values from dept) dept2 JOIN
(select ename, deptno as values from emp) values
on values.values = dept2.values]]>
    </Resource>
  </TestCase>
  <TestCase name="testWithBodoParser">
    <Resource name="plan">
      <![CDATA[
LogicalProject(EXPR$0=[1], EXPR$1=[2], EXPR$2=[3])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="sql">
      <![CDATA[select 1, 2, 3 from emp]]>
    </Resource>
  </TestCase>
</Root>
