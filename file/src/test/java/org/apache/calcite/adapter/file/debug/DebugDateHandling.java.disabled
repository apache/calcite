/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.calcite.adapter.file.debug;

import org.apache.avro.generic.GenericRecord;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.parquet.avro.AvroParquetReader;
import org.apache.parquet.hadoop.ParquetReader;

import org.junit.jupiter.api.Test;

import java.sql.Date;
import java.util.TimeZone;

public class DebugDateHandling {

  @Test public void debugDateValues() throws Exception {
    System.out.println("DEBUG: Date Handling in Parquet Files");
    System.out.println("=====================================");
    System.out.println("Local timezone: " + TimeZone.getDefault().getID());
    System.out.println("Timezone offset: " + TimeZone.getDefault().getRawOffset() / (1000 * 60 * 60) + " hours\n");

    String parquetFile = "build/resources/test/bug/.parquet_cache/DATE.parquet";
    Path hadoopPath = new Path(parquetFile);
    Configuration conf = new Configuration();

    @SuppressWarnings("deprecation")
    ParquetReader<GenericRecord> reader = AvroParquetReader.<GenericRecord>builder(hadoopPath)
        .withConf(conf)
        .build();

    try {

      GenericRecord record;
      int rowNum = 0;
      while ((record = reader.read()) != null) {
        rowNum++;
        System.out.println("Row " + rowNum + ":");

        // Check JOINEDAT field (date)
        Object joinedAt = record.get("JOINEDAT");
        if (joinedAt != null) {
          int daysSinceEpoch = (Integer) joinedAt;
          long milliseconds = daysSinceEpoch * 24L * 60 * 60 * 1000;
          Date date = new Date(milliseconds);

          System.out.println("  JOINEDAT raw: " + daysSinceEpoch + " days since epoch");
          System.out.println("  JOINEDAT millis: " + milliseconds);
          System.out.println("  JOINEDAT as Date: " + date);

          // Check if this represents midnight
          long timeOfDay = milliseconds % (24L * 60 * 60 * 1000);
          System.out.println("  Time of day: " + timeOfDay + " ms (midnight = 0)");

          // Calculate what happens with timezone offset
          TimeZone tz = TimeZone.getDefault();
          int offset = tz.getOffset(milliseconds);
          System.out.println("  Timezone offset at this date: " + offset + " ms (" + (offset / (1000 * 60 * 60)) + " hours)");

          // What would happen if we adjusted for timezone?
          long adjustedMillis = milliseconds - offset;
          Date adjustedDate = new Date(adjustedMillis);
          System.out.println("  If we subtract offset: " + adjustedDate);
        }

        System.out.println();
      }
    } finally {
      reader.close();
    }
  }
}
