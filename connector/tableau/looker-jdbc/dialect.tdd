<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!-- See notes below for definitions that require 2020.3 or newer -->
<dialect name='CalciteJDBC'
         class='looker-jdbc'
         base='BigQuerySQLDialect'
         version='18.1'>
  <function-map>
    <function group='system' name='TIME1899' return-type='datetime'>
      <!-- This is invoked because Tableau has no concept of "time" values (just dates and datetimes).
           When we tell it that there's a time as part of our schema, it's coerced to datetime by setting the date to Tableau's epoch (1899-12-30). -->
      <formula>TIMESTAMP(DATETIME(DATE(1899, 12, 30), CAST((%1) AS TIME)))</formula>
      <argument type='datetime' />
    </function>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>ABS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>ACOS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>ASIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>ATAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>ATAN2(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='real'>
      <formula>CEIL(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <!-- BQ's `CEIL` function always returns a real number, so cast it to integer if that's what Tableau expects. -->
      <formula>CAST(CEIL(%1) AS INTEGER)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <!-- BQ's `CEIL` function always returns a real number, so cast it to integer if that's what Tableau expects. -->
      <formula>CAST(CEIL(%1) AS INTEGER)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <!-- BQ has no built-in cotangent. Based on the example dialect, they seem to want NULL when the result is undefined. -->
      <formula>IF(SIN(%1) != 0, COS(%1)/SIN(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <!-- Multiply by (180 / pi). -->
      <formula>((%1) * 57.2957795130823252)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <!-- BQ's `SAFE_DIVIDE` returns NULL for division by zero. Based on the example dialect, this seems to be what Tableau expects.
           It also always returns a real number, so cast to the expected integer. -->
      <formula>CAST(SAFE_DIVIDE((%1) / (%2)) AS INTEGER)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>EXP(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='real'>
      <formula>FLOOR(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <!-- BQ's `FLOOR` always returns a real number. Cast to the expected integer. -->
      <formula>CAST(FLOOR(%1) AS INTEGER)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <!-- BQ's `FLOOR` always returns a real number. Cast to the expected integer. -->
      <formula>CAST(FLOOR(%1) AS INTEGER)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <!-- Natural logarithm: Tableau expects NULL when the argument is non-positive, but BQ's `LN` would throw an error in this case. -->
      <formula>IF((%1) &gt; 0, LN(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <!-- Base-10 logarithm: BQ's `LOG` function defaults to the natural base, so specify base 10 instead. Also, handle non-positive arguments the same as `LN`. -->
      <formula>IF((%1) &gt; 0, LOG((%1), 10), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <!-- General logarithm: Handle non-positive arguments the same as `LN`. -->
      <formula>IF((%1) &gt; 0 AND (%2) &gt; 0, LOG((%1), (%2)), NULL)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG2' return-type='real'>
      <!-- Pretty sure this is the base-2 logarithm though it's not listed in Tableau's docs. -->
      <formula>IF((%1) &gt; 0, LOG((%1), 2), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MAX' return-type='str'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='numeric' name='MAX' return-type='datetime'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='numeric' name='MAX' return-type='date'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='str'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='numeric' name='MIN' return-type='datetime'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='numeric' name='MIN' return-type='date'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='numeric' name='MOD' return-type='int'>
      <formula>MOD(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <!-- The maximum number of decimal digits we can represent with a FLOAT64. -->
      <formula>(3.1415926535897932)</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <!-- There are 2 edge cases where Tableau expects a NULL result but BQ would throw an error:
             1. If X < 0 and Y is not an integer (because the result would be imaginary).
             2. If X = 0 and Y < 0 (because it's basically division by zero). -->
      <formula>IF(((%1) &gt;= 0 OR FLOOR(%2) = (%2)) AND ((%1) != 0 OR (%2) &gt;= 0), POW((%1), (%2)), NULL)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <!-- Since Y is known to be an integer, we can skip the first check in the version of `POWER` for 2 reals. -->
      <formula>IF((%1) != 0 OR (%2) &gt;= 0, POW((%1), (%2)), NULL)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <!-- Do the same check as above, but case the result since BQ returns an integer when both arguments are integers. -->
      <formula>IF((%1) != 0 OR (%2) &gt;= 0, CAST(POW((%1), (%2)) AS FLOAT64), NULL)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <!-- Divide by (180 / pi). -->
      <formula>((%1) / 57.2957795130823252)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND((%1), (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND((%1), (%2))</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='ROUND' return-type='int'>
      <!-- BQ always returns a real number for `ROUND`. -->
      <formula>CAST(ROUND(%1) AS INTEGER)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <!-- BQ returns a real number for `SIGN` when the argument is real. -->
      <formula>CAST(SIGN(%1) AS INTEGER)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>SQRT(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>POW((%1), 2)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <!-- BQ always returns a real number for `POW`. -->
      <formula>CAST(POW((%1), 2) AS INTEGER)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <!-- Unclear if Tableau wants NULL when the answer is undefined (i.e. COS(X) = 0). Not documented. -->
      <formula>TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='TRUNC' return-type='real'>
      <formula>TRUNC(%1)</formula>
      <argument type='real' />
    </function>
    <!-- No support for XPATH functions since BigQuery doesn't do it and they're not well-documented by Tableau. -->
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>COALESCE((%1), 0.0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>COALESCE((%1), 0)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='ASCII' return-type='int'>
      <formula>ASCII(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <!-- Unclear if Tableau wants us to check boundaries (i.e. the argument is not a valid Unicode code point) and return NULL instead of throwing an error. Not gonna bother since it's not documented. -->
      <formula>CHR(CAST(TRUNC(%1) AS INTEGER))</formula>
      <argument type='real' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <!-- Unclear if Tableau wants us to check boundaries (i.e. the argument is not a valid Unicode code point) and return NULL instead of throwing an error. Not gonna bother since it's not documented. -->
      <formula>CHR(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'>
      <!-- Unclear if Tableau wants us to check if the substring is NULL, in which case BQ would throw an error. -->
      <formula>CONTAINS_SUBSTR((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='DOMAIN' return-type='str'>
      <!-- This is a weird BQ-only function. Unclear if we should support this on the front end (here in the dialect file, with a regex extraction), or the backend (with some sort of Calcite rule). -->
      <formula>NET.REG_DOMAIN(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <!-- Tableau expects us to ignore trailing whitespace. -->
      <formula>ENDS_WITH(RTRIM(%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <!-- Not supporting "filter" string functions since their expected behavior is not documented. -->
    <function group='string' name='FIND' return-type='int'>
      <formula>STRPOS((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <!-- Based on the example dialect definition, Tableau seems to want us to handle the case where `start < 1` in this way: -->
      <formula>IF((%3) &lt; 1, INSTR((%1), (%2)), INSTR((%1), (%2), CAST(TRUNC(%3) AS INTEGER)))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <!-- Based on the example dialect definition, Tableau seems to want us to handle the case where `start < 1` in this way (not documented): -->
      <formula>IF((%3) &lt; 1, INSTR((%1), (%2)), INSTR((%1), (%2), (%3)))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <!-- These semantics are mostly inferred from `FIND` since the docs for `FINDNTH` are even more ambiguous about edge cases. -->
      <formula>IF((%3) &lt; 1, INSTR((%1), (%2)), INSTR((%1), (%2), 1, CAST(TRUNC(%3) AS INTEGER)))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='GET_JSON_OBJECT' return-type='str'>
      <formula>JSON_EXTRACT((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='HOST' return-type='str'>
      <formula>NET.HOST(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>IF((%2) &gt;= 0, LEFT((%1), CAST(TRUNC(%2) AS INTEGER)), NULL)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>IF((%2) &gt;= 0, LEFT((%1), (%2)), NULL)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>LTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM_THIS' return-type='str'>
      <!-- Here the Tableau semantics (searching for a prefix string) is different from BQ (searching for a set of characters). -->
      <formula>IF(STARTS_WITH((%1), (%2)), SUBSTR((%1), LENGTH(%2) + 1), (%1))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>IF((%2) IS NULL OR (%2) &lt; 1, NULL, SUBSTR((%1), CAST(TRUNC(%2) AS INTEGER)))</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>IF((%2) IS NULL OR (%2) &lt; 1, NULL, SUBSTR((%1), (%2)))</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>IF((%2) IS NULL OR (%3) IS NULL OR (%2) &lt; 1 OR (%3) &lt; 0, NULL, SUBSTR((%1), CAST(TRUNC(%2) AS INTEGER), CAST(TRUNC(%3) AS INTEGER)))</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>IF((%2) IS NULL OR (%3) IS NULL OR (%2) &lt; 1 OR (%3) &lt; 0, NULL, SUBSTR((%1), (%2), (%3)))</formula>
      <argument type='str' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <!-- Tableau's `PARSE_URL` and `PARSE_URL_QUERY` are not supported. -->
    <function group='string' name='REGEXP_EXTRACT' return-type='str'>
      <formula>REGEXP_EXTRACT((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <!-- Tableau's `REGEXP_EXTRACT_NTH` is not supported because BQ does not natively support extracting a specific capturing group. -->
    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>REGEXP_CONTAINS((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_REPLACE' return-type='str'>
      <formula>REGEXP_REPLACE((%1), (%2), (%3))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>REPLACE((%1), (%2), (%3))</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>IF((%2) &gt;= 0, RIGHT((%1), CAST(TRUNC(%2) AS INTEGER)), NULL)</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>IF((%2) &gt;= 0, RIGHT((%1), (%2)), NULL)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>RTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='RTRIM_THIS' return-type='str'>
      <!-- Here the Tableau semantics (searching for a prefix string) is different from BQ (searching for a set of characters). -->
      <formula>IF(ENDS_WITH((%1), (%2)), SUBSTR((%1), 1, LENGTH(%1) - LENGTH(%2)), (%1))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>IF((%1) IS NOT NULL AND (%1) &gt;= 0, REPEAT(' ', CAST(TRUNC(%1) AS INTEGER)), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>IF((%1) IS NOT NULL AND (%1) &gt;= 0, REPEAT(' ', (%1)), NULL)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='SPLIT' return-type='str'>
      <formula>(SPLIT((%1), (%2))[SAFE_ORDINAL(%3)])</formula>
      <argument type='str' />
      <argument type='localstr' />
      <argument type='localint' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>STARTS_WITH((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TLD' return-type='str'>
      <formula>NET.PUBLIC_SUFFIX(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <!-- Semantics inferred from the example dialect. -->
      <formula>DATE_ADD(DATE(1900, 1, 1), INTERVAL (CAST(TRUNC(%1) AS INTEGER)) DAY)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>DATE_ADD(DATE(1900, 1, 1), INTERVAL (%1) DAY)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <!-- First cast to TIMESTAMP, then DATE, in case the string has a time component. -->
      <formula>CAST(CAST((%1) AS TIMESTAMP) AS DATE)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>DATE(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>CAST((%1) AS DATE)</formula>
      <argument type='date' />
    </function>
    <!-- I used TIMESTAMP instead of DATETIME to represent Tableau's datetime. TODO: Revisit this (look into timezone semantics). -->
    <function group='cast' name='DATETIME' return-type='datetime'>
      <!-- Semantics inferred from the example dialect. -->
      <formula>TIMESTAMP_ADD(TIMESTAMP(DATE(1900, 1, 1)), INTERVAL (CAST(TRUNC((%1) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TIMESTAMP(DATE_ADD(DATE(1900, 1, 1), INTERVAL (%1) DAY))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST((%1) AS TIMESTAMP)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST((%1) AS TIMESTAMP)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TIMESTAMP(%1)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(CAST((%1) AS INTEGER) AS FLOAT64)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST((%1) AS FLOAT64)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST((%1) AS FLOAT64)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST((%1) AS FLOAT64)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(CAST(TIMESTAMP_DIFF((%1), TIMESTAMP(DATE(1900, 1, 1)), SECOND) AS FLOAT64) / (60.0 * 60.0 * 24.0))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(DATE_DIFF((%1), DATE(1900, 1, 1), DAY) AS FLOAT64)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>IF((%1), 1, 0)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(%1) AS INTEGER)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST((%1) AS INTEGER)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST((%1) AS INTEGER)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(TRUNC(CAST(TIMESTAMP_DIFF((%1), TIMESTAMP(DATE(1900, 1, 1)), SECOND) AS FLOAT64) / (60.0 * 60.0 * 24.0)) AS INTEGER)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>DATE_DIFF((%1), DATE(1900, 1, 1), DAY)</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='MAKEDATE' return-type='date'>
      <formula>DATE((%1), (%2), (%3))</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>TIMESTAMP(DATETIME(CAST((%1) AS DATE), TIME(%2)))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>TIMESTAMP(DATETIME(DATE(%1), TIME(%2)))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKEDATETIME' return-type='datetime'>
      <formula>TIMESTAMP(DATETIME((%1), TIME(%2)))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='cast' name='MAKETIME' return-type='datetime'>
      <formula>TIMESTAMP(DATETIME(DATE(1900, 1, 1), TIME((%1), (%2), (%3))))</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='cast' name='REAL' return-type='real'>
      <formula>CAST((%1) AS FLOAT64)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <!-- Semantics inferred from example dialect. -->
      <formula>IF((%1), '1', '0')</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST((%1) AS STRING)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST((%1) AS STRING)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST((%1) AS STRING)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST((%1) AS STRING)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST((%1) AS STRING)</formula>
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE((%1), TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE(TIMESTAMP(%1), (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='spatial'>
      <formula>COALESCE((%1), (%2))</formula>
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>IF((%1) IS NOT NULL, IF((%1), CAST((%2) AS FLOAT64), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>IF((%1), (%2), (%3))</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>IF((%1) IS NOT NULL, IF((%1), (%2), (%3)), (%4))</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>((%1) IS NULL)</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>((%1) IS NULL)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>((%1) IS NULL)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>((%1) IS NULL)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>((%1) IS NULL)</formula>
      <argument type='spatial' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(CAST((%1) AS FLOAT64))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COLLECT' return-type='spatial'>
      <!-- TODO: The expected semantics here are pretty unclear. Look into that. -->
      <formula>ST_UNION_AGG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='spatial' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>CORR((%1), (%2))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT (%1))</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 1, 0)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COVAR' return-type='real'>
      <formula>COVAR_SAMP((%1), (%2))</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COVARP' return-type='real'>
      <formula>COVAR_POP((%1), (%2))</formula>
      <unagg-formula>IF((%1) IS NOT NULL AND (%2) IS NOT NULL, 0.0, NULL)</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='GROUP_CONCAT' return-type='str'>
      <formula>STRING_AGG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='real'>
      <formula>PERCENTILE_CONT((%1), 0.5)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='int'>
      <formula>PERCENTILE_DISC((%1), 0.5)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>PERCENTILE_CONT((%1), (%2))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>PERCENTILE_CONT((%1), (%2))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 0.0, NULL)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>VAR_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>VAR_POP(%1)</formula>
      <unagg-formula>IF((%1) IS NOT NULL, 0.0, NULL)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT (%1))</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != (%2))</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != CAST((%2) AS BOOL))</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 = 0 AND %2 OR %1 &lt;&gt; 0 AND NOT %2)</formula>
      <formula>(CAST((%1) AS BOOL) != (%2))</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(CAST((%1) AS TIMESTAMP) != (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != CAST((%2) AS TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(DATE(%1) != (%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != DATE(%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>((%1) != (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>IF((%2) != 0, (%1) - (FLOOR(SIGN(%1) * ((%1) / (%2))) * (%2) * SIGN(%1)), NULL)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>MOD((%1), (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>((%1) AND (%2))</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>((%1) * (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>((%1) * CAST((%2) AS FLOAT))</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(CAST((%1) AS FLOAT) * (%2))</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>((%1) * (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>((%1) + (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>((%1) + (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>CONCAT((%1), (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <!-- TODO: Expected semantics unclear. Currently interpreting the real number as "days". -->
      <formula>TIMESTAMP_ADD((%1), INTERVAL (CAST(TRUNC((%2) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <!-- TODO: Expected semantics unclear. Currently interpreting the integer as "days". -->
      <formula>TIMESTAMP_ADD((%1), INTERVAL (%2) DAY)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <!-- TODO: Expected semantics unclear. Currently interpreting the real number as "days". -->
      <formula>TIMESTAMP_ADD(TIMESTAMP(%1), INTERVAL (CAST(TRUNC((%2) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <!-- TODO: Expected semantics unclear. Currently interpreting the real number as "days". -->
      <formula>DATE_ADD((%1), INTERVAL (CAST(TRUNC(%2) AS INTEGER)) DAY)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='date'>
      <!-- TODO: Expected semantics unclear. Currently interpreting the integer as "days". -->
      <formula>DATE_ADD((%1), INTERVAL (%2) DAY)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-(%1))</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>((%1) - (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(TIMESTAMP_DIFF((%1), (%2), SECOND) / (60.0 * 60.0 * 24.0))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(TIMESTAMP_DIFF((%1), TIMESTAMP(%2), SECOND) / (60.0 * 60.0 * 24.0))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(TIMESTAMP_DIFF(TIMESTAMP(%1), (%2), SECOND) / (60.0 * 60.0 * 24.0))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(TIMESTAMP_DIFF(TIMESTAMP(%1), TIMESTAMP(%2), SECOND) / (60.0 * 60.0 * 24.0))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-(%1))</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>((%1) - (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>DATE_DIFF((%1), (%2), DAY)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>TIMESTAMP_SUB((%1), INTERVAL (CAST(TRUNC((%2) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>TIMESTAMP_SUB((%1), INTERVAL ((%2) * (60 * 60 * 24)) SECOND)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>TIMESTAMP_SUB(TIMESTAMP(%1), INTERVAL (CAST(TRUNC((%2) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula>DATE(TIMESTAMP_SUB(TIMESTAMP(%1), INTERVAL (CAST(TRUNC((%2) * (60.0 * 60.0 * 24.0)) AS INTEGER)) SECOND))</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula>DATE_SUB((%1), INTERVAL (%2) DAY)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>IF((%2) != 0, (%1) / (%2), NULL)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>IF((%2) != 0, (%1) / (%2), NULL)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>IF((%2) != 0, (%1) / (%2), NULL)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>IF((%2) != 0, CAST((%1) AS FLOAT64) / CAST((%2) AS FLOAT64), NULL)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt; (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt; (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>((%1) &lt; (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt;= (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt;= (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>((%1) &lt;= (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = (%2))</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = CAST((%2) AS BOOL))</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(CAST((%1) AS BOOL) = (%2))</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(TIMESTAMP(%1) = (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <!-- TODO: Expected semantics unclear. Most timestamps would have no equal date. -->
      <formula>((%1) = TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <!-- TODO: Expected semantics unclear. Most timestamps would have no equal date. -->
      <formula>(TIMESTAMP(%1) = (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>((%1) = (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt; (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt; (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>((%1) &gt; (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= (%2))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= (%2))</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt;= (%2))</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt;= (%2))</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>((%1) &gt;= (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>IF((%1) &lt; 0 AND TRUNC(%2) != (%2), NULL, POW((%1), (%2)))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POW((%1), (%2))</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POW((%1), (%2))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>((%1) OR (%2))</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>EXTRACT(DAY FROM (%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>EXTRACT(DAY FROM (%1))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='ISDATE' return-type='bool'>
      <formula>(SAFE_CAST((%1) AS DATE) IS NOT NULL)</formula>
      <argument type='str' />
    </function>
    <function group='date' name='ISOYEAR' return-type='int'>
      <formula>EXTRACT(ISOYEAR FROM (%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='ISOWEEK' return-type='int'>
      <formula>EXTRACT(ISOWEEK FROM (%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>GREATEST((%1), (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula>LEAST((%1), (%2))</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>EXTRACT(MONTH FROM (%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>EXTRACT(MONTH FROM (%1))</formula>
      <argument type='date' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>CURRENT_TIMESTAMP()</formula>
    </function>
    <function group='date' name='TIMESTAMP_TO_USEC' return-type='int'>
      <formula>UNIX_SECONDS(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>CURRENT_DATE()</formula>
    </function>
    <function group='date' name='USEC_TO_TIMESTAMP' return-type='datetime'>
      <formula>TIMESTAMP_SECONDS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>EXTRACT(YEAR FROM (%1))</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>EXTRACT(YEAR FROM (%1))</formula>
      <argument type='date' />
    </function>
    <!--
      date-function
      Doesn't require a group. Can contain multiple formulas
      for different date parts. If a part-specific formula is missing, Tableau
      will use the generic (no part attribute) formula.
    -->
    <date-function name='DATEADD' return-type='datetime'>
      <formula>TIMESTAMP_ADD((%3), INTERVAL (%2) %1)</formula>
      <!-- TODO: `TIMESTAMP`'s inability to add years may justify switching from `TIMESTAMP` to `DATETIME` in general.
                 Adding 365 days is not the same due to leap years etc. -->
      <formula part='year'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) YEAR))</formula>
      <formula part='quarter'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) QUARTER))</formula>
      <formula part='month'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) MONTH))</formula>
      <formula part='dayofyear'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) DAY))</formula>
      <formula part='day'>TIMESTAMP_ADD((%3), INTERVAL (%2) DAY)</formula>
      <!-- TODO: Expected semantics unclear. This is based off the example dialect. -->
      <formula part='weekday'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) DAY))</formula>
      <formula part='week'>TIMESTAMP(DATETIME_ADD(DATETIME(%3), INTERVAL (%2) WEEK))</formula>
      <formula part='hour'>TIMESTAMP_ADD((%3), INTERVAL (%2) HOUR)</formula>
      <formula part='minute'>TIMESTAMP_ADD((%3), INTERVAL (%2) MINUTE)</formula>
      <formula part='second'>TIMESTAMP_ADD((%3), INTERVAL (%2) SECOND)</formula>
      <argument type='localstr' />
      <argument type='int' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula part='year'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), YEAR)</formula>
      <formula part='quarter'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), QUARTER)</formula>
      <formula part='month'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), MONTH)</formula>
      <formula part='dayofyear'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), DAY)</formula>
      <formula part='day'>TIMESTAMP_DIFF((%2), (%3), DAY)</formula>
      <!-- TODO: Expected semantics unclear. This is based off the example dialect. -->
      <formula part='weekday'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), DAY)</formula>
      <formula part='week'>DATETIME_DIFF(DATETIME(%2), DATETIME(%3), WEEK)</formula>
      <formula part='hour'>TIMESTAMP_DIFF((%2), (%3), HOUR)</formula>
      <formula part='minute'>TIMESTAMP_DIFF((%2), (%3), MINUTE)</formula>
      <formula part='second'>TIMESTAMP_DIFF((%2), (%3), SECOND)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <!-- TODO: This is invalid BQ dialect, but I have no idea what the semantics should be. -->
      <formula part='week'>DATEDIFF(week,%2,%3)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>CAST(EXTRACT(YEAR FROM (%2)) AS STRING)</formula>
      <formula part='quarter'>CAST(EXTRACT(QUARTER FROM (%2)) AS STRING)</formula>
      <formula part='month'>CAST(EXTRACT(MONTH FROM (%2)) AS STRING)</formula>
      <formula part='dayofyear'>CAST(EXTRACT(DAYOFYEAR FROM (%2)) AS STRING)</formula>
      <formula part='day'>CAST(EXTRACT(DAY FROM (%2)) AS STRING)</formula>
      <formula part='weekday'>CAST((%2) AS STRING FORMAT "DAY")</formula>
      <formula part='week'>CAST(EXTRACT(WEEK FROM (%2)) AS STRING)</formula>
      <formula part='hour'>CAST(EXTRACT(HOUR FROM (%2)) AS STRING)</formula>
      <formula part='minute'>CAST(EXTRACT(MINUTE FROM (%2)) AS STRING)</formula>
      <formula part='second'>CAST(EXTRACT(SECOND FROM (%2)) AS STRING)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='week'>CAST(EXTRACT(WEEK FROM (%2)) AS STRING)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEPARSE' return-type='datetime'>
      <formula>PARSE_TIMESTAMP((%1), (%2))</formula>
      <argument type='localstr' />
      <argument type='str' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>EXTRACT(YEAR FROM (%2))</formula>
      <formula part='quarter'>EXTRACT(QUARTER FROM (%2))</formula>
      <formula part='month'>EXTRACT(MONTH FROM (%2))</formula>
      <formula part='dayofyear'>EXTRACT(DAYOFYEAR FROM (%2))</formula>
      <formula part='day'>EXTRACT(DAY FROM (%2))</formula>
      <formula part='weekday'>EXTRACT(DAYOFWEEK FROM (%2))</formula>
      <formula part='week'>EXTRACT(WEEK FROM (%2))</formula>
      <formula part='hour'>EXTRACT(HOUR FROM (%2))</formula>
      <formula part='minute'>EXTRACT(MINUTE FROM (%2))</formula>
      <formula part='second'>EXTRACT(SECOND FROM (%2))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='week'>EXTRACT(WEEK FROM (%2))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='date'>
      <formula>DATE_TRUNC((%2), %1)</formula>
      <formula part='year'>DATE_TRUNC((%2), YEAR)</formula>
      <formula part='quarter'>DATE_TRUNC((%2), QUARTER)</formula>
      <formula part='month'>DATE_TRUNC((%2), MONTH)</formula>
      <formula part='dayofyear'>DATE_TRUNC((%2), DAY)</formula>
      <formula part='day'>DATE_TRUNC((%2), DAY)</formula>
      <formula part='weekday'>DATE_TRUNC((%2), DAY)</formula>
      <formula part='week'>DATE_TRUNC((%2), WEEK)</formula>
      <formula part='hour'>DATE_TRUNC((%2), HOUR)</formula>
      <formula part='minute'>DATE_TRUNC((%2), MINUTE)</formula>
      <formula part='second'>DATE_TRUNC((%2), SECOND)</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATETRUNC' return-type='date'>
      <formula part='week'>DATE_TRUNC((%2), WEEK(%3))</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), %1)</formula>
      <formula part='year'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), YEAR)</formula>
      <formula part='quarter'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), QUARTER)</formula>
      <formula part='month'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), MONTH)</formula>
      <formula part='dayofyear'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), DAY)</formula>
      <formula part='day'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), DAY)</formula>
      <formula part='weekday'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), DAY)</formula>
      <formula part='week'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), WEEK)</formula>
      <formula part='hour'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), HOUR)</formula>
      <formula part='minute'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), MINUTE)</formula>
      <formula part='second'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), SECOND)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula part='week'>TIMESTAMP_TRUNC(CAST((%2) AS TIMESTAMP), WEEK(%3))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <native-split-function>
      <formula part='left'>(SPLIT((%1), (%2))[SAFE_ORDINAL(%3)])</formula>
      <formula part='right'>(ARRAY_REVERSE(SPLIT((%1), (%2)))[SAFE_ORDINAL(%3)])</formula>
    </native-split-function>
  </function-map>
  <supported-aggregations>
    <aggregation value='AGG_COUNT'/>
    <aggregation value='AGG_COUNTD'/>
    <aggregation value='AGG_SUM'/>
    <aggregation value='AGG_AVG'/>
    <aggregation value='AGG_MIN'/>
    <aggregation value='AGG_MAX'/>
    <aggregation value='AGG_STDEV'/>
    <aggregation value='AGG_STDEVP'/>
    <aggregation value='AGG_VAR'/>
    <aggregation value='AGG_VARP'/>
    <aggregation value='AGG_COVAR'/>
    <aggregation value='AGG_COVARP'/>
    <aggregation value='AGG_CORR'/>
    <aggregation value='AGG_SUM_XSQR'/>
    <aggregation value='AGG_COLLECT'/>

    <aggregation value='AGG_YEAR'/>
    <aggregation value='AGG_QTR'/>
    <aggregation value='AGG_MONTH'/>
    <aggregation value='AGG_DAY'/>
    <aggregation value='AGG_WEEK'/>
    <aggregation value='AGG_WEEKDAY'/>
    <aggregation value='AGG_MONTHYEAR'/>
    <aggregation value='AGG_MDY'/>
    <aggregation value='AGG_HOUR'/>
    <aggregation value='AGG_MINUTE'/>
    <aggregation value='AGG_SECOND'/>
    <aggregation value='AGG_ISO_YEAR'/>
    <aggregation value='AGG_ISO_QTR'/>
    <aggregation value='AGG_ISO_WEEK'/>
    <aggregation value='AGG_ISO_WEEKDAY'/>

    <aggregation value='TRUNC_YEAR'/>
    <aggregation value='TRUNC_QTR'/>
    <aggregation value='TRUNC_MONTH'/>
    <aggregation value='TRUNC_DAY'/>
    <aggregation value='TRUNC_WEEK'/>
    <aggregation value='TRUNC_HOUR'/>
    <aggregation value='TRUNC_MINUTE'/>
    <aggregation value='TRUNC_SECOND'/>
    <aggregation value='TRUNC_ISO_YEAR'/>
    <aggregation value='TRUNC_ISO_QTR'/>
    <aggregation value='TRUNC_ISO_WEEK'/>
    <aggregation value='TRUNC_ISO_WEEKDAY'/>
  </supported-aggregations>
  <sql-format>
    <!-- TODO: Verify `MySQLStyle` is consistent with BQ. -->
    <date-literal-escape value='MySQLStyle' />
    <date-parts>
      <date-part-group>
        <date-function name='DATEPART' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAYOFWEEK' />
        <part name='dayofyear' value='DAYOFYEAR' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEDIFF' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATENAME' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='dayofyear' value='DAYOFYEAR' />
        <part name='day' value='DAY' />
        <part name='weekday' value='DAY' />
        <part name='week' value='WEEK' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEADD' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='YEAR' />
        <part name='quarter' value='QUARTER' />
        <part name='month' value='MONTH' />
        <part name='week' value='WEEK' />
        <part name='weekday' value='DAY' />
        <part name='dayofyear' value='DAY' />
        <part name='day' value='DAY' />
        <part name='hour' value='HOUR' />
        <part name='minute' value='MINUTE' />
        <part name='second' value='SECOND' />
      </date-part-group>
    </date-parts>
    <format-date-literal formula="(DATE '%1')"  format='yyyy-MM-dd' />
    <format-datetime-literal formula="(TIMESTAMP '%1')" format='yyyy-MM-dd HH:mm:ss.SSS' />
    <format-false literal='FALSE' predicate='FALSE' /> <!-- Requires 2020.3 or newer -->
    <format-is-distinct value='Keyword' />
    <format-order-by value='DirectionOnly' />
    <format-select>
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='Top' value='LIMIT %1' />
    </format-select>
    <format-true literal='TRUE' predicate='TRUE' /> <!-- Requires 2020.3 or newer -->
    <icu-date-token-map>
      <!-- used by DATEPARSE -->
      <!-- http://userguide.icu-project.org/formatparse/datetime -->
      <!-- TODO: ^That link from the example dialect returns 404.
                 Figure out what all this is supposed to mean. It's probably currently broken. -->
      <token key="G" value="AD" /> <!-- era designator (AD) -->

      <token key="y" value="YYYY" />    <!-- year (1996) -->
      <token key="yy" value="YY" />     <!-- year (96) -->
      <token key="yyyy" value="YYYY" /> <!-- year (1996) -->

      <token key="YYYY" value="IYYY" /> <!-- year of "Week of Year" (1997) -->
      <token key="YY" value="IY" />     <!-- year of "Week of Year" (97) -->
      <token key="Y" value="IYYY" />    <!-- year of "Week of Year" (1997) -->

      <token key="u" value="" /> <!-- extended year (4601) -->
      <token key="U" value="" /> <!-- cyclic year name, as in Chinese lunar calendar -->

      <token key="Q" value="" />    <!-- quarter (02) -->
      <token key="QQ" value="" />   <!-- quarter (02) -->
      <token key="QQQ" value="" />  <!-- quarter (Q2) -->
      <token key="QQQQ" value="" /> <!-- quarter (2nd quarter) -->

      <token key="q" value="" />    <!-- Stand Alone quarter (02) -->
      <token key="qq" value="" />   <!-- Stand Alone quarter (02) -->
      <token key="qqq" value="" />  <!-- Stand Alone quarter (Q2) -->
      <token key="qqqq" value="" /> <!-- Stand Alone quarter (2nd quarter) -->

      <token key="M" value="MM" />       <!-- month in year (09) -->
      <token key="MM" value="MM" />      <!-- month in year (09) -->
      <token key="MMM" value="Mon" />    <!-- month in year (Sept) -->
      <token key="MMMM" value="Month" /> <!-- month in year (September) -->
      <token key="MMMMM" value="" />     <!-- month in year (S) -->

      <token key="L" value="MM" />       <!-- Stand Alone month in year (09) -->
      <token key="LL" value="MM" />      <!-- Stand Alone month in year (09) -->
      <token key="LLL" value="Mon" />    <!-- Stand Alone month in year (Sept) -->
      <token key="LLLL" value="Month" /> <!-- Stand Alone month in year (September) -->
      <token key="LLLLL" value="" />     <!-- Stand Alone month in year (S) -->

      <token key="w" value="WW" />  <!-- week of year (27) -->
      <token key="ww" value="IW" /> <!-- week of year (27) -->
      <token key="W" value="W" />   <!-- week of month (2) -->

      <token key="d" value="FMDD" /> <!-- day in month (2) -->
      <token key="dd" value="DD" />  <!-- day in month (02) -->

      <token key="D" value="FMDDD" /> <!-- day of year (189) -->
      <token key="F" value="" />      <!-- day of week in month (2 (2nd Wed in July)) -->

      <token key="g" value="J" /> <!-- modified julian day (2451334) -->

      <token key="E" value="Dy" />       <!-- day of week (Tues) -->
      <token key="EE" value="Dy" />      <!-- day of week (Tues) -->
      <token key="EEE" value="Dy" />     <!-- day of week (Tues) -->
      <token key="EEEE" value="FMDay" /> <!-- day of week (Tuesday) -->
      <token key="EEEEE" value="Dy" />   <!-- day of week (T) -->

      <token key="e" value="D" />        <!-- local day of week (2) -->
      <token key="ee" value="D" />       <!-- local day of week (2) -->
      <token key="eee" value="Dy" />     <!-- local day of week (Tues) -->
      <token key="eeee" value="FMDay" /> <!-- local day of week (Tuesday) -->
      <token key="eeeee" value="Dy" />   <!-- local day of week (T) -->

      <token key="c" value="D" />        <!-- Stand Alone local day of week (2) -->
      <token key="cc" value="D" />       <!-- Stand Alone local day of week (2) -->
      <token key="ccc" value="Dy" />     <!-- Stand Alone local day of week (Tues) -->
      <token key="cccc" value="FMDay" /> <!-- Stand Alone local day of week (Tuesday) -->
      <token key="ccccc" value="Dy" />   <!-- Stand Alone local day of week (T) -->

      <token key="a" value="AM" /> <!-- am/pm marker (pm) -->

      <token key="h" value="FMHH12" /> <!-- hour in am/pm 1:12 (7) -->
      <token key="hh" value="HH12" />  <!-- hour in am/pm 1:12 (07) -->

      <token key="H" value="FMHH24" /> <!-- hour in day 0:23 (0) -->
      <token key="HH" value="HH24" />  <!-- hour in day 0:23 (00) -->

      <token key="k" value="" />  <!-- hour in day 1:24 (24) -->
      <token key="kk" value="" /> <!-- hour in day 1:24 (24) -->

      <token key="K" value="" />  <!-- hour in am/pm 0:11 (0) -->
      <token key="KK" value="" /> <!-- hour in am/pm 0:11 (00) -->

      <token key="m" value="FMMI" /> <!-- minute in hour (4) -->
      <token key="mm" value="MI" />  <!-- minute in hour (04) -->

      <token key="s" value="FMSS" /> <!-- second in minute (5) -->
      <token key="ss" value="SS" />  <!-- second in minute (05) -->

      <token key="S" value="" />     <!-- millisecond (2) -->
      <token key="SS" value="" />    <!-- millisecond (23) -->
      <token key="SSS" value="MS" /> <!-- millisecond (235) -->
      <token key="SSSS" value="" />  <!-- millisecond (2350) -->

      <token key="A" value="" /> <!-- millisecond in day (61201235) -->

      <token key="z" value="TZ" />    <!-- Time Zone: specific non-location (PDT) -->
      <token key="zz" value="TZ" />   <!-- Time Zone: specific non-location (PDT) -->
      <token key="zzz" value="TZ" />  <!-- Time Zone: specific non-location (PDT) -->
      <token key="zzzz" value="TZ" /> <!-- Time Zone: specific non-location (Pacific Daylight Time) -->

      <token key="Z" value="" />     <!-- Time Zone: RFC 822 (-0800) -->
      <token key="ZZ" value="" />    <!-- Time Zone: RFC 822 (-0800) -->
      <token key="ZZZ" value="" />   <!-- Time Zone: RFC 822 (-0800) -->
      <token key="ZZZZ" value="" />  <!-- Time Zone: localized GMT (GMT-08:00) -->
      <token key="ZZZZZ" value="" /> <!-- Time Zone: ISO8601 (-08:00) -->

      <token key="v" value="TZ" /> <!-- Time Zone: generic non-location (PT) -->
      <token key="vvvv" value="TZ" /> <!-- Time Zone: generic non-location (Pacific Time or United States (Los Angeles)) -->

      <token key="V" value="TZ" />    <!-- Time Zone: specific non-location, identical to z (PDT) -->
      <token key="VVVV" value="TZ" /> <!-- Time Zone: generic location (United States (Los Angeles)) -->
    </icu-date-token-map>
  </sql-format>
</dialect>
