<?xml version="1.0" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<Root>
  <TestCase name="testHepPlanner">
    <Resource name="sql">
      <![CDATA[select a.name from dept a
union all
select b.name from dept b
order by name limit 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
  LogicalProject(NAME=[$0])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
  LogicalUnion(all=[true])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="visualizer">
      <![CDATA[{
  "steps":[ {
    "id":"INITIAL",
    "updates":{
      "1000":{
        "label":"#1000-LogicalTableScan",
        "explanation":"{table=[CATALOG, SALES, DEPT]}",
        "set":"default"
      },
      "1001":{
        "label":"#1001-LogicalProject",
        "explanation":"{NAME=$1}",
        "set":"default",
        "inputs":[ "1000" ]
      },
      "1002":{
        "label":"#1002-LogicalUnion",
        "explanation":"{all=true}",
        "set":"default",
        "inputs":[ "1001", "1001" ]
      },
      "1003":{
        "label":"#1003-LogicalProject",
        "explanation":"{NAME=$0}",
        "set":"default",
        "inputs":[ "1002" ]
      },
      "1004":{
        "label":"#1004-LogicalSort",
        "explanation":"{sort0=$0, dir0=ASC, fetch=10}",
        "set":"default",
        "inputs":[ "1003" ]
      },
      "default":{
        "label":"",
        "kind":"set"
      }
    },
    "matchedRels":[ ]
  }, {
    "id":"100-ProjectSetOpTransposeRule",
    "updates":{
      "1004":{
        "inputs":[ "1002" ]
      }
    },
    "matchedRels":[ "1003", "1002" ]
  }, {
    "id":"101-SortUnionTransposeRule",
    "updates":{
      "1005":{
        "label":"#1005-LogicalSort",
        "explanation":"{sort0=$0, dir0=ASC, fetch=10}",
        "set":"default",
        "inputs":[ "1001" ]
      },
      "1006":{
        "label":"#1006-LogicalUnion",
        "explanation":"{all=true}",
        "set":"default",
        "inputs":[ "1005", "1005" ]
      },
      "1007":{
        "label":"#1007-LogicalSort",
        "explanation":"{sort0=$0, dir0=ASC, fetch=10}",
        "set":"default",
        "inputs":[ "1006" ]
      }
    },
    "matchedRels":[ "1004", "1002" ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testVolcanoPlanner">
    <Resource name="sql">
      <![CDATA[select a.name from dept a]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(NAME=[$1])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
EnumerableProject(NAME=[$1])
  EnumerableTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="visualizer">
      <![CDATA[{
  "steps":[ {
    "id":"INITIAL",
    "updates":{
      "set-0":{
        "label":"set-0",
        "kind":"set"
      },
      "1000":{
        "label":"subset#1000-set#0-\nNONE.[]",
        "explanation":"{subset=rel#1000:RelSubset#0.NONE.[]}",
        "set":"set-0",
        "kind":"subset",
        "inputs":[ "1001" ]
      },
      "1001":{
        "label":"#1001-LogicalTableScan",
        "explanation":"{table=[CATALOG, SALES, DEPT]}",
        "set":"set-0"
      },
      "set-1":{
        "label":"set-1",
        "kind":"set"
      },
      "1002":{
        "label":"subset#1002-set#1-\nNONE.[]",
        "explanation":"{subset=rel#1002:RelSubset#1.NONE.[]}",
        "set":"set-1",
        "kind":"subset",
        "inputs":[ "1003" ]
      },
      "1003":{
        "label":"#1003-LogicalProject",
        "explanation":"{NAME=$1}",
        "set":"set-1",
        "inputs":[ "1000" ]
      },
      "1004":{
        "label":"subset#1004-set#1-\nENUMERABLE.[]",
        "explanation":"{subset=rel#1004:RelSubset#1.ENUMERABLE.[], NAME=$1}",
        "set":"set-1",
        "kind":"subset",
        "inputs":[ "1005" ]
      },
      "1005":{
        "label":"#1005-AbstractConverter",
        "explanation":"{convention=ENUMERABLE, sort=[]}",
        "set":"set-1",
        "inputs":[ "1002" ]
      }
    },
    "matchedRels":[ ]
  }, {
    "id":"100-EnumerableTableScanRule(in:NONE,out:ENUMERABLE)",
    "updates":{
      "1006":{
        "label":"subset#1006-set#0-\nENUMERABLE.[]",
        "explanation":"{subset=rel#1006:RelSubset#0.ENUMERABLE.[], table=[CATALOG, SALES, DEPT]}",
        "set":"set-0",
        "kind":"subset",
        "inputs":[ "1007" ]
      },
      "1007":{
        "label":"#1007-EnumerableTableScan",
        "explanation":"{table=[CATALOG, SALES, DEPT]}",
        "set":"set-0"
      }
    },
    "matchedRels":[ "1001" ]
  }, {
    "id":"101-EnumerableProjectRule(in:NONE,out:ENUMERABLE)",
    "updates":{
      "1004":{
        "inputs":[ "1005", "1008" ]
      },
      "1008":{
        "label":"#1008-EnumerableProject",
        "explanation":"{NAME=$1}",
        "set":"set-1",
        "inputs":[ "1006" ]
      }
    },
    "matchedRels":[ "1003" ]
  }, {
    "id":"FINAL",
    "updates":{
      "1000":{
        "cost":"{inf}"
      },
      "1001":{
        "cost":"{inf}"
      },
      "1002":{
        "cost":"{inf}"
      },
      "1003":{
        "cost":"{inf}"
      },
      "1004":{
        "inFinalPlan":true,
        "cost":"\nrowCount: 4E0\nrows: 8E0\ncpu:  9E0\nio:   0E0"
      },
      "1005":{
        "cost":"{inf}"
      },
      "1006":{
        "inFinalPlan":true,
        "cost":"\nrowCount: 4E0\nrows: 4E0\ncpu:  5E0\nio:   0E0"
      },
      "1007":{
        "inFinalPlan":true,
        "cost":"\nrowCount: 4E0\nrows: 4E0\ncpu:  5E0\nio:   0E0"
      },
      "1008":{
        "inFinalPlan":true,
        "cost":"\nrowCount: 4E0\nrows: 8E0\ncpu:  9E0\nio:   0E0"
      }
    },
    "matchedRels":[ ]
  } ]
}]]>
    </Resource>
  </TestCase>
</Root>
