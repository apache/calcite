<?xml version="1.0" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to you under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<Root>
  <TestCase name="testCommonSubExpression">
    <Resource name="sql">
      <![CDATA[(select 1 from dept where abs(-1)=20)
union all
(select 1 from dept where abs(-1)=20)]]>
    </Resource>
  </TestCase>
  <TestCase name="testGC">
    <Resource name="sql">
      <![CDATA[select upper(name) from dept where deptno=20]]>
    </Resource>
  </TestCase>
  <TestCase name="testGroup">
    <Resource name="sql">
      <![CDATA[select upper(name) from dept where deptno=20]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[UPPER($1)])
  LogicalFilter(condition=[=($0, 20)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], expr#2=[UPPER($t1)], expr#3=[20], expr#4=[=($t0, $t3)], EXPR$0=[$t2], $condition=[$t4])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneBottomUp">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalAggregate(group=[{0}])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneTopDown">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalUnion(all=[false])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchUntilFixpoint">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}])
      LogicalUnion(all=[true])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(ENAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMaterialization">
    <Resource name="sql">
      <![CDATA[select * from dept]]>
    </Resource>
  </TestCase>
  <TestCase name="testPlanToDot">
    <Resource name="sql">
      <![CDATA[select name from sales.dept]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelDigestLength">
    <Resource name="sql">
      <![CDATA[select * from (select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept union all select name from sales.dept)]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelNodeCacheWithDigest">
    <Resource name="sql">
      <![CDATA[(select n_nationkey from SALES.CUSTOMER) union all
(select n_name from CUSTOMER_MODIFIABLEVIEW)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(N_NATIONKEY=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
  LogicalProject(N_NAME=[$1])
    LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testReplaceCommonSubexpression">
    <Resource name="sql">
      <![CDATA[select d1.deptno from (select * from dept) d1,
(select * from dept) d2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleApplyCount">
    <Resource name="sql">
      <![CDATA[select * from (
  select ENAME, 50011895 as cat_id, '1' as cat_name, 1 as require_free_postage, 0 as require_15return, 0 as require_48hour,1 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50011895 union all
  select ENAME, 50013023 as cat_id, '2' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013023 union all
  select ENAME, 50013032 as cat_id, '3' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013032 union all
  select ENAME, 50013024 as cat_id, '4' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013024 union all
  select ENAME, 50004204 as cat_id, '5' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50004204 union all
  select ENAME, 50013043 as cat_id, '6' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013043 union all
  select ENAME, 290903 as cat_id, '7' as cat_name, 1 as require_free_postage, 0 as require_15return, 0 as require_48hour,1 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 290903 union all
  select ENAME, 50008261 as cat_id, '8' as cat_name, 1 as require_free_postage, 0 as require_15return, 0 as require_48hour,1 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50008261 union all
  select ENAME, 124478013 as cat_id, '9' as cat_name, 0 as require_free_postage, 0 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 124478013 union all
  select ENAME, 124472005 as cat_id, '10' as cat_name, 0 as require_free_postage, 0 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 124472005 union all
  select ENAME, 50013475 as cat_id, '11' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013475 union all
  select ENAME, 50018263 as cat_id, '12' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50018263 union all
  select ENAME, 50013498 as cat_id, '13' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50013498 union all
  select ENAME, 350511 as cat_id, '14' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 350511 union all
  select ENAME, 50019790 as cat_id, '15' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50019790 union all
  select ENAME, 50015382 as cat_id, '16' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50015382 union all
  select ENAME, 350503 as cat_id, '17' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 350503 union all
  select ENAME, 350401 as cat_id, '18' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 350401 union all
  select ENAME, 50015560 as cat_id, '19' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50015560 union all
  select ENAME, 122658003 as cat_id, '20' as cat_name, 0 as require_free_postage, 1 as require_15return, 1 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 122658003 union all
  select ENAME, 50022371 as cat_id, '100' as cat_name, 0 as require_free_postage, 0 as require_15return, 0 as require_48hour,0 as require_insurance from emp where EMPNO = 20171216 and MGR = 0 and ENAME = 'Y' and SAL = 50022371
) a]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleClass">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp)
intersect (select fname from customer.contact)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[$1])
    LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[CAST($0):VARCHAR(20) NOT NULL])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[CAST($0):VARCHAR(20) NOT NULL])
    LogicalProject(FNAME=[$1])
      LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleDescription">
    <Resource name="sql">
      <![CDATA[select name from sales.dept where deptno=12]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(NAME=[$1])
  LogicalFilter(condition=[=($0, 12)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(NAME=[$1])
  LogicalCalc(expr#0..1=[{inputs}], expr#2=[12], expr#3=[=($t0, $t2)], proj#0..1=[{exprs}], $condition=[$t3])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSubprogram">
    <Resource name="sql">
      <![CDATA[select upper(ename) from
(select lower(ename) as ename from emp where empno = 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[UPPER(LOWER($1))])
  LogicalFilter(condition=[=($0, 100)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..8=[{inputs}], expr#9=[LOWER($t1)], expr#10=[UPPER($t9)], expr#11=[100], expr#12=[=($t0, $t11)], EXPR$0=[$t10], $condition=[$t12])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
  </TestCase>
</Root>
