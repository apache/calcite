<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testReplaceCommonSubexpression">
    <Resource name="sql">
      <![CDATA[select d1.deptno from (select * from dept) d1, (select * from dept) d2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(DEPTNO=[_0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalProject(DEPTNO=[_0], NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(DEPTNO=[_0], NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(DEPTNO=[_0])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchUntilFixpoint">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[_0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}])
      LogicalUnion(all=[true])
        LogicalProject(NAME=[_1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(ENAME=[_1])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[_0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneTopDown">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[_0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalUnion(all=[true])
    LogicalUnion(all=[false])
      LogicalProject(NAME=[_1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[_1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[_0])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMatchLimitOneBottomUp">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) union (select ename from bonus)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[_0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalUnion(all=[false])
  LogicalAggregate(group=[{0}])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[_1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(ENAME=[_1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(ENAME=[_0])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleClass">
    <Resource name="sql">
      <![CDATA[(select name from dept union select ename from emp) intersect (select fname from customer.contact)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[_1])
    LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalIntersect(all=[false])
  LogicalUnion(all=[false])
    LogicalProject(NAME=[CAST(_0):VARCHAR(20) NOT NULL])
      LogicalProject(NAME=[_1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ENAME=[_1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(FNAME=[CAST(_0):VARCHAR(20) NOT NULL])
    LogicalProject(FNAME=[_1])
      LogicalTableScan(table=[[CATALOG, CUSTOMER, CONTACT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSubprogram">
    <Resource name="sql">
      <![CDATA[select upper(ename) from (select lower(ename) as ename from emp where empno = 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR_0=[UPPER(LOWER(_1))])
  LogicalFilter(condition=[=(_0, 100)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..8=[{inputs}], expr#9=[LOWER(_t1)], expr#10=[UPPER(_t9)], expr#11=[100], expr#12=[=(_t0, _t11)], EXPR_0=[_t10], _condition=[_t12])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRuleDescription">
    <Resource name="sql">
      <![CDATA[select name from sales.dept where deptno=12]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(NAME=[_1])
  LogicalFilter(condition=[=(_0, 12)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(NAME=[_1])
  LogicalCalc(expr#0..1=[{inputs}], expr#2=[12], expr#3=[=(_t0, _t2)], proj#0..1=[{exprs}], _condition=[_t3])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testGroup">
    <Resource name="sql">
      <![CDATA[select upper(name) from dept where deptno=20]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR_0=[UPPER(_1)])
  LogicalFilter(condition=[=(_0, 20)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], expr#2=[UPPER(_t1)], expr#3=[20], expr#4=[=(_t0, _t3)], EXPR_0=[_t2], _condition=[_t4])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelNodeCacheWithDigest">
    <Resource name="sql">
      <![CDATA[(select n_nationkey from SALES.CUSTOMER) union all (select n_name from CUSTOMER_MODIFIABLEVIEW)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(N_NATIONKEY=[_0])
    LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
  LogicalProject(N_NAME=[_1])
    LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
]]>
    </Resource>
  </TestCase>
</Root>
