<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
    <TestCase name="testReduceNestedCaseWhen">
        <Resource name="sql">
            <![CDATA[select sal
from emp
where case when (sal = 1000) then
(case when sal = 1000 then null else 1 end is null) else
(case when sal = 2000 then null else 1 end is null) end is true]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalFilter(condition=[CASE(=($5, 1000), =($5, 1000), =($5, 2000))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalFilter(condition=[IS TRUE(CASE(=($5, 1000), IS NULL(CASE(=($5, 1000), null, 1)), IS NULL(CASE(=($5, 2000), null, 1))))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceOrCaseWhen">
        <Resource name="sql">
            <![CDATA[select sal
from emp
where case when sal = 1000 then null else 1 end is null
OR case when sal = 2000 then null else 1 end is null]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalFilter(condition=[OR(=($5, 1000), =($5, 2000))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalFilter(condition=[OR(IS NULL(CASE(=($5, 1000), null, 1)), IS NULL(CASE(=($5, 2000), null, 1)))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowInParenthesis">
        <Resource name="sql">
            <![CDATA[select count(*) over (w), count(*) over w
from emp
window w as (partition by empno order by empno)]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$0])
  LogicalProject($0=[$9])
    LogicalWindow(window#0=[window(partition {0} order by [0] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [COUNT()])])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[COUNT() OVER (PARTITION BY $0 ORDER BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$1=[COUNT() OVER (PARTITION BY $0 ORDER BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testProjectToWindowRuleForMultipleWindows">
        <Resource name="sql">
            <![CDATA[select
 count(*) over(partition by empno order by sal) as count1,
 count(*) over(partition by deptno order by sal) as count2,
 sum(deptno) over(partition by empno order by sal) as sum1,
 sum(deptno) over(partition by deptno order by sal) as sum2
from emp]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject($0=[$9], $1=[$11], $2=[$10], $3=[$12])
  LogicalWindow(window#0=[window(partition {0} order by [5] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [COUNT(), SUM($7)])], window#1=[window(partition {7} order by [5] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [COUNT(), SUM($7)])])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(COUNT1=[COUNT() OVER (PARTITION BY $0 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], COUNT2=[COUNT() OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], SUM1=[SUM($7) OVER (PARTITION BY $0 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], SUM2=[SUM($7) OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionToDistinctRule">
        <Resource name="sql">
            <![CDATA[select * from dept union select * from dept]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0, 1}])
  LogicalUnion(all=[true])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalUnion(all=[false])
  LogicalProject(DEPTNO=[$0], NAME=[$1])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
  LogicalProject(DEPTNO=[$0], NAME=[$1])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExtractJoinFilterRule">
        <Resource name="sql">
            <![CDATA[select 1 from emp inner join dept on emp.deptno=dept.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[=($7, $9)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAddRedundantSemiJoinRule">
        <Resource name="sql">
            <![CDATA[select 1 from emp inner join dept on emp.deptno = dept.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
    SemiJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterThroughOuterJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d left outer join sales.emp e on d.deptno = e.deptno where d.name = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  FilterRel(condition=[=($1, 'Charlie')])
    JoinRel(condition=[=($0, $9)], joinType=[left])
      TableAccessRel(table=[[CATALOG, SALES, DEPT]])
      TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  JoinRel(condition=[=($0, $9)], joinType=[left])
    FilterRel(condition=[=($1, 'Charlie')])
      TableAccessRel(table=[[CATALOG, SALES, DEPT]])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSemiJoinReduceConstants">
        <Resource name="sql">
            <![CDATA[select e1.sal from (select * from emp where deptno = 200) as e1
where e1.deptno in (
  select e2.deptno from emp e2 where e2.sal = 100)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$0])
  SemiJoin(condition=[=($1, $2)], joinType=[inner])
    LogicalFilter(condition=[=($1, 200)])
      LogicalProject(SAL=[$5], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$1])
      LogicalFilter(condition=[=($0, 100)])
        LogicalProject(SAL=[$5], DEPTNO=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(SAL=[$0])
  SemiJoin(condition=[=($1, $2)], joinType=[inner])
    LogicalFilter(condition=[=($1, 200)])
      LogicalProject(SAL=[$5], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$1])
      LogicalFilter(condition=[=($0, 100)])
        LogicalProject(SAL=[$5], DEPTNO=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFullOuterJoinSimplificationToLeftOuter">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d full outer join sales.emp e on d.deptno = e.deptno where d.name = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[=($1, 'Charlie')])
    LogicalJoin(condition=[=($0, $9)], joinType=[full])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[CAST($0):INTEGER], NAME=[CAST($1):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], EMPNO=[$2], ENAME=[$3], JOB=[$4], MGR=[$5], HIREDATE=[$6], SAL=[$7], COMM=[$8], DEPTNO0=[$9], SLACKER=[$10])
    LogicalJoin(condition=[=($0, $9)], joinType=[left])
      LogicalFilter(condition=[=($1, 'Charlie')])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFullOuterJoinSimplificationToRightOuter">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d full outer join sales.emp e on d.deptno = e.deptno where e.sal > 100]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($7, 100)])
    LogicalJoin(condition=[=($0, $9)], joinType=[full])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[CAST($2):INTEGER], ENAME=[CAST($3):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], JOB=[CAST($4):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], MGR=[$5], HIREDATE=[CAST($6):TIMESTAMP(0)], SAL=[CAST($7):INTEGER], COMM=[CAST($8):INTEGER], DEPTNO0=[CAST($9):INTEGER], SLACKER=[CAST($10):BOOLEAN])
    LogicalJoin(condition=[=($0, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalFilter(condition=[>($5, 100)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFullOuterJoinSimplificationToInner">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d full outer join sales.emp e on d.deptno = e.deptno where d.name = 'Charlie' and e.sal > 100]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[AND(=($1, 'Charlie'), >($7, 100))])
    LogicalJoin(condition=[=($0, $9)], joinType=[full])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[CAST($0):INTEGER], NAME=[CAST($1):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], EMPNO=[CAST($2):INTEGER], ENAME=[CAST($3):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], JOB=[CAST($4):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], MGR=[$5], HIREDATE=[CAST($6):TIMESTAMP(0)], SAL=[CAST($7):INTEGER], COMM=[CAST($8):INTEGER], DEPTNO0=[CAST($9):INTEGER], SLACKER=[CAST($10):BOOLEAN])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalFilter(condition=[=($1, 'Charlie')])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalFilter(condition=[>($5, 100)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testLeftOuterJoinSimplificationToInner">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d left outer join sales.emp e on d.deptno = e.deptno where e.sal > 100]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($7, 100)])
    LogicalJoin(condition=[=($0, $9)], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[CAST($2):INTEGER], ENAME=[CAST($3):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], JOB=[CAST($4):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], MGR=[$5], HIREDATE=[CAST($6):TIMESTAMP(0)], SAL=[CAST($7):INTEGER], COMM=[CAST($8):INTEGER], DEPTNO0=[CAST($9):INTEGER], SLACKER=[CAST($10):BOOLEAN])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalFilter(condition=[>($5, 100)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRightOuterJoinSimplificationToInner">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d right outer join sales.emp e on d.deptno = e.deptno where d.name = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[=($1, 'Charlie')])
    LogicalJoin(condition=[=($0, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[CAST($0):INTEGER], NAME=[CAST($1):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], EMPNO=[$2], ENAME=[$3], JOB=[$4], MGR=[$5], HIREDATE=[$6], SAL=[$7], COMM=[$8], DEPTNO0=[$9], SLACKER=[$10])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalFilter(condition=[=($1, 'Charlie')])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterThroughSemiJoin">
        <Resource name="sql">
            <![CDATA[select * from (select * from dept where dept.deptno in (
  select emp.deptno from emp
  ))R where R.deptno <=10 ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  LogicalFilter(condition=[<=($0, 10)])
    SemiJoin(condition=[=($0, $2)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  SemiJoin(condition=[=($0, $2)], joinType=[inner])
    LogicalFilter(condition=[<=($0, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastAgg">
        <Resource name="sql">
            <![CDATA[select dname, c from (select name dname, count(*) as c from dept group by name) t where dname = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DNAME=[$0], C=[$1])
  LogicalFilter(condition=[=($0, 'Charlie')])
    LogicalAggregate(group=[{0}], C=[COUNT()])
      LogicalProject(DNAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DNAME=[$0], C=[$1])
  LogicalAggregate(group=[{0}], C=[COUNT()])
    LogicalFilter(condition=[=($0, 'Charlie')])
      LogicalProject(DNAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastAggWithGroupingSets1">
        <Resource name="sql">
            <![CDATA[select ddeptno, dname, c from
             (select deptno ddeptno, name dname, count(*) as c
             from dept group by rollup(deptno,name)) t
              where dname = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DDEPTNO=[$0], DNAME=[$1], C=[$2])
  LogicalProject(DDEPTNO=[CASE($2, null, $0)], DNAME=[CASE($3, null, $1)], C=[$4])
    LogicalFilter(condition=[=(CASE($3, null, $1), 'Charlie')])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], C=[COUNT()])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DDEPTNO=[$0], DNAME=[$1], C=[$2])
  LogicalProject(DDEPTNO=[CASE($2, null, $0)], DNAME=[CASE($3, null, $1)], C=[$4])
    LogicalFilter(condition=[=(CASE($3, null, $1), 'Charlie')])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], C=[COUNT()])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastAggWithGroupingSets2">
        <Resource name="sql">
            <![CDATA[select dname, ddeptno, c from
             (select name dname, deptno ddeptno, count(*) as c
             from dept group by grouping sets ((name,deptno),(name))) t
              where dname = 'Charlie']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DNAME=[$0], DDEPTNO=[$1], C=[$2])
  LogicalProject(DNAME=[$0], DDEPTNO=[CASE($3, null, $1)], C=[$4])
    LogicalFilter(condition=[=($0, 'Charlie')])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}]], indicator=[true], C=[COUNT()])
        LogicalProject(DNAME=[$1], DDEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DNAME=[$0], DDEPTNO=[$1], C=[$2])
  LogicalProject(DNAME=[$0], DDEPTNO=[CASE($3, null, $1)], C=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}]], indicator=[true], C=[COUNT()])
      LogicalFilter(condition=[=($0, 'Charlie')])
        LogicalProject(DNAME=[$1], DDEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceAverage">
        <Resource name="sql">
            <![CDATA[select name, max(name), avg(deptno), min(name) from sales.dept group by name]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($0)], EXPR$2=[AVG($1)], EXPR$3=[MIN($0)])
  LogicalProject(NAME=[$1], DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(NAME=[$0], EXPR$1=[$1], EXPR$2=[CAST(/($2, $3)):INTEGER NOT NULL], EXPR$3=[$4])
  LogicalAggregate(group=[{0}], EXPR$1=[MAX($0)], agg#1=[$SUM0($1)], agg#2=[COUNT()], EXPR$3=[MIN($0)])
    LogicalProject(NAME=[$1], DEPTNO=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushProjectPastFilter">
        <Resource name="sql">
            <![CDATA[select empno + deptno from emp where sal = 10 * comm and upper(ename) = 'FOO']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, $7)])
  LogicalFilter(condition=[AND(=($5, *(10, $6)), =(UPPER($1), 'FOO'))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, $4)])
  LogicalFilter(condition=[AND(=($2, *(10, $3)), =(UPPER($1), 'FOO'))])
    LogicalProject(EMPNO=[$0], ENAME=[$1], SAL=[$5], COMM=[$6], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushProjectPastJoin">
        <Resource name="sql">
            <![CDATA[select e.sal + b.comm from emp e inner join bonus b on e.ename = b.ename and e.deptno = 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[+($5, $12)])
  LogicalJoin(condition=[AND(=($1, $9), =($7, 10))], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[+($1, $4)])
  LogicalJoin(condition=[AND(=($0, $3), =($2, 10))], joinType=[inner])
    LogicalProject(ENAME=[$1], SAL=[$5], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$0], COMM=[$3])
      LogicalTableScan(table=[[CATALOG, SALES, BONUS]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushProjectPastSetOp">
        <Resource name="sql">
            <![CDATA[select sal from (select * from emp e1 union all select * from emp e2)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalUnion(all=[true])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(SAL=[$5])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(SAL=[$5])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushJoinThroughUnionOnLeft">
        <Resource name="sql">
            <![CDATA[select r1.sal from (select * from emp e1 union all select * from emp e2) r1, emp r2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalUnion(all=[true])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushJoinThroughUnionOnRight">
        <Resource name="sql">
            <![CDATA[select r1.sal from emp r1, (select * from emp e1 union all select * from emp e2) r2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(SAL=[$5])
  LogicalUnion(all=[true])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstants">
        <Resource name="sql">
            <![CDATA[select 1+2, d.deptno+(3+4), (5+6)+d.deptno, cast(null as integer), coalesce(2,null), row(7+8) from dept d inner join emp e on d.deptno = e.deptno + (5-5) where d.deptno=(7+8) and d.deptno=(8+7) and d.deptno=coalesce(2,null)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[+(1, 2)], EXPR$1=[+($0, +(3, 4))], EXPR$2=[+(+(5, 6), $0)], EXPR$3=[null], EXPR$4=[CASE(IS NOT NULL(2), 2, null)], EXPR$5=[ROW(+(7, 8))])
  LogicalFilter(condition=[AND(=($0, +(7, 8)), =($0, +(8, 7)), =($0, CASE(IS NOT NULL(2), 2, null)))])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$2], ENAME=[$3], JOB=[$4], MGR=[$5], HIREDATE=[$6], SAL=[$7], COMM=[$8], DEPTNO0=[$9], SLACKER=[$10])
      LogicalJoin(condition=[=($0, $11)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, -(5, 5))])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[3], EXPR$1=[+($0, 7)], EXPR$2=[+(11, $0)], EXPR$3=[null], EXPR$4=[CAST(2):INTEGER], EXPR$5=[ROW(15)])
  LogicalFilter(condition=[AND(=($0, 15), =($0, 2))])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$2], ENAME=[$3], JOB=[$4], MGR=[$5], HIREDATE=[$6], SAL=[$7], COMM=[$8], DEPTNO0=[$9], SLACKER=[$10])
      LogicalJoin(condition=[=($0, $11)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 0)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsDup">
        <Resource name="sql">
            <![CDATA[select d.deptno from dept d where d.deptno=7 and d.deptno=8]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[AND(=($0, 7), =($0, 8))])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[AND(=($0, 7), =($0, 8))])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsEliminatesFilter">
        <Resource name="sql">
            <![CDATA[select * from (values (1,2)) where 1 + 2 > 3 + CAST(NULL AS INTEGER)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalFilter(condition=[>(+(1, 2), +(3, null))])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAlreadyFalseEliminatesFilter">
        <Resource name="sql">
            <![CDATA[select * from (values (1,2)) where false]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalFilter(condition=[false])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceValuesUnderFilter">
        <Resource name="sql">
            <![CDATA[select a, b from (values (10, 'x'), (20, 'y')) as t(a, b) where a < 15]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(A=[$0], B=[$1])
  LogicalFilter(condition=[<($0, 15)])
    LogicalValues(tuples=[[{ 10, 'x' }, { 20, 'y' }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(A=[$0], B=[$1])
  LogicalValues(tuples=[[{ 10, 'x' }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceValuesUnderProject">
        <Resource name="sql">
            <![CDATA[select a + b from (values (10, 1), (20, 3)) as t(a, b)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, $1)])
  LogicalValues(tuples=[[{ 10, 1 }, { 20, 3 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalValues(tuples=[[{ 11 }, { 23 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceValuesUnderProjectFilter">
        <Resource name="sql">
            <![CDATA[select a + b as x, b, a from (values (10, 1), (30, 7), (20, 3)) as t(a, b) where a - b < 21]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(X=[+($0, $1)], B=[$1], A=[$0])
  LogicalFilter(condition=[<(-($0, $1), 21)])
    LogicalValues(tuples=[[{ 10, 1 }, { 30, 7 }, { 20, 3 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalValues(tuples=[[{ 11, 1, 10 }, { 23, 3, 20 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceValuesToEmpty">
        <Resource name="sql">
            <![CDATA[select a + b as x, b, a from (values (10, 1), (30, 7)) as t(a, b) where a - b < 0]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(X=[+($0, $1)], B=[$1], A=[$0])
  LogicalFilter(condition=[<(-($0, $1), 0)])
    LogicalValues(tuples=[[{ 10, 1 }, { 30, 7 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptyFilterProjectUnion">
        <Resource name="sql">
            <![CDATA[select * from (
select * from (values (10, 1), (30, 3)) as t (x, y)
union all
select * from (values (20, 2))
)
where x + y > 30]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(X=[$0], Y=[$1])
  LogicalFilter(condition=[>(+($0, $1), 30)])
    LogicalUnion(all=[true])
      LogicalProject(X=[$0], Y=[$1])
        LogicalValues(tuples=[[{ 10, 1 }, { 30, 3 }]])
      LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
        LogicalValues(tuples=[[{ 20, 2 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(X=[$0], Y=[$1])
  LogicalValues(tuples=[[{ 30, 3 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceCasts">
        <Resource name="sql">
            <![CDATA[select cast(d.name as varchar(128)), cast(e.empno as integer) from dept as d inner join emp as e on cast(d.deptno as integer) = cast(e.deptno as integer) where cast(e.job as varchar(1)) = 'Manager']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$1=[CAST($2):INTEGER NOT NULL])
  LogicalFilter(condition=[=(CAST(CAST($4):VARCHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL):VARCHAR(7) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL, 'Manager')])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$3], ENAME=[$4], JOB=[$5], MGR=[$6], HIREDATE=[$7], SAL=[$8], COMM=[$9], DEPTNO0=[$10], SLACKER=[$11])
      LogicalJoin(condition=[=($2, $12)], joinType=[inner])
        LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO2=[CAST($0):INTEGER NOT NULL])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO9=[CAST($7):INTEGER NOT NULL])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[CAST($1):VARCHAR(128) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], EXPR$1=[$2])
  LogicalFilter(condition=[=(CAST(CAST($4):VARCHAR(1) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL):VARCHAR(7) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL, 'Manager')])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$3], ENAME=[$4], JOB=[$5], MGR=[$6], HIREDATE=[$7], SAL=[$8], COMM=[$9], DEPTNO0=[$10], SLACKER=[$11])
      LogicalJoin(condition=[=($2, $12)], joinType=[inner])
        LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO2=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO9=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,sum(empno),count(*) from (select * from emp as e1 union all select * from emp as e2) group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
AggregateRel(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()])
  ProjectRel(ENAME=[$1], EMPNO=[$0])
    UnionRel(all=[true])
      ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        TableAccessRel(table=[[CATALOG, SALES, EMP]])
      ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
ProjectRel(ENAME=[$0], EXPR$1=[$1], EXPR$2=[CAST($2):BIGINT NOT NULL])
  AggregateRel(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)])
    UnionRel(all=[true])
      AggregateRel(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()])
        ProjectRel(ENAME=[$1], EMPNO=[$0])
          ProjectRel(EMPNO=[$0], ENAME=[$1])
            ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
              TableAccessRel(table=[[CATALOG, SALES, EMP]])
      AggregateRel(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()])
        ProjectRel(ENAME=[$1], EMPNO=[$0])
          ProjectRel(EMPNO=[$0], ENAME=[$1])
            ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
              TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceCastAndConsts">
        <Resource name="sql">
            <![CDATA[select * from emp where cast((empno + (10/2)) as int) = 13]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[=(CAST(+($0, /(10, 2))):INTEGER NOT NULL, 13)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[=(+($0, 5), 13)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsCalc">
        <Resource name="sql">
            <![CDATA[select * from (
  select upper(substring(x FROM 1 FOR 2) || substring(x FROM 3)) as u,
      substring(x FROM 1 FOR 1) as s
  from (
    select 'table' as x from (values (true))
    union
    select 'view' from (values (true))
    union
    select 'foreign table' from (values (true))
  )
) where u = 'TABLE']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(U=[$0], S=[$1])
  LogicalFilter(condition=[=($0, 'TABLE')])
    LogicalProject(U=[UPPER(||(SUBSTRING($0, 1, 2), SUBSTRING($0, 3)))], S=[SUBSTRING($0, 1, 1)])
      LogicalUnion(all=[false])
        LogicalUnion(all=[false])
          LogicalProject(X=['table'])
            LogicalValues(tuples=[[{ true }]])
          LogicalProject(EXPR$0=['view'])
            LogicalValues(tuples=[[{ true }]])
        LogicalProject(EXPR$0=['foreign table'])
          LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalCalc(expr#0=[{inputs}], expr#1=['TABLE'], expr#2=['t'], U=[$t1], S=[$t2])
  LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstants2">
        <Resource name="sql">
            <![CDATA[select p1 is not distinct from p0 from (values (2, cast(null as integer))) as t(p0, p1)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(CASE(IS NULL($1), IS NULL($0), IS NULL($0), IS NULL($1), =($1, $0))):BOOLEAN NOT NULL])
  LogicalProject(EXPR$0=[2], EXPR$1=[null])
    LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(IS NULL($1), false, CAST(=($1, 2)):BOOLEAN NOT NULL)])
  LogicalProject(EXPR$0=[2], EXPR$1=[null])
    LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsProjectNullable">
        <Resource name="sql">
            <![CDATA[select mgr from emp where mgr=10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(MGR=[$3])
  LogicalFilter(condition=[=($3, 10)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(MGR=[CAST(10):INTEGER])
  LogicalFilter(condition=[=($3, 10)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptyJoin">
        <Resource name="sql">
            <![CDATA[select * from (
select * from emp where false)
join dept using (deptno)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[false])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptyJoinRight">
        <Resource name="sql">
            <![CDATA[select * from (
select * from emp where false)
right join dept using (deptno)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[right])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[false])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[right])
    LogicalValues(tuples=[[]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptyJoinLeft">
        <Resource name="sql">
            <![CDATA[select * from (
select * from emp where false)
left join dept using (deptno)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[left])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[false])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptyLimitZero">
        <Resource name="sql">
            <![CDATA[select * from emp order by deptno limit 0]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
SortRel(sort0=[$7], dir0=[Ascending], fetch=[0])
  ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
EmptyRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptySort">
        <Resource name="sql">
            <![CDATA[select * from emp where false order by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalSort(sort0=[$7], dir0=[ASC])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalFilter(condition=[false])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalSort(sort0=[$7], dir0=[ASC])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testEmptySortLimitZero">
        <Resource name="sql">
            <![CDATA[select * from emp order by deptno limit 0]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalSort(sort0=[$7], dir0=[ASC], fetch=[0])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumConstantThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename, sum(u) from
(select *, 2 u from emp as e1 union all
 select *, 3 u from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalProject(ENAME=[$1], U=[$9])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[2])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], U=[2])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], U=[3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumNullConstantThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename, sum(u) from
(select *, cast(null as integer) u from emp as e1 union all
 select *, cast(null as integer) u from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalProject(ENAME=[$1], U=[$9])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[null])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[null])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], U=[null])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], U=[null])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumNullableThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename, sum(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalProject(ENAME=[$1], MGR=[$3])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumNullableNOGBYThroughUnion">
        <Resource name="sql">
            <![CDATA[select sum(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(MGR=[$3])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
      LogicalProject(MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
      LogicalProject(MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushCountStarThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,count(*) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(ENAME=[$1])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      LogicalProject(ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushCountNullableThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,count(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1)])
  LogicalProject(ENAME=[$1], MGR=[$3])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushMaxNullableThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,max(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])
  LogicalProject(ENAME=[$1], MGR=[$3])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)])
      LogicalProject(ENAME=[$1], MGR=[$3])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushMinThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,min(empno) from
            (select * from emp as e1 union all
            select * from emp as e2)
            group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MIN($1)])
  LogicalProject(ENAME=[$1], EMPNO=[$0])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MIN($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[MIN($1)])
      LogicalProject(ENAME=[$1], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[MIN($1)])
      LogicalProject(ENAME=[$1], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAvgThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,avg(empno) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[AVG($1)])
  LogicalProject(ENAME=[$1], EMPNO=[$0])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[AVG($1)])
  LogicalUnion(all=[true])
    LogicalProject(ENAME=[$1], EMPNO=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(ENAME=[$1], EMPNO=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumCountStarThroughUnion">
        <Resource name="sql">
            <![CDATA[select ename,sum(empno),count(*),min(deptno),max(empno) from
(select * from emp as e1 union all
 select * from emp as e2)
group by ename]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()], EXPR$3=[MIN($2)], EXPR$4=[MAX($1)])
  LogicalProject(ENAME=[$1], EMPNO=[$0], DEPTNO=[$7])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[$SUM0($2)], EXPR$3=[MIN($3)], EXPR$4=[MAX($4)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()], EXPR$3=[MIN($2)], EXPR$4=[MAX($1)])
      LogicalProject(ENAME=[$1], EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT()], EXPR$3=[MIN($2)], EXPR$4=[MAX($1)])
      LogicalProject(ENAME=[$1], EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumConstantGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, sum(u) from
(select *, 2 u from emp as e1 union all
 select *, 3 u from emp as e2)
group by rollup(deptno,job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], U=[$9])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[2])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[3])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], U=[2])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], U=[3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumNullConstantGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, sum(u) from
(select *, cast(null as integer) u from emp as e1 union all
 select *, cast(null as integer) u from emp as e2)
group by rollup(deptno,job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], U=[$9])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[null])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], U=[null])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], U=[null])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], U=[null])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumNullableGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, sum(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno, job)
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushCountStarGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, count(*) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno, job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT()])
      LogicalProject(DEPTNO=[$7], JOB=[$2])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[$SUM0($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()])
        LogicalProject(DEPTNO=[$7], JOB=[$2])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()])
        LogicalProject(DEPTNO=[$7], JOB=[$2])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushCountNullableGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, count(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno, job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[$SUM0($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushMaxNullableGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, max(mgr) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno, job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[MAX($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[MAX($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[MAX($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[MAX($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushMinGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, min(empno) from
            (select * from emp as e1 union all
            select * from emp as e2)
            group by rollup(deptno, job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[MIN($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[MIN($2)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[MIN($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[MIN($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAvgGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job, avg(empno) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno, job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[AVG($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[AVG($2)])
    LogicalUnion(all=[true])
      LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSumCountStarGroupingSetsThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno,job,sum(empno),count(*),min(deptno),max(empno) from
(select * from emp as e1 union all
 select * from emp as e2)
group by rollup(deptno,job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4], EXPR$3=[$5], EXPR$4=[$6], EXPR$5=[$7])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4], EXPR$3=[$5], EXPR$4=[$6], EXPR$5=[$7])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)], EXPR$3=[COUNT()], EXPR$4=[MIN($0)], EXPR$5=[MAX($2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
        LogicalUnion(all=[true])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4], EXPR$3=[$5], EXPR$4=[$6], EXPR$5=[$7])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[SUM($2)], EXPR$3=[$SUM0($3)], EXPR$4=[MIN($4)], EXPR$5=[MAX($5)])
    LogicalUnion(all=[true])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)], EXPR$3=[COUNT()], EXPR$4=[MIN($0)], EXPR$5=[MAX($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)], EXPR$3=[COUNT()], EXPR$4=[MIN($0)], EXPR$5=[MAX($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushCountFilterThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, count(*) filter (where job = 'CLERK')
from (
  select * from emp where deptno = 10
  union all
  select * from emp where deptno > 20)
group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT() FILTER $1])
  LogicalProject(DEPTNO=[$7], $f1=[=($2, 'CLERK')])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[>($7, 20)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[$SUM0($1)])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT() FILTER $1])
      LogicalProject(DEPTNO=[$7], $f1=[=($2, 'CLERK')])
        LogicalFilter(condition=[=($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT() FILTER $1])
      LogicalProject(DEPTNO=[$7], $f1=[=($2, 'CLERK')])
        LogicalFilter(condition=[>($7, 20)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullFilterThroughAggregate">
        <Resource name="sql">
            <![CDATA[select empno, sal, deptno from (  select empno, sal, deptno  from emp  where sal > 5000)group by empno, sal, deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 1, 2}])
  LogicalFilter(condition=[>($1, 5000)])
    LogicalProject(EMPNO=[$0], SAL=[$5], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalFilter(condition=[>($1, 5000)])
  LogicalAggregate(group=[{0, 1, 2}])
    LogicalProject(EMPNO=[$0], SAL=[$5], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullFilterThroughAggregateGroupingSets">
        <Resource name="sql">
            <![CDATA[select empno, sal, deptno from (  select empno, sal, deptno  from emp  where sal > 5000)group by rollup(empno, sal, deptno)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[CASE($3, null, $0)], SAL=[CASE($4, null, $1)], DEPTNO=[CASE($5, null, $2)])
  LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0, 1}, {0}, {}]], indicator=[true])
    LogicalFilter(condition=[>($1, 5000)])
      LogicalProject(EMPNO=[$0], SAL=[$5], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[CASE($3, null, $0)], SAL=[CASE($4, null, $1)], DEPTNO=[CASE($5, null, $2)])
  LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0, 1}, {0}, {}]], indicator=[true])
    LogicalFilter(condition=[>($1, 5000)])
      LogicalAggregate(group=[{0, 1, 2}])
        LogicalProject(EMPNO=[$0], SAL=[$5], DEPTNO=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughConstLast">
        <Resource name="sql">
            <![CDATA[select deptno, max(mgr) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by deptno, four]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($2)])
    LogicalProject(DEPTNO=[$7], FOUR=[$9], MGR=[$3])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($2)])
  LogicalProject(DEPTNO=[$7], FOUR=[4], MGR=[$3])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregateSimpleNonNullable">
        <Resource name="sql">
            <![CDATA[select deptno, max(ename) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by deptno, four]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($2)])
    LogicalProject(DEPTNO=[$7], FOUR=[$9], ENAME=[$1])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($2)])
  LogicalProject(DEPTNO=[$7], FOUR=[4], ENAME=[$1])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregatePermuted">
        <Resource name="sql">
            <![CDATA[select deptno, max(mgr) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by deptno, four, two_plus_three, deptno42]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$4])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$1=[MAX($4)])
    LogicalProject(DEPTNO=[$7], FOUR=[$9], TWO_PLUS_THREE=[$10], DEPTNO42=[$11], MGR=[$3])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($4)])
    LogicalProject(DEPTNO=[$7], DEPTNO42=[+($7, 42)], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], MGR=[$3])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregatePermutedConstFirst">
        <Resource name="sql">
            <![CDATA[select deptno, max(mgr) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by four, deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$1], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($2)])
    LogicalProject(FOUR=[$9], DEPTNO=[$7], MGR=[$3])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($2)])
  LogicalProject(DEPTNO=[$7], FOUR=[4], MGR=[$3])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregatePermutedConstGroupBy">
        <Resource name="sql">
            <![CDATA[select deptno, max(mgr) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by 42+24, deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$1], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[MAX($2)])
    LogicalProject($f0=[+(42, 24)], DEPTNO=[$7], MGR=[$3])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($2)])
  LogicalProject(DEPTNO=[$7], $f0=[+(42, 24)], MGR=[$3])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregateConstGroupBy">
        <Resource name="sql">
            <![CDATA[select 4, 2+3, max(mgr) from (
  select *, 4 as four, 2+3 as two_plus_three, deptno+42 as deptno42 from emp
) group by 4, 2+3]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 1}], EXPR$2=[MAX($2)])
  LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], MGR=[$3])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], DEPTNO42=[+($7, 42)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[+(2, 3)], EXPR$2=[$1])
  LogicalAggregate(group=[{0}], EXPR$2=[MAX($2)])
    LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], MGR=[$3])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregateAllConst">
        <Resource name="sql">
            <![CDATA[select 4, 2+3, max(five) from (
  select *, 4 as four, 2+3 as two_plus_three, 5 as five, deptno+42 as deptno42 from emp
) group by 4, 2+3]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 1}], EXPR$2=[MAX($2)])
  LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], FIVE=[$11])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], FIVE=[5], DEPTNO42=[+($7, 42)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[+(2, 3)], EXPR$2=[$1])
  LogicalAggregate(group=[{0}], EXPR$2=[MAX($2)])
    LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], FIVE=[5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantThroughAggregateAllLiterals">
        <Resource name="sql">
            <![CDATA[select 4, 2+3, max(5) from (
  select *, 4 as four, 2+3 as two_plus_three, 5 as five, deptno+42 as deptno42 from emp
) group by 4, 2+3]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 1}], EXPR$2=[MAX($2)])
  LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], $f2=[5])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOUR=[4], TWO_PLUS_THREE=[+(2, 3)], FIVE=[5], DEPTNO42=[+($7, 42)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[+(2, 3)], EXPR$2=[$1])
  LogicalAggregate(group=[{0}], EXPR$2=[MAX($2)])
    LogicalProject(EXPR$0=[4], EXPR$1=[+(2, 3)], $f2=[5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConvertMultiJoinRule">
        <Resource name="sql">
            <![CDATA[select e1.ename from emp e1, dept d, emp e2 where e1.deptno = d.deptno and d.deptno = e2.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($9, $18))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  MultiJoin(joinFilter=[AND(=($9, $18), =($7, $9))], isFullOuterJoin=[false], joinTypes=[[INNER, INNER, INNER]], outerJoinConditions=[[NULL, NULL, NULL]], projFields=[[ALL, ALL, ALL]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRemoveSemiJoinWithFilter">
        <Resource name="sql">
            <![CDATA[select e.ename from emp e, dept d where e.deptno = d.deptno and e.ename = 'foo']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($1, 'foo'))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
    LogicalFilter(condition=[=($1, 'foo')])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRemoveSemiJoinRight">
        <Resource name="sql">
            <![CDATA[select e1.ename from emp e1, dept d, emp e2 where e1.deptno = d.deptno and d.deptno = e2.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($9, $18))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($9, $18)], joinType=[inner], semiJoinDone=[true])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMergeFilterWithJoinCondition">
        <Resource name="sql">
            <![CDATA[select d.name as dname,e.ename as ename from emp e inner join dept d on e.deptno=d.deptno where d.name='Propane']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
ProjectRel(DNAME=[$10], ENAME=[$1])
  FilterRel(condition=[=($10, 'Propane')])
    JoinRel(condition=[=($7, $9)], joinType=[inner])
      TableAccessRel(table=[[CATALOG, SALES, EMP]])
      TableAccessRel(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConvertMultiJoinRuleOuterJoins">
        <Resource name="sql">
            <![CDATA[select * from     (select * from         (select * from             (select * from A right outer join B on a = b)             left outer join             (select * from C full outer join D on c = d)            on a = c and b = d)         right outer join         (select * from             (select * from E full outer join F on e = f)             right outer join             (select * from G left outer join H on g = h)             on e = g and f = h)         on a = e and b = f and c = g and d = h)     inner join     (select * from I inner join J on i = j)     on a = i and h = j]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2], D=[$3], E=[$4], F=[$5], G=[$6], H=[$7], I=[$8], J=[$9])
  LogicalJoin(condition=[AND(=($0, $8), =($7, $9))], joinType=[inner])
    LogicalProject(A=[$0], B=[$1], C=[$2], D=[$3], E=[$4], F=[$5], G=[$6], H=[$7])
      LogicalJoin(condition=[AND(=($0, $4), =($1, $5), =($2, $6), =($3, $7))], joinType=[right])
        LogicalProject(A=[$0], B=[$1], C=[$2], D=[$3])
          LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[left])
            LogicalProject(A=[$0], B=[$1])
              LogicalJoin(condition=[=($0, $1)], joinType=[right])
                LogicalTableScan(table=[[CATALOG, SALES, A]])
                LogicalTableScan(table=[[CATALOG, SALES, B]])
            LogicalProject(C=[$0], D=[$1])
              LogicalJoin(condition=[=($0, $1)], joinType=[full])
                LogicalTableScan(table=[[CATALOG, SALES, C]])
                LogicalTableScan(table=[[CATALOG, SALES, D]])
        LogicalProject(E=[$0], F=[$1], G=[$2], H=[$3])
          LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[right])
            LogicalProject(E=[$0], F=[$1])
              LogicalJoin(condition=[=($0, $1)], joinType=[full])
                LogicalTableScan(table=[[CATALOG, SALES, E]])
                LogicalTableScan(table=[[CATALOG, SALES, F]])
            LogicalProject(G=[$0], H=[$1])
              LogicalJoin(condition=[=($0, $1)], joinType=[left])
                LogicalTableScan(table=[[CATALOG, SALES, G]])
                LogicalTableScan(table=[[CATALOG, SALES, H]])
    LogicalProject(I=[$0], J=[$1])
      LogicalJoin(condition=[=($0, $1)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, I]])
        LogicalTableScan(table=[[CATALOG, SALES, J]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
MultiJoin(joinFilter=[AND(=($0, $8), =($7, $9), =($8, $9))], isFullOuterJoin=[false], joinTypes=[[INNER, INNER, INNER]], outerJoinConditions=[[NULL, NULL, NULL]], projFields=[[ALL, ALL, ALL]])
  MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[RIGHT, INNER]], outerJoinConditions=[[AND(=($0, $4), =($1, $5), =($2, $6), =($3, $7)), NULL]], projFields=[[ALL, ALL]])
    MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[INNER, LEFT]], outerJoinConditions=[[NULL, AND(=($0, $2), =($1, $3))]], projFields=[[ALL, ALL]])
      MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[RIGHT, INNER]], outerJoinConditions=[[=($0, $1), NULL]], projFields=[[ALL, ALL]])
        LogicalTableScan(table=[[CATALOG, SALES, A]])
        LogicalTableScan(table=[[CATALOG, SALES, B]])
      MultiJoin(joinFilter=[=($0, $1)], isFullOuterJoin=[true], joinTypes=[[INNER, INNER]], outerJoinConditions=[[NULL, NULL]], projFields=[[ALL, ALL]])
        LogicalTableScan(table=[[CATALOG, SALES, C]])
        LogicalTableScan(table=[[CATALOG, SALES, D]])
    MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[RIGHT, INNER]], outerJoinConditions=[[AND(=($0, $2), =($1, $3)), NULL]], projFields=[[ALL, ALL]])
      MultiJoin(joinFilter=[=($0, $1)], isFullOuterJoin=[true], joinTypes=[[INNER, INNER]], outerJoinConditions=[[NULL, NULL]], projFields=[[ALL, ALL]])
        LogicalTableScan(table=[[CATALOG, SALES, E]])
        LogicalTableScan(table=[[CATALOG, SALES, F]])
      MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[INNER, LEFT]], outerJoinConditions=[[NULL, =($0, $1)]], projFields=[[ALL, ALL]])
        LogicalTableScan(table=[[CATALOG, SALES, G]])
        LogicalTableScan(table=[[CATALOG, SALES, H]])
  LogicalTableScan(table=[[CATALOG, SALES, I]])
  LogicalTableScan(table=[[CATALOG, SALES, J]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSemiJoinPastJoinRuleLeft">
        <Resource name="sql">
            <![CDATA[select e1.ename from emp e1, dept d, emp e2 where e1.deptno = d.deptno and e1.empno = e2.empno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($0, $11))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($0, $11)], joinType=[inner], semiJoinDone=[true])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
      SemiJoin(condition=[=($0, $9)], joinType=[inner])
        SemiJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSemiJoinPastJoinRuleRight">
        <Resource name="sql">
            <![CDATA[select e1.ename from emp e1, dept d, emp e2 where e1.deptno = d.deptno and d.deptno = e2.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($9, $18))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($9, $18)], joinType=[inner], semiJoinDone=[true])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
      SemiJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      SemiJoin(condition=[=($0, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRemoveSemiJoin">
        <Resource name="sql">
            <![CDATA[select e.ename from emp e, dept d where e.deptno = d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[=($7, $9)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSemiJoinPastProject">
        <Resource name="sql">
            <![CDATA[select e.* from (select ename, trim(job), sal * 2, deptno from emp) e, dept d where e.deptno = d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$0], EXPR$1=[$1], EXPR$2=[$2], DEPTNO=[$3])
  LogicalFilter(condition=[=($3, $4)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalProject(ENAME=[$1], EXPR$1=[TRIM(FLAG(BOTH), ' ', $2)], EXPR$2=[*($5, 2)], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$0], EXPR$1=[$1], EXPR$2=[$2], DEPTNO=[$3])
  LogicalJoin(condition=[=($3, $4)], joinType=[inner], semiJoinDone=[true])
    LogicalProject(ENAME=[$1], EXPR$1=[TRIM(FLAG(BOTH), ' ', $2)], EXPR$2=[*($5, 2)], DEPTNO=[$7])
      SemiJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushSemiJoinPastFilter">
        <Resource name="sql">
            <![CDATA[select e.ename from emp e, dept d where e.deptno = d.deptno and e.ename = 'foo']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($1, 'foo'))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
    LogicalFilter(condition=[=($1, 'foo')])
      SemiJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRemoveSemiJoinRightWithFilter">
        <Resource name="sql">
            <![CDATA[select e1.ename from emp e1, dept d, emp e2 where e1.deptno = d.deptno and d.deptno = e2.deptno and d.name = 'foo']]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalFilter(condition=[AND(=($7, $9), =($9, $18), =($10, 'foo'))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$1])
  LogicalJoin(condition=[=($9, $18)], joinType=[inner], semiJoinDone=[true])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner], semiJoinDone=[true])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[=($1, 'foo')])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testHeterogeneousConversion">
        <Resource name="sql">
            <![CDATA[select upper(ename) from emp union all select lower(ename) from emp]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
UnionRel(all=[true])
  ProjectRel(EXPR$0=[UPPER($1)])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
  ProjectRel(EXPR$0=[LOWER($1)])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno where e.deptno > 7]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceProject">
        <Resource name="sql">
            <![CDATA[select 1 from (select * from sales.emp where deptno > 7) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceAggregate">
        <Resource name="sql">
            <![CDATA[select 1 from (select deptno, count(*) from sales.emp where deptno > 7 group by deptno) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $9)], joinType=[inner])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $9)], joinType=[inner])
    LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceUnion">
        <Resource name="sql">
            <![CDATA[select 1 from (select deptno from sales.emp where deptno > 7 union all select deptno from sales.emp where deptno > 10) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalUnion(all=[true])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalUnion(all=[true])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[OR(>($7, 7), >($7, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceJoin3way">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno inner join sales.emp f on e.deptno = f.deptno  where d.deptno > 7]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($16, $25)], joinType=[inner])
    LogicalJoin(condition=[=($7, $16)], joinType=[inner])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($16, $25)], joinType=[inner])
    LogicalJoin(condition=[=($7, $16)], joinType=[inner])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceUnionAlwaysTrue">
        <Resource name="sql">
            <![CDATA[select d.deptno, e.deptno from
                (select deptno from sales.emp where deptno < 4) d
            inner join
                (select deptno from sales.emp where deptno > 7
                union all
                select deptno from sales.emp) e
            on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], DEPTNO0=[$1])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(DEPTNO=[$7])
      LogicalFilter(condition=[<($7, 4)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalUnion(all=[true])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], DEPTNO0=[$1])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(DEPTNO=[$7])
      LogicalFilter(condition=[<($7, 4)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[<($0, 4)])
      LogicalUnion(all=[true])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 7)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceJoin3wayAgg">
        <Resource name="sql">
            <![CDATA[select 1 from (select deptno, count(*) from sales.emp where deptno > 7 group by deptno) d inner join
            sales.emp e on d.deptno = e.deptno inner join sales.emp f on e.deptno = f.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($9, $18)], joinType=[inner])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 7)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($9, $18)], joinType=[inner])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 7)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceLeftOuterJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d left outer join sales.emp e on d.deptno = e.deptno  where d.deptno > 7 and e.deptno > 9]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($16, 9)])
    LogicalJoin(condition=[=($7, $16)], joinType=[left])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($16, 9)])
    LogicalJoin(condition=[=($7, $16)], joinType=[left])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceRightOuterJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d right outer join sales.emp e on d.deptno = e.deptno  where d.deptno > 7 and e.deptno > 9]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($7, 7)])
    LogicalJoin(condition=[=($7, $16)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[>($7, 9)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[>($7, 7)])
    LogicalJoin(condition=[=($7, $16)], joinType=[right])
      LogicalFilter(condition=[>($7, 9)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[>($7, 9)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceFullOuterJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d full outer join sales.emp e on d.deptno = e.deptno  where d.deptno > 7 and e.deptno > 9]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[AND(>($7, 7), >($16, 9))])
    LogicalJoin(condition=[=($7, $16)], joinType=[full])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalFilter(condition=[AND(>($7, 7), >($16, 9))])
    LogicalJoin(condition=[=($7, $16)], joinType=[full])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferencePreventProjectPullUp">
        <Resource name="sql">
            <![CDATA[select 1 from (select comm as deptno from sales.emp where deptno > 7) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalProject(DEPTNO=[$6])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalProject(DEPTNO=[$6])
      LogicalFilter(condition=[>($7, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferencePullUpThruAlias">
        <Resource name="sql">
            <![CDATA[select 1 from (select comm as deptno from sales.emp where comm > 7) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalProject(DEPTNO=[$6])
      LogicalFilter(condition=[>($6, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalProject(DEPTNO=[$6])
      LogicalFilter(condition=[>($6, 7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceConjunctInPullUp">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno  where d.deptno in (7, 9) or d.deptno > 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[OR(=($7, 7), =($7, 9), >($7, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[OR(=($7, 7), =($7, 9), >($7, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[OR(=($7, 7), =($7, 9), >($7, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceNoPullUpExprs">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno  where d.deptno in (7, 9) or d.comm > 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[OR(=($7, 7), =($7, 9), >($6, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[OR(=($7, 7), =($7, 9), >($6, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceUnion3way">
        <Resource name="sql">
            <![CDATA[select 1 from (select deptno from sales.emp where deptno > 7 union all select deptno from sales.emp where deptno > 10 union all select deptno from sales.emp where deptno > 1) d inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalUnion(all=[true])
      LogicalUnion(all=[true])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 7)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 1)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $8)], joinType=[inner])
    LogicalUnion(all=[true])
      LogicalUnion(all=[true])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 7)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$7])
          LogicalFilter(condition=[>($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$7])
        LogicalFilter(condition=[>($7, 1)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[OR(>($7, 7), >($7, 10), >($7, 1))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceUnion3wayOr">
        <Resource name="sql">
            <![CDATA[
select 1 from (
    select empno, deptno from sales.emp where deptno > 7 or empno < 10
    union all
    select empno, deptno from sales.emp where deptno > 10 or empno < deptno
    union all
    select empno, deptno from sales.emp where deptno > 1) d
inner join sales.emp e on d.deptno = e.deptno ]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  JoinRel(condition=[=($1, $9)], joinType=[inner])
    UnionRel(all=[true])
      UnionRel(all=[true])
        ProjectRel(EMPNO=[$0], DEPTNO=[$7])
          FilterRel(condition=[OR(>($7, 7), <($0, 10))])
            TableAccessRel(table=[[CATALOG, SALES, EMP]])
        ProjectRel(EMPNO=[$0], DEPTNO=[$7])
          FilterRel(condition=[OR(>($7, 10), <($0, $7))])
            TableAccessRel(table=[[CATALOG, SALES, EMP]])
      ProjectRel(EMPNO=[$0], DEPTNO=[$7])
        FilterRel(condition=[>($7, 1)])
          TableAccessRel(table=[[CATALOG, SALES, EMP]])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  JoinRel(condition=[=($1, $9)], joinType=[inner])
    UnionRel(all=[true])
      UnionRel(all=[true])
        ProjectRel(EMPNO=[$0], DEPTNO=[$7])
          FilterRel(condition=[OR(>($7, 7), <($0, 10))])
            TableAccessRel(table=[[CATALOG, SALES, EMP]])
        ProjectRel(EMPNO=[$0], DEPTNO=[$7])
          FilterRel(condition=[OR(>($7, 10), <($0, $7))])
            TableAccessRel(table=[[CATALOG, SALES, EMP]])
      ProjectRel(EMPNO=[$0], DEPTNO=[$7])
        FilterRel(condition=[>($7, 1)])
          TableAccessRel(table=[[CATALOG, SALES, EMP]])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceConstantEquiPredicate">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno  where 1 = 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[=(1, 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[=(1, 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceConstantPredicate">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno  where 2 > 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  JoinRel(condition=[=($7, $16)], joinType=[inner])
    FilterRel(condition=[>(2, 1)])
      TableAccessRel(table=[[CATALOG, SALES, EMP]])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
ProjectRel(EXPR$0=[1])
  JoinRel(condition=[=($7, $16)], joinType=[inner])
    FilterRel(condition=[>(2, 1)])
      TableAccessRel(table=[[CATALOG, SALES, EMP]])
    TableAccessRel(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTransitiveInferenceComplexPredicate">
        <Resource name="sql">
            <![CDATA[select 1 from sales.emp d inner join sales.emp e on d.deptno = e.deptno  where d.deptno > 7 and e.sal = e.deptno and d.comm = d.deptno and d.comm + d.deptno > d.comm/2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[AND(>($7, 7), =($6, $7), >(+($6, $7), /($6, 2)))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[=($5, $7)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($7, $16)], joinType=[inner])
    LogicalFilter(condition=[AND(>($7, 7), =($6, $7), >(+($6, $7), /($6, 2)))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[>($7, 7)])
      LogicalFilter(condition=[=($5, $7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantIntoProject">
        <Resource name="sql">
            <![CDATA[select deptno, deptno + 1, empno + deptno from sales.emp where deptno = 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$7], EXPR$1=[+($7, 1)], EXPR$2=[+($0, $7)])
  LogicalFilter(condition=[=($7, 10)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[10], EXPR$1=[11], EXPR$2=[+($0, 10)])
  LogicalFilter(condition=[=($7, 10)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantIntoFilter">
        <Resource name="sql">
            <![CDATA[select * from (select * from sales.emp where deptno = 10) where deptno + 5 > empno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalFilter(condition=[>(+($7, 5), $0)])
      LogicalFilter(condition=[=($7, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalFilter(condition=[>(15, $0)])
      LogicalFilter(condition=[=($7, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantIntoJoin">
        <Resource name="sql">
            <![CDATA[select *
    from (select * from sales.emp where empno = 10) as e
    left join sales.dept as d on e.empno = d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($0, $9)], joinType=[left])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[true], joinType=[left])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalFilter(condition=[=($0, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullConstantIntoJoin2">
        <Resource name="sql">
            <![CDATA[select *
    from (select * from sales.emp where empno = 10) as e
    join sales.dept as d on e.empno = d.deptno and e.deptno + e.empno = d.deptno + 5]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[AND(=($0, $10), =($9, $12))], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, $0)])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
          LogicalFilter(condition=[=($0, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[+($0, 5)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[10], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[10], NAME=[$10])
  LogicalProject(EMPNO=[10], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[10], NAME=[$11])
    LogicalJoin(condition=[=($9, 15)], joinType=[inner])
      LogicalProject(EMPNO=[10], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 10)])
        LogicalProject(EMPNO=[10], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
          LogicalFilter(condition=[=($0, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[10], NAME=[$1], $f2=[15])
        LogicalFilter(condition=[=($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testStrengthenJoinType">
        <Resource name="sql">
            <![CDATA[select * from dept where exists (
  select * from emp
  where emp.deptno = dept.deptno
  and emp.sal > 100)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  LogicalJoin(condition=[=($0, $2)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO0=[$2], $f0=[true])
        LogicalJoin(condition=[=($1, $2)], joinType=[inner])
          LogicalProject(SAL=[$5], DEPTNO=[$7])
            LogicalFilter(condition=[>($5, 100)])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{0}])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  LogicalJoin(condition=[=($0, $2)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO0=[$2], $f0=[true])
        LogicalJoin(condition=[=($1, $2)], joinType=[inner])
          LogicalProject(SAL=[$5], DEPTNO=[$7])
            LogicalFilter(condition=[>($5, 100)])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{0}])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSemiJoinRule">
        <Resource name="sql">
            <![CDATA[select * from dept where exists (
  select * from emp
  where emp.deptno = dept.deptno
  and emp.sal > 100)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  LogicalJoin(condition=[=($0, $2)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO0=[$2], $f0=[true])
        LogicalJoin(condition=[=($1, $2)], joinType=[inner])
          LogicalProject(SAL=[$5], DEPTNO=[$7])
            LogicalFilter(condition=[>($5, 100)])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{0}])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
SemiJoin(condition=[=($0, $2)], joinType=[inner])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
  LogicalProject(DEPTNO0=[$2], $f0=[true])
    LogicalJoin(condition=[=($1, $2)], joinType=[inner])
      LogicalProject(SAL=[$5], DEPTNO=[$7])
        LogicalFilter(condition=[>($5, 100)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0}])
        LogicalProject(DEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSemiJoinTrim">
        <Resource name="sql">
            <![CDATA[select s.deptno from (select * from dept where exists (
  select * from emp
  where emp.deptno = dept.deptno
  and emp.sal > 100)) s join customer.account on s.deptno = account.acctno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[=($0, $2)], joinType=[inner])
    SemiJoin(condition=[=($0, $2)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(DEPTNO0=[$9], $f0=[true])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalFilter(condition=[>($5, 100)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{0}])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, CUSTOMER, ACCOUNT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    SemiJoin(condition=[=($0, $1)], joinType=[inner])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(DEPTNO0=[$2])
        LogicalJoin(condition=[=($1, $2)], joinType=[inner])
          LogicalFilter(condition=[>($0, 100)])
            LogicalProject(SAL=[$5], DEPTNO=[$7])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{0}])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalProject(ACCTNO=[$0])
      LogicalTableScan(table=[[CATALOG, CUSTOMER, ACCOUNT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateProjectMerge">
        <Resource name="sql">
            <![CDATA[select x, sum(z), y from (
  select deptno as x, empno as y, sal as z, sal * 2 as zz
  from emp)
group by x, y]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(X=[$0], EXPR$1=[$2], Y=[$1])
  LogicalAggregate(group=[{0, 1}], EXPR$1=[SUM($2)])
    LogicalProject(X=[$0], Y=[$1], Z=[$2])
      LogicalProject(X=[$7], Y=[$0], Z=[$5], ZZ=[*($5, 2)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(X=[$0], EXPR$1=[$2], Y=[$1])
  LogicalProject(DEPTNO=[$1], EMPNO=[$0], EXPR$1=[$2])
    LogicalAggregate(group=[{0, 7}], EXPR$1=[SUM($5)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateGroupingSetsProjectMerge">
        <Resource name="sql">
            <![CDATA[select x, sum(z), y from (
  select deptno as x, empno as y, sal as z, sal * 2 as zz
  from emp)
group by rollup(x, y)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(X=[$0], EXPR$1=[$4], Y=[$1])
  LogicalProject(X=[CASE($2, null, $0)], Y=[CASE($3, null, $1)], i$X=[$2], i$Y=[$3], EXPR$1=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$1=[SUM($2)])
      LogicalProject(X=[$0], Y=[$1], Z=[$2])
        LogicalProject(X=[$7], Y=[$0], Z=[$5], ZZ=[*($5, 2)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(X=[$0], EXPR$1=[$4], Y=[$1])
  LogicalProject(X=[CASE($2, null, $0)], Y=[CASE($3, null, $1)], i$X=[$2], i$Y=[$3], EXPR$1=[$4])
    LogicalProject(DEPTNO=[$1], EMPNO=[$0], i$DEPTNO=[$3], i$EMPNO=[$2], EXPR$1=[$4])
      LogicalAggregate(group=[{0, 7}], groups=[[{0, 7}, {7}, {}]], indicator=[true], EXPR$1=[SUM($5)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPullAggregateThroughUnion">
        <Resource name="sql">
            <![CDATA[select deptno, job from (select deptno, job from emp as e1 group by deptno,job  union all select deptno, job from emp as e2 group by deptno,job) group by deptno,job]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 1}])
  LogicalUnion(all=[true])
    LogicalAggregate(group=[{0, 1}])
      LogicalProject(DEPTNO=[$7], JOB=[$2])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0, 1}])
      LogicalProject(DEPTNO=[$7], JOB=[$2])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0, 1}])
  LogicalUnion(all=[true])
    LogicalProject(DEPTNO=[$7], JOB=[$2])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$7], JOB=[$2])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testProjectWindowTransposeRule">
        <Resource name="sql">
            <![CDATA[select count(empno) over(), deptno from emp]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$1], DEPTNO=[$0])
  LogicalProject(DEPTNO=[$1], $1=[$2])
    LogicalWindow(window#0=[window(partition {} order by [] range between UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING aggs [COUNT($0)])])
      LogicalProject(EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[COUNT($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)], DEPTNO=[$7])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testProjectWindowTransposeRuleWithConstants">
        <Resource name="sql">
            <![CDATA[select col1, col2
from (
  select empno,
    sum(100) over (partition by  deptno order by sal) as col1,
  sum(1000) over(partition by deptno order by sal) as col2
  from emp)]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(COL1=[$2], COL2=[$3])
  LogicalWindow(window#0=[window(partition {1} order by [0] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [SUM($2), SUM($3)])])
    LogicalProject(SAL=[$1], DEPTNO=[$2])
      LogicalProject(EMPNO=[$0], SAL=[$5], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(COL1=[$1], COL2=[$2])
  LogicalProject(EMPNO=[$0], COL1=[SUM(100) OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], COL2=[SUM(1000) OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterWithRank">
        <Resource name="sql">
            <![CDATA[select e1.ename, r
from (
  select ename,   rank() over(partition by  deptno order by sal) as r   from emp) e1
where r < 2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$0], R=[$1])
  LogicalFilter(condition=[<($1, 2)])
    LogicalProject(ENAME=[$1], R=[RANK() OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$0], R=[$1])
  LogicalFilter(condition=[<($1, 2)])
    LogicalProject(ENAME=[$1], R=[RANK() OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterWithRankExpr">
        <Resource name="sql">
            <![CDATA[select e1.ename, r
from (
  select ename,
  rank() over(partition by  deptno order by sal) + 1 as r   from emp) e1
where r < 2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(ENAME=[$0], R=[$1])
  LogicalFilter(condition=[<($1, 2)])
    LogicalProject(ENAME=[$1], R=[+(RANK() OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(ENAME=[$0], R=[$1])
  LogicalFilter(condition=[<($1, 2)])
    LogicalProject(ENAME=[$1], R=[+(RANK() OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCount1">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename) from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{1}], EXPR$1=[COUNT($0)])
  LogicalAggregate(group=[{1, 7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCount2">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename), sum(sal) from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)], EXPR$2=[SUM($2)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$1], EXPR$2=[CAST($2):INTEGER NOT NULL])
  LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1) FILTER $5], EXPR$2=[MIN($4) FILTER $6])
    LogicalProject(DEPTNO=[$0], ENAME=[$1], i$DEPTNO=[$2], i$ENAME=[$3], EXPR$2=[$4], $i0_1=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 3)], $i0=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 1)])
      LogicalProject(DEPTNO=[$1], ENAME=[$0], i$DEPTNO=[$3], i$ENAME=[$2], EXPR$2=[$4])
        LogicalAggregate(group=[{1, 7}], groups=[[{1, 7}, {7}]], indicator=[true], EXPR$2=[SUM($5)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountGroupingSets1">
        <Resource name="sql">
            <![CDATA[select deptno, job, count(distinct ename) from sales.emp group by rollup(deptno,job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT(DISTINCT $2)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4])
  LogicalAggregate(group=[{0, 1}], indicator=[true], EXPR$2=[COUNT($2)])
    LogicalAggregate(group=[{0, 1, 2}])
      LogicalProject(DEPTNO=[$7], JOB=[$2], ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountGroupingSets2">
        <Resource name="sql">
            <![CDATA[select deptno, job, count(distinct ename), sum(sal) from sales.emp group by rollup(deptno,job)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], JOB=[$1], EXPR$2=[$4], EXPR$3=[$5])
  LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], i$DEPTNO=[$2], i$JOB=[$3], EXPR$2=[$4], EXPR$3=[$5])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT(DISTINCT $2)], EXPR$3=[SUM($3)])
      LogicalProject(DEPTNO=[$7], JOB=[$2], ENAME=[$1], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[CASE($2, null, $0)], JOB=[CASE($3, null, $1)], EXPR$2=[$4], EXPR$3=[CAST($5):INTEGER NOT NULL])
  LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT($2) FILTER $7], EXPR$3=[MIN($6) FILTER $8])
    LogicalProject(DEPTNO=[$0], JOB=[$1], ENAME=[$2], i$DEPTNO=[$3], i$JOB=[$4], i$ENAME=[$5], EXPR$3=[$6], $i0_1_2=[=(+(+(CASE($3, 0, 1), CASE($4, 0, 2)), CASE($5, 0, 4)), 7)], $i0_1=[=(+(+(CASE($3, 0, 1), CASE($4, 0, 2)), CASE($5, 0, 4)), 3)])
      LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0, 1}]], indicator=[true], EXPR$3=[SUM($3)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], ENAME=[$1], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConvertMultiJoinRuleOuterJoins2">
        <Resource name="sql">
            <![CDATA[select * from A right join B on a = b join C on b = c]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2])
  LogicalJoin(condition=[=($1, $2)], joinType=[inner])
    LogicalJoin(condition=[=($0, $1)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, A]])
      LogicalTableScan(table=[[CATALOG, SALES, B]])
    LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
MultiJoin(joinFilter=[=($1, $2)], isFullOuterJoin=[false], joinTypes=[[INNER, INNER]], outerJoinConditions=[[NULL, NULL]], projFields=[[ALL, ALL]])
  MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[RIGHT, INNER]], outerJoinConditions=[[=($0, $1), NULL]], projFields=[[ALL, ALL]])
    LogicalTableScan(table=[[CATALOG, SALES, A]])
    LogicalTableScan(table=[[CATALOG, SALES, B]])
  LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConvertMultiJoinRuleOuterJoins3">
        <Resource name="sql">
            <![CDATA[select * from A join B on a = b left join C on b = c]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2])
  LogicalJoin(condition=[=($1, $2)], joinType=[left])
    LogicalJoin(condition=[=($0, $1)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, A]])
      LogicalTableScan(table=[[CATALOG, SALES, B]])
    LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
MultiJoin(joinFilter=[=($0, $1)], isFullOuterJoin=[false], joinTypes=[[INNER, INNER, LEFT]], outerJoinConditions=[[NULL, NULL, =($1, $2)]], projFields=[[ALL, ALL, ALL]])
  LogicalTableScan(table=[[CATALOG, SALES, A]])
  LogicalTableScan(table=[[CATALOG, SALES, B]])
  LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConvertMultiJoinRuleOuterJoins4">
        <Resource name="sql">
            <![CDATA[select * from A join B on a = b right join C on b = c]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2])
  LogicalJoin(condition=[=($1, $2)], joinType=[right])
    LogicalJoin(condition=[=($0, $1)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, A]])
      LogicalTableScan(table=[[CATALOG, SALES, B]])
    LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
MultiJoin(joinFilter=[true], isFullOuterJoin=[false], joinTypes=[[RIGHT, INNER]], outerJoinConditions=[[=($1, $2), NULL]], projFields=[[ALL, ALL]])
  MultiJoin(joinFilter=[=($0, $1)], isFullOuterJoin=[false], joinTypes=[[INNER, INNER]], outerJoinConditions=[[NULL, NULL]], projFields=[[ALL, ALL]])
    LogicalTableScan(table=[[CATALOG, SALES, A]])
    LogicalTableScan(table=[[CATALOG, SALES, B]])
  LogicalTableScan(table=[[CATALOG, SALES, C]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastAggTwo">
        <Resource name="sql">
            <![CDATA[select dept1.c1 from (
  select dept.name as c1, count(*) as c2
  from dept where dept.name > 'b' group by dept.name) dept1
where dept1.c1 > 'c' and (dept1.c2 > 30 or dept1.c1 < 'z')]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(C1=[$0])
  LogicalFilter(condition=[AND(>($0, 'c'), OR(>($1, 30), <($0, 'z')))])
    LogicalAggregate(group=[{0}], C2=[COUNT()])
      LogicalProject(C1=[$1])
        LogicalFilter(condition=[>($1, 'b')])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(C1=[$0])
  LogicalFilter(condition=[OR(>($1, 30), <($0, 'z'))])
    LogicalAggregate(group=[{0}], C2=[COUNT()])
      LogicalFilter(condition=[>($0, 'c')])
        LogicalProject(C1=[$1])
          LogicalFilter(condition=[>($1, 'b')])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastProject">
        <Resource name="sql">
            <![CDATA[select a.name
from dept a
left join dept b on b.deptno > 10
right join dept c on b.deptno > 10
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalJoin(condition=[$4], joinType=[right])
    LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3], $f4=[>($2, 10)])
      LogicalJoin(condition=[$4], joinType=[left])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[>($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalJoin(condition=[true], joinType=[right])
    LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3], $f4=[>($2, 10)])
      LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[CAST($2):INTEGER], NAME0=[CAST($3):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary"], $f2=[CAST($4):BOOLEAN])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
          LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[>($0, 10)])
            LogicalFilter(condition=[>($0, 10)])
              LogicalFilter(condition=[>($0, 10)])
                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinProjectTranspose">
        <Resource name="sql">
            <![CDATA[select a.name
from dept a
left join dept b on b.deptno > 10
right join dept c on b.deptno > 10
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalJoin(condition=[$4], joinType=[right])
    LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2], NAME0=[$3], $f4=[>($2, 10)])
      LogicalJoin(condition=[$4], joinType=[left])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[>($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalJoin(condition=[>($2, 10)], joinType=[right])
    LogicalJoin(condition=[>($2, 10)], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMergeFilter">
        <Resource name="sql">
            <![CDATA[select name from (
  select *
  from dept
  where deptno = 10)
where deptno = 10
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalFilter(condition=[=($0, 10)])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(NAME=[$1])
  LogicalProject(DEPTNO=[$0], NAME=[$1])
    LogicalFilter(condition=[=($0, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMergeJoinFilter">
        <Resource name="sql">
            <![CDATA[select * from (
  select d.deptno, e.ename
  from emp as e
  join dept as d
  on e.deptno = d.deptno
  and d.deptno = 10)
where deptno = 10
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], ENAME=[$1])
  LogicalFilter(condition=[=($0, 10)])
    LogicalProject(DEPTNO=[$9], ENAME=[$1])
      LogicalJoin(condition=[AND(=($7, $9), =($9, 10))], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], ENAME=[$1])
  LogicalProject(DEPTNO=[$9], ENAME=[$1])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsRequiresExecutor">
        <Resource name="sql">
            <![CDATA[select * from (values (1,2)) where 1 + 2 > 3 + CAST(NULL AS INTEGER)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalFilter(condition=[>(+(1, 2), +(3, null))])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
  LogicalFilter(condition=[>(+(1, 2), +(3, null))])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExpressionInWindowFunction">
        <Resource name="sql">
            <![CDATA[select
 sum(deptno) over(partition by deptno order by sal) as sum1,
sum(deptno + sal) over(partition by deptno order by sal) as sum2
from emp]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject($0=[$3], $1=[$4])
  LogicalWindow(window#0=[window(partition {1} order by [0] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [SUM($1), SUM($2)])])
    LogicalProject(SAL=[$5], DEPTNO=[$7], $2=[+($7, $5)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(SUM1=[SUM($7) OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], SUM2=[SUM(+($7, $5)) OVER (PARTITION BY $7 ORDER BY $5 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateThroughJoin1">
        <Resource name="sql">
            <![CDATA[select e.empno,d.deptno 
from (select * from sales.emp where empno = 10) as e join sales.dept as d on e.empno = d.deptno group by e.empno,d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 9}])
  LogicalJoin(condition=[=($0, $9)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalJoin(condition=[=($0, $1)], joinType=[inner])
  LogicalAggregate(group=[{0}])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalAggregate(group=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateThroughJoin2">
        <Resource name="sql">
            <![CDATA[select e.empno,d.deptno 
from (select * from sales.emp where empno = 10) as e join sales.dept as d on e.empno = d.deptno and e.deptno + e.empno = d.deptno + 5 group by e.empno,d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 10}])
  LogicalJoin(condition=[AND(=($0, $10), =($9, $12))], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, $0)])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[+($0, 5)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0, 2}])
  LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner])
    LogicalAggregate(group=[{0, 9}])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, $0)])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
          LogicalFilter(condition=[=($0, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0, 2}])
      LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[+($0, 5)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateThroughJoin3">
        <Resource name="sql">
            <![CDATA[select e.empno,d.deptno 
from (select * from sales.emp where empno = 10) as e join sales.dept as d on e.empno < d.deptno group by e.empno,d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0, 9}])
  LogicalJoin(condition=[<($0, $9)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0, 9}])
  LogicalJoin(condition=[<($0, $9)], joinType=[inner])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalFilter(condition=[=($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateSumThroughJoin">
        <Resource name="sql">
            <![CDATA[select e.empno,sum(sal) 
from (select * from sales.emp where empno = 10) as e join sales.dept as d on e.empno = d.deptno group by e.empno,d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[$2])
  LogicalAggregate(group=[{0, 9}], EXPR$1=[SUM($5)])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[$2])
  LogicalProject(EMPNO=[$0], DEPTNO=[$2], $f4=[$4])
    LogicalProject(EMPNO=[$0], EXPR$1=[$1], DEPTNO=[$2], $f1=[$3], $f4=[CAST(*($1, $3)):INTEGER NOT NULL])
      LogicalJoin(condition=[=($0, $2)], joinType=[inner])
        LogicalAggregate(group=[{0}], EXPR$1=[SUM($5)])
          LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
            LogicalFilter(condition=[=($0, 10)])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], agg#0=[COUNT()])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSwapOuterJoin">
        <Resource name="sql">
            <![CDATA[select 1 from sales.dept d left outer join sales.emp e on d.deptno = e.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalJoin(condition=[=($0, $9)], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(DEPTNO=[$9], NAME=[$10], EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO0=[$7], SLACKER=[$8])
    LogicalJoin(condition=[=($9, $7)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMultipleViaJoin">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename), count(distinct job, ename),
  count(distinct deptno, job), sum(sal)
 from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)], EXPR$2=[COUNT(DISTINCT $2, $1)], EXPR$3=[COUNT(DISTINCT $0, $2)], EXPR$4=[SUM($3)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1], JOB=[$2], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$3], EXPR$2=[$5], EXPR$3=[$7], EXPR$4=[$1])
  LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $6)], joinType=[inner])
    LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $4)], joinType=[inner])
      LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[inner])
        LogicalAggregate(group=[{7}], EXPR$4=[SUM($5)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{1}], EXPR$1=[COUNT($0)])
          LogicalAggregate(group=[{1, 7}])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{2}], EXPR$2=[COUNT($1, $0)])
        LogicalAggregate(group=[{1, 2, 7}])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{1}], EXPR$3=[COUNT($1, $0)])
      LogicalAggregate(group=[{2, 7}])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMultiple">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename), count(distinct job)
 from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)], EXPR$2=[COUNT(DISTINCT $2)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1], JOB=[$2])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1) FILTER $6], EXPR$2=[COUNT($2) FILTER $7])
  LogicalProject(DEPTNO=[$0], ENAME=[$1], JOB=[$2], i$DEPTNO=[$3], i$ENAME=[$4], i$JOB=[$5], $i0_1=[=(+(+(CASE($3, 0, 1), CASE($4, 0, 2)), CASE($5, 0, 4)), 3)], $i0_2=[=(+(+(CASE($3, 0, 1), CASE($4, 0, 2)), CASE($5, 0, 4)), 5)], $i0=[=(+(+(CASE($3, 0, 1), CASE($4, 0, 2)), CASE($5, 0, 4)), 1)])
    LogicalProject(DEPTNO=[$2], ENAME=[$0], JOB=[$1], i$DEPTNO=[$5], i$ENAME=[$3], i$JOB=[$4])
      LogicalAggregate(group=[{1, 2, 7}], groups=[[{1, 7}, {2, 7}, {7}]], indicator=[true])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMultipleNoGroup">
        <Resource name="sql">
            <![CDATA[select count(distinct ename), count(distinct job)
 from sales.emp]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT(DISTINCT $0)], EXPR$1=[COUNT(DISTINCT $1)])
  LogicalProject(ENAME=[$1], JOB=[$2])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT($0) FILTER $4], EXPR$1=[COUNT($1) FILTER $5])
  LogicalProject(ENAME=[$0], JOB=[$1], i$ENAME=[$2], i$JOB=[$3], $i0=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 1)], $i1=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 2)], $=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 0)])
    LogicalAggregate(group=[{1, 2}], groups=[[{1}, {2}, {}]], indicator=[true])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMixed">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct deptno, job) as cddj, sum(sal) as s
 from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], CDDJ=[COUNT(DISTINCT $0, $1)], S=[SUM($2)])
  LogicalProject(DEPTNO=[$7], JOB=[$2], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], CDDJ=[$1], S=[CAST($2):INTEGER NOT NULL])
  LogicalAggregate(group=[{0}], CDDJ=[COUNT($0, $1) FILTER $5], S=[MIN($4) FILTER $6])
    LogicalProject(DEPTNO=[$0], JOB=[$1], i$DEPTNO=[$2], i$JOB=[$3], S=[$4], $i0_1=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 3)], $i0=[=(+(CASE($2, 0, 1), CASE($3, 0, 2)), 1)])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}]], indicator=[true], S=[SUM($2)])
        LogicalProject(DEPTNO=[$7], JOB=[$2], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMixedJoin">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename), count(distinct job, ename),
  count(distinct deptno, job), sum(sal)
 from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)], EXPR$2=[COUNT(DISTINCT $2, $1)], EXPR$3=[COUNT(DISTINCT $0, $2)], EXPR$4=[SUM($3)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1], JOB=[$2], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$3], EXPR$2=[$5], EXPR$3=[$7], EXPR$4=[$1])
  LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $6)], joinType=[inner])
    LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $4)], joinType=[inner])
      LogicalJoin(condition=[IS NOT DISTINCT FROM($0, $2)], joinType=[inner])
        LogicalAggregate(group=[{7}], EXPR$4=[SUM($5)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{1}], EXPR$1=[COUNT($0)])
          LogicalAggregate(group=[{1, 7}])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{2}], EXPR$2=[COUNT($1, $0)])
        LogicalAggregate(group=[{1, 2, 7}])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{1}], EXPR$3=[COUNT($1, $0)])
      LogicalAggregate(group=[{2, 7}])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDistinctCountMixed2">
        <Resource name="sql">
            <![CDATA[select deptno, count(distinct ename) as cde,
  count(distinct job, ename) as cdje,
  count(distinct deptno, job) as cddj,
  sum(sal) as s
 from sales.emp group by deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{0}], CDE=[COUNT(DISTINCT $1)], CDJE=[COUNT(DISTINCT $2, $1)], CDDJ=[COUNT(DISTINCT $0, $2)], S=[SUM($3)])
  LogicalProject(DEPTNO=[$7], ENAME=[$1], JOB=[$2], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], CDE=[$1], CDJE=[$2], CDDJ=[$3], S=[CAST($4):INTEGER NOT NULL])
  LogicalAggregate(group=[{0}], CDE=[COUNT($1) FILTER $8], CDJE=[COUNT($2, $1) FILTER $7], CDDJ=[COUNT($0, $2) FILTER $9], S=[MIN($6) FILTER $10])
    LogicalProject(DEPTNO=[$2], ENAME=[$0], JOB=[$1], i$DEPTNO=[$5], i$ENAME=[$3], i$JOB=[$4], S=[$6], $i0_1_2=[=(+(+(CASE($5, 0, 1), CASE($3, 0, 2)), CASE($4, 0, 4)), 7)], $i0_1=[=(+(+(CASE($5, 0, 1), CASE($3, 0, 2)), CASE($4, 0, 4)), 3)], $i0_2=[=(+(+(CASE($5, 0, 1), CASE($3, 0, 2)), CASE($4, 0, 4)), 5)], $i0=[=(+(+(CASE($5, 0, 1), CASE($3, 0, 2)), CASE($4, 0, 4)), 1)])
      LogicalAggregate(group=[{1, 2, 7}], groups=[[{1, 2, 7}, {1, 7}, {2, 7}, {7}]], indicator=[true], S=[SUM($5)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushJoinCondDownToProject">
        <Resource name="sql">
            <![CDATA[select d.deptno, e.deptno from sales.dept d, sales.emp e where d.deptno + 10 = e.deptno * 2]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0], DEPTNO0=[$9])
  LogicalFilter(condition=[=(+($0, 10), *($9, 2))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0], DEPTNO0=[$9])
  LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[$3], ENAME=[$4], JOB=[$5], MGR=[$6], HIREDATE=[$7], SAL=[$8], COMM=[$9], DEPTNO0=[$10], SLACKER=[$11])
    LogicalJoin(condition=[=($2, $12)], joinType=[inner])
      LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[+($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[*($7, 2)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsNullEqualsOne">
        <Resource name="sql">
            <![CDATA[select count(1) from emp where cast(null as integer) = 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[=(null, 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalValues(tuples=[[]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsCaseEquals">
        <Resource name="sql">
            <![CDATA[select count(1) from emp
where case deptno
  when 20 then 2
  when 10 then 1
  else 3 end = 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[=(CASE(=($7, 20), 2, =($7, 10), 1, 3), 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[=($7, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsCaseEquals2">
        <Resource name="sql">
            <![CDATA[select count(1) from emp
where case deptno
  when 20 then 2
  when 10 then 1
  else cast(null as integer) end = 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[=(CASE(=($7, 20), 2, =($7, 10), 1, null), 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[CASE(=($7, 20), CAST(false):BOOLEAN, =($7, 10), CAST(true):BOOLEAN, null)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsCaseEquals3">
        <Resource name="sql">
            <![CDATA[select count(1) from emp
where case deptno
  when 30 then 1
  when 20 then 2
  when 10 then 1
  when 30 then 111
  else 0 end = 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[=(CASE(=($7, 30), 1, =($7, 20), 2, =($7, 10), 1, =($7, 30), 111, 0), 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[1])
    LogicalFilter(condition=[OR(=($7, 30), =($7, 10))])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushFilterPastAggThree">
        <Resource name="sql">
            <![CDATA[select deptno from emp group by deptno having count(*) > 1]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[>($1, 1)])
    LogicalAggregate(group=[{0}], agg#0=[COUNT()])
      LogicalProject(DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[>($1, 1)])
    LogicalAggregate(group=[{0}], agg#0=[COUNT()])
      LogicalProject(DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateFunctionsThroughJoin">
        <Resource name="sql">
            <![CDATA[select e.empno,
  min(sal) as min_sal, min(e.deptno) as min_deptno,
  sum(sal) + 1 as sum_sal_plus, max(sal) as max_sal,
  sum(sal) as sum_sal_2, count(sal) as count_sal,
  count(mgr) as count_mgr
from sales.emp as e
join sales.dept as d on e.empno = d.deptno
group by e.empno,d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], MIN_SAL=[$2], MIN_DEPTNO=[$3], SUM_SAL_PLUS=[+($4, 1)], MAX_SAL=[$5], SUM_SAL_2=[$4], COUNT_SAL=[$6], COUNT_MGR=[$7])
  LogicalAggregate(group=[{0, 9}], MIN_SAL=[MIN($5)], MIN_DEPTNO=[MIN($7)], SUM_SAL_2=[SUM($5)], MAX_SAL=[MAX($5)], COUNT_SAL=[COUNT()], COUNT_MGR=[COUNT($3)])
    LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], MIN_SAL=[$2], MIN_DEPTNO=[$3], SUM_SAL_PLUS=[+($4, 1)], MAX_SAL=[$5], SUM_SAL_2=[$4], COUNT_SAL=[$6], COUNT_MGR=[$7])
  LogicalProject(EMPNO=[$0], DEPTNO=[$7], MIN_SAL=[$1], MIN_DEPTNO=[$2], $f9=[$9], MAX_SAL=[$4], $f10=[$10], $f11=[$11])
    LogicalProject(EMPNO=[$0], MIN_SAL=[$1], MIN_DEPTNO=[$2], SUM_SAL_2=[$3], MAX_SAL=[$4], COUNT_SAL=[$5], COUNT_MGR=[$6], DEPTNO=[$7], $f1=[$8], $f9=[CAST(*($3, $8)):INTEGER NOT NULL], $f10=[*($5, $8)], $f11=[*($6, $8)])
      LogicalJoin(condition=[=($0, $7)], joinType=[inner])
        LogicalAggregate(group=[{0}], MIN_SAL=[MIN($5)], MIN_DEPTNO=[MIN($7)], SUM_SAL_2=[SUM($5)], MAX_SAL=[MAX($5)], COUNT_SAL=[COUNT()], COUNT_MGR=[COUNT($3)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], agg#0=[COUNT()])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateSumNoGroup">
        <Resource name="sql">
            <![CDATA[select count(*) from sales.emp join sales.dept using (deptno)]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[$SUM0($4)])
  LogicalProject(DEPTNO=[$0], EXPR$0=[$1], DEPTNO0=[$2], EXPR$00=[$3], $f4=[*($1, $3)])
    LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      LogicalAggregate(group=[{7}], EXPR$0=[COUNT()])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testPushAggregateThroughJoinDistinct">
        <Resource name="sql">
            <![CDATA[select d.deptno,
  sum(sal) as sum_sal, count(*) as c
from sales.emp as e
join (select distinct deptno from sales.dept) as d
  on e.empno = d.deptno
group by d.deptno]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalAggregate(group=[{9}], SUM_SAL=[SUM($5)], C=[COUNT()])
  LogicalJoin(condition=[=($0, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(DEPTNO=[$3], SUM_SAL=[$1], C=[$2])
  LogicalJoin(condition=[=($0, $3)], joinType=[inner])
    LogicalAggregate(group=[{0}], SUM_SAL=[SUM($5)], C=[COUNT()])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortJoinTranspose1">
        <Resource name="sql">
            <![CDATA[select * from sales.emp e left join (
select * from sales.dept d) using (deptno)
order by sal limit 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$5], dir0=[ASC], fetch=[10])
    LogicalJoin(condition=[=($7, $9)], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$5], dir0=[ASC], fetch=[10])
    LogicalJoin(condition=[=($7, $9)], joinType=[left])
      LogicalSort(sort0=[$5], dir0=[ASC], fetch=[10])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortJoinTranspose2">
        <Resource name="sql">
            <![CDATA[select * from sales.emp e right join (
select * from sales.dept d) using (deptno)
order by name]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$10], dir0=[ASC])
    LogicalJoin(condition=[=($7, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$10], dir0=[ASC])
    LogicalJoin(condition=[=($7, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalSort(sort0=[$1], dir0=[ASC])
        LogicalProject(DEPTNO=[$0], NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortJoinTranspose3">
        <Resource name="sql">
            <![CDATA[select * from sales.emp left join (
select * from sales.dept) using (deptno)
order by sal, name limit 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$5], sort1=[$10], dir0=[ASC], dir1=[ASC], fetch=[10])
    LogicalJoin(condition=[=($7, $9)], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$5], sort1=[$10], dir0=[ASC], dir1=[ASC], fetch=[10])
    LogicalJoin(condition=[=($7, $9)], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortJoinTranspose4">
        <Resource name="sql">
            <![CDATA[select * from sales.emp e right join (
select * from sales.dept d) using (deptno)
order by name]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$10], dir0=[ASC])
    LogicalJoin(condition=[=($7, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalSort(sort0=[$10], dir0=[ASC])
    LogicalJoin(condition=[=($7, $9)], joinType=[right])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalSort(sort0=[$1], dir0=[ASC])
        LogicalProject(DEPTNO=[$0], NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortUnionTranspose">
        <Resource name="sql">
            <![CDATA[select a.name from dept a
union all
select b.name from dept b
order by name limit 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
  LogicalProject(NAME=[$0])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
  LogicalUnion(all=[true])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[10])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReduceConstantsDup2">
        <Resource name="sql">
            <![CDATA[select *
from emp
where deptno=7 and deptno=8
and empno = 10 and mgr is null and empno = 10]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[AND(=($7, 7), =($7, 8), =($0, 10), IS NULL($3), =($0, 10))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalProject(EMPNO=[10], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[AND(=($7, 7), =($7, 8), =($0, 10), IS NULL($3), =($0, 10))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortUnionTranspose2">
        <Resource name="sql">
            <![CDATA[select a.name from dept a
union all
select b.name from dept b
order by name]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(NAME=[$0])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalUnion(all=[true])
    LogicalSort(sort0=[$0], dir0=[ASC])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalSort(sort0=[$0], dir0=[ASC])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortUnionTranspose3">
        <Resource name="sql">
            <![CDATA[select a.name from dept a
union all
select b.name from dept b
order by name limit 0]]>
        </Resource>
        <Resource name="planBefore">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[0])
  LogicalProject(NAME=[$0])
    LogicalUnion(all=[true])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalProject(NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="planAfter">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], fetch=[0])
  LogicalUnion(all=[true])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[0])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalSort(sort0=[$0], dir0=[ASC], fetch=[0])
      LogicalProject(NAME=[$0])
        LogicalProject(NAME=[$1])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
</Root>
