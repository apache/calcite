<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
    <TestCase name="testCase">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(=('a', 'a'), 1, null)])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (case 'a' when 'a' then 1 end)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[CASE(=(_ISO-8859-1'a', _ISO-8859-1'a'), 1, CAST(null):INTEGER)])
    OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroup">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$0])
  AggregateRel(groupCount=[1])
    ProjectRel($f0=[$7])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupJustOneAgg">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], SUM_SAL=[SUM($1)])
  LogicalProject(DEPTNO=[$7], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno, sum(sal) as sum_sal from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$0], EXPR$1=[$1])
  AggregateRel(groupCount=[1], agg#0=[SUM(1)])
    ProjectRel($f0=[$7], $f1=[$5])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupExpressionsInsideAndOut">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, 4)], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[*(2, $3)])
  LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)], agg#2=[COUNT()])
    LogicalProject(DEPTNO=[$7], SAL=[$5], $f2=[+(3, $5)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno + 4, sum(sal), sum(3 + sal), 2 * count(sal) from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[+($0, 4)], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[*(2, $3)])
  AggregateRel(groupCount=[1], agg#0=[SUM(1)], agg#1=[SUM(2)], agg#2=[COUNT(1)])
    ProjectRel($f0=[$7], $f1=[$5], $f2=[+(3, $5)])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testHaving">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], agg#1=[SUM($1)])
      LogicalProject($f0=[+($5, $5)], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal + sal) from emp having sum(sal) > 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  FilterRel(condition=[>($1, 10)])
    AggregateRel(groupCount=[0], agg#0=[SUM(0)], agg#1=[SUM(1)])
      ProjectRel($f0=[+($5, $5)], $f1=[$5])
        TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupBug281">
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$0])
  LogicalAggregate(group=[{0}])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select name from (select name from dept group by name)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(NAME=[$0])
  ProjectRel(NAME=[$0])
    AggregateRel(groupCount=[1])
      ProjectRel($f0=[$1])
        TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupBug281b">
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$1], FOO=[$2])
  LogicalProject(DEPTNO=[$1], NAME=[$0], FOO=[$2])
    LogicalAggregate(group=[{0, 1}], FOO=[COUNT()])
      LogicalProject(NAME=[$1], DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select name, foo from (select deptno, name, count(deptno) as foo from dept group by name, deptno, name)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(NAME=[$1], FOO=[$2])
  ProjectRel(DEPTNO=[$1], NAME=[$0], FOO=[$3])
    AggregateRel(groupCount=[3], agg#0=[COUNT(1)])
      ProjectRel($f0=[$1], $f1=[$0], $f2=[$1])
        TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggDistinct">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM(DISTINCT $1)], EXPR$3=[COUNT()])
  LogicalProject(DEPTNO=[$7], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno, sum(sal), sum(distinct sal), count(*) from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$0], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[$3])
  AggregateRel(groupCount=[1], agg#0=[SUM(1)], agg#1=[SUM(DISTINCT 1)], agg#2=[COUNT()])
    ProjectRel($f0=[$7], $f1=[$5])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnest">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Uncollect
    LogicalProject(EXPR$0=[$SLICE($0)])
      Collect(field=[EXPR$0])
        LogicalValues(tuples=[[{ 1 }, { 2 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(multiset[1,2])]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  UncollectRel
    ProjectRel(EXPR$0=[$SLICE($0)])
      CollectRel
        UnionRel(all=[true])
          ProjectRel(EXPR$0=[1])
            OneRowRel
          ProjectRel(EXPR$0=[2])
            OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestSubquery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  Uncollect
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(multiset(select*from dept))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$0], NAME=[$1])
  UncollectRel
    ProjectRel(EXPR$0=[$0])
      CollectRel
        ProjectRel(DEPTNO=[$0], NAME=[$1])
          TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultisetSubquery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalValues(tuples=[[{ true }]])
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select multiset(select deptno from dept) from (values(true))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$1])
  JoinRel(condition=[true], joinType=[inner])
    ProjectRel(EXPR$0=[$0])
      ProjectRel(EXPR$0=[true])
        OneRowRel
    CollectRel
      ProjectRel(DEPTNO=[$0])
        TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultiset">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=['a'], EXPR$1=[$SLICE($2)])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Collect(field=[EXPR$0])
      LogicalValues(tuples=[[{ 10 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 'a',multiset[10] from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[_ISO-8859-1'a'], EXPR$1=[$SLICE($2)])
  JoinRel(condition=[true], joinType=[inner])
    TableAccessRel(table=[[SALES, DEPT]])
    CollectRel
      UnionRel(all=[true])
        ProjectRel(EXPR$0=[10])
          OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultisetOfColumns">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=['abc'], EXPR$1=[$SLICE($9)])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{5, 7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    Collect(field=[EXPR$0])
      LogicalUnion(all=[true])
        LogicalProject(EXPR$0=[$cor0.DEPTNO])
          LogicalValues(tuples=[[{ 0 }]])
        LogicalProject(EXPR$0=[$cor0.SAL])
          LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 'abc',multiset[deptno,sal] from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[_ISO-8859-1'abc'], EXPR$1=[$SLICE($8)])
  CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset7, var1=offset5]])
    TableAccessRel(table=[[SALES, EMP]])
    CollectRel
      UnionRel(all=[true])
        ProjectRel(EXPR$0=[$cor0.DEPTNO])
          OneRowRel
        ProjectRel(EXPR$0=[$cor1.SAL])
          OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationJoin">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EMPSET=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Collect(field=[EXPR$0])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($7, $cor0.DEPTNO)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select *,         multiset(select * from emp where deptno=dept.deptno)                as empset      from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$0], NAME=[$1], EMPSET=[$2])
  CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset0]])
    TableAccessRel(table=[[SALES, DEPT]])
    CollectRel
      ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])
        FilterRel(condition=[=($7, $cor0.DEPTNO)])
          TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExists">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[=($0, 55)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from emp where exists (select 1 from dept where deptno=55)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])
  FilterRel(condition=[IS NULL($9)])
    JoinRel(condition=[true], joinType=[left])
      TableAccessRel(table=[[SALES, EMP]])
      ProjectRel(EXPR$0=[$0], $indicator=[true])
        ProjectRel(EXPR$0=[1])
          FilterRel(condition=[=($0, 55)])
            TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelated">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from emp where exists (select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7])
  FilterRel(condition=[IS NULL($9)])
    CorrelatorRel(condition=[true], joinType=[left], correlations=[[var0=offset7]])
      TableAccessRel(table=[[SALES, EMP]])
      ProjectRel(EXPR$0=[$0], $indicator=[true])
        ProjectRel(EXPR$0=[1])
          FilterRel(condition=[=($cor0.DEPTNO, $0)])
            TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestSelect">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Uncollect
    LogicalProject(EXPR$0=[$SLICE($2)])
      LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[$cor0.DEPTNO])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(select multiset[deptno] from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  UncollectRel
    ProjectRel(EXPR$0=[$0])
      ProjectRel(EXPR$0=[$SLICE($2)])
        CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset0]])
          TableAccessRel(table=[[SALES, DEPT]])
          CollectRel
            UnionRel(all=[true])
              ProjectRel(EXPR$0=[$cor0.DEPTNO])
                OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testLateral">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select * from emp, LATERAL (select * from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], DEPTNO0=[$8], NAME=[$9])
  CorrelatorRel(condition=[true], joinType=[inner], correlations=[[var0=offset7]])
    TableAccessRel(table=[[SALES, EMP]])
    ProjectRel(DEPTNO=[$0], NAME=[$1])
      FilterRel(condition=[=($cor0.DEPTNO, $0)])
        TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testElement">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[ELEMENT($SLICE($9))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    Collect(field=[EXPR$0])
      LogicalValues(tuples=[[{ 5 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select element(multiset[5]) from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[ELEMENT($SLICE($8))])
  JoinRel(condition=[true], joinType=[inner])
    TableAccessRel(table=[[SALES, EMP]])
    CollectRel
      UnionRel(all=[true])
        ProjectRel(EXPR$0=[5])
          OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testElementInValues">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[ELEMENT($SLICE($0))])
  Collect(field=[EXPR$0])
    LogicalValues(tuples=[[{ 5 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values element(multiset[5])]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[ELEMENT($SLICE($0))])
    CollectRel
      UnionRel(all=[true])
        ProjectRel(EXPR$0=[5])
          OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionAll">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select empno from emp union all select deptno from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
UnionRel(all=[true])
  ProjectRel(EMPNO=[$0])
    TableAccessRel(table=[[SALES, EMP]])
  ProjectRel(DEPTNO=[$0])
    TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnion">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[false])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select empno from emp union select deptno from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
UnionRel(all=[false])
  ProjectRel(EMPNO=[$0])
    TableAccessRel(table=[[SALES, EMP]])
  ProjectRel(DEPTNO=[$0])
    TableAccessRel(table=[[SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionValues">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalUnion(all=[true])
    LogicalValues(tuples=[[{ 10 }, { 20 }]])
    LogicalProject(EXPR$0=[34])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalUnion(all=[true])
    LogicalProject(EXPR$0=[30])
      LogicalValues(tuples=[[{ 0 }]])
    LogicalProject(EXPR$0=[+(45, 10)])
      LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (10), (20)
union all
select 34 from emp
union all values (30), (45 + 10)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
UnionRel(all=[true])
  UnionRel(all=[true])
    ProjectRel(EXPR$0=[$0])
      UnionRel(all=[true])
        ProjectRel(EXPR$0=[10])
          OneRowRel
        ProjectRel(EXPR$0=[20])
          OneRowRel
    ProjectRel(EXPR$0=[34])
      TableAccessRel(table=[[SALES, EMP]])
  ProjectRel(EXPR$0=[$0])
    UnionRel(all=[true])
      ProjectRel(EXPR$0=[30])
        OneRowRel
      ProjectRel(EXPR$0=[+(45, 10)])
        OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionSubquery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalUnion(all=[true])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$0])
          LogicalFilter(condition=[>($0, 20)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalValues(tuples=[[{ 45 }, { 67 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno from emp as emp0 cross join
 (select empno from emp union all
  select deptno from dept where deptno > 20 union all
  values (45), (67))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(DEPTNO=[$7])
  JoinRel(condition=[true], joinType=[inner])
    TableAccessRel(table=[[SALES, EMP]])
    UnionRel(all=[true])
      UnionRel(all=[true])
        ProjectRel(EMPNO=[$0])
          TableAccessRel(table=[[SALES, EMP]])
        ProjectRel(DEPTNO=[$0])
          FilterRel(condition=[>($0, 20)])
            TableAccessRel(table=[[SALES, DEPT]])
      ProjectRel(EXPR$0=[$0])
        UnionRel(all=[true])
          ProjectRel(EXPR$0=[45])
            OneRowRel
          ProjectRel(EXPR$0=[67])
            OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIsDistinctFrom">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(CASE(IS NULL(1), IS NOT NULL(2), IS NULL(2), IS NOT NULL(1), <>(1, 2))):BOOLEAN NOT NULL])
  LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 1 is distinct from 2 from (values(true))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[CASE(IS NULL(1), IS NOT NULL(2), IS NULL(2), IS NOT NULL(1), <>(1, 2))])
  ProjectRel(EXPR$0=[$0])
    ProjectRel(EXPR$0=[true])
      OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIsNotDistinctFrom">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(CASE(IS NULL(1), IS NULL(2), IS NULL(2), IS NULL(1), =(1, 2))):BOOLEAN NOT NULL])
  LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 1 is not distinct from 2 from (values(true))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[CASE(IS NULL(1), IS NULL(2), IS NULL(2), IS NULL(1), =(1, 2))])
  ProjectRel(EXPR$0=[$0])
    ProjectRel(EXPR$0=[true])
      OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotLike">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[NOT(LIKE('a', 'b', 'c'))])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values ('a' not like 'b' escape 'c')]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[NOT(LIKE(_ISO-8859-1'a', _ISO-8859-1'b', _ISO-8859-1'c'))])
    OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverMultiple">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[CASE(>(COUNT($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$2=[CASE(>=(COUNT() OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW), 2), CASE(>(COUNT($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)):INTEGER, null), null)])
  LogicalFilter(condition=[>(-($7, $5), 999)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  sum(deptno) over w1,
  sum(deptno) over w2
from emp
where deptno - sal > 999
window w1 as (partition by job order by hiredate rows 2 preceding),
  w2 as (partition by job order by hiredate rows 3 preceding disallow partial),
  w3 as (partition by job order by hiredate range interval '1' second preceding)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[SUM($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)], EXPR$1=[SUM($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)], EXPR$2=[SUM($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS 3 PRECEDING)])
  FilterRel(condition=[>(SUM(-($7, $5)) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING), 999)])
    TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharLength">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CHAR_LENGTH('foo')])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (character_length('foo'))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[CHAR_LENGTH(_ISO-8859-1'foo')])
    OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverAvg">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[CAST(/(CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null), COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW))):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  avg(sal) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[SUM($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)], EXPR$1=[CASE(=(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING), 0), CAST(null):INTEGER, /(SUM($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING), COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)))])
  TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverCountStar">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)], EXPR$1=[COUNT() OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select count(sal) over w1,
  count(*) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)], EXPR$1=[COUNT() OVER (PARTITION BY $2 ORDER BY $4 ROWS 2 PRECEDING)])
  TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIntegerLiteral">
        <Resource name="sql">
            <![CDATA[select 1 from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinct">
        <Resource name="sql">
            <![CDATA[select distinct sal + 5 from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[+($5, 5)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinctGroup">
        <Resource name="sql">
            <![CDATA[select distinct sum(sal) from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[$1])
    LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
      LogicalProject(DEPTNO=[$7], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExplicitTable">
        <Resource name="sql">
            <![CDATA[table emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTable">
        <Resource name="sql">
            <![CDATA[select * from table(ramp(3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(I=[$0])
  LogicalTableFunctionScan(invocation=[RAMP(3)], rowType=[RecordType(INTEGER I)])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInValueListShort">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (10, 20)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[OR(=($7, 10), =($7, 20))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInValueListLong">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalJoin(condition=[=($9, $10)], joinType=[inner])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalValues(tuples=[[{ 10 }, { 20 }, { 30 }, { 40 }, { 50 }, { 60 }, { 70 }, { 80 }, { 90 }, { 100 }, { 110 }, { 120 }, { 130 }, { 140 }, { 150 }, { 160 }, { 170 }, { 180 }, { 190 }, { 200 }, { 210 }, { 220 }, { 230 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubquery">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalJoin(condition=[=($9, $10)], joinType=[inner])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTableWithCursorParam">
        <Resource name="sql">
            <![CDATA[select * from table(dedup(cursor(select ename from emp), cursor(select name from dept), 'NAME'))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$0])
  LogicalTableFunctionScan(invocation=[DEDUP($0, $1, 'NAME')], rowType=[RecordType(VARCHAR(1024) NAME)])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrder">
        <Resource name="sql">
            <![CDATA[select empno from emp order by empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$0], dir0=[ASC])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderDescNullsLast">
        <Resource name="sql">
            <![CDATA[select empno from emp order by empno desc nulls last]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$0], dir0=[DESC-nulls-last])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAlias">
        <Resource name="sql">
            <![CDATA[select empno + 1 as x, empno - 2 as y from emp order by y]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], dir0=[ASC])
  LogicalProject(X=[+($0, 1)], Y=[-($0, 2)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByOrdinalDesc">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by 2.5 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], dir0=[DESC])
  LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByIdenticalExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1 from emp order by deptno asc, empno + 1 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Sort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByNegativeOrdinal">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by -1 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EMPNO=[$2])
  Sort(sort0=[$3], dir0=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0], EXPR$3=[-1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByOrdinalInExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by 1 + 2 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EMPNO=[$2])
  Sort(sort0=[$3], dir0=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0], EXPR$3=[+(1, 2)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasDoesNotObscure">
        <Resource name="sql">
            <![CDATA[select empno + 1 as empno, empno - 2 as y from emp order by empno + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EMPNO=[$0], Y=[$1])
  SortRel(sort0=[$2], dir0=[Ascending])
    ProjectRel(EMPNO=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+($0, 3)])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasInExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1 as x, empno - 2 as y from emp order by y + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(X=[$0], Y=[$1])
  Sort(sort0=[$2], dir0=[ASC])
    LogicalProject(X=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+(-($0, 2), 3)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasOverrides">
        <Resource name="sql">
            <![CDATA[select empno + 1 as empno, empno - 2 as y from emp order by empno + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], Y=[$1])
  Sort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+(+($0, 1), 3)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnion">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp union all select deptno, deptno from dept order by sal desc, empno asc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], sort1=[$0], dir0=[DESC], dir1=[ASC])
  LogicalProject(EMPNO=[$0], SAL=[$1])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnionExprs">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp union all select deptno, deptno from dept order by empno * sal + 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], SAL=[$1])
  Sort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[$0], SAL=[$1], EXPR$2=[+(*($0, $1), 2)])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderGroup">
        <Resource name="sql">
            <![CDATA[select deptno, count(*) from emp group by deptno order by deptno * sum(sal) desc, min(empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$1])
  Sort(sort0=[$2], sort1=[$3], dir0=[DESC], dir1=[ASC])
    LogicalProject(DEPTNO=[$0], EXPR$1=[$1], EXPR$2=[*($0, $2)], EXPR$3=[$3])
      LogicalAggregate(group=[{0}], EXPR$1=[COUNT()], agg#1=[SUM($1)], agg#2=[MIN($2)])
        LogicalProject(DEPTNO=[$7], SAL=[$5], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderDistinct">
        <Resource name="sql">
            <![CDATA[select distinct empno, deptno + 1 from emp order by deptno + 1 + empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[$1])
  Sort(sort0=[$2], dir0=[ASC])
    LogicalAggregate(group=[{0, 1, 2}])
      LogicalProject(EMPNO=[$0], EXPR$1=[+($7, 1)], EXPR$2=[+(+($7, 1), $0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderBySameExpr">
        <Resource name="sql">
            <![CDATA[select empno from emp, dept order by sal + empno desc, sal * empno, sal + empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  Sort(sort0=[$1], sort1=[$2], sort2=[$1], dir0=[DESC], dir1=[ASC], dir2=[ASC])
    LogicalProject(EMPNO=[$0], EXPR$1=[+($5, $0)], EXPR$2=[*($5, $0)])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnionOrdinal">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp union all select deptno, deptno from dept order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], dir0=[ASC])
  LogicalProject(EMPNO=[$0], SAL=[$1])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSample">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample substitute('DATASET1') where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample substitute('DATASET1')
 join dept on e.deptno = dept.deptno
) tablesample substitute('DATASET2')
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverOrderWindow">
        <Resource name="sql">
            <![CDATA[select last_value(deptno) over (order by empno)
from emp
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[LAST_VALUE($7) OVER (ORDER BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverOrderFollowingWindow">
        <Resource name="sql">
            <![CDATA[select last_value(deptno) over (order by empno rows 2 following)
from emp
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[LAST_VALUE($7) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInterval">
        <Resource name="sql">
            <![CDATA[values(cast(interval '1' hour as interval hour to second))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[3600000])
    OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverAvg2">
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  avg(CAST(sal as real)) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[/(CASE(>(COUNT(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):REAL, null), COUNT(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsing">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept USING (deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsingCompound">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp LEFT JOIN (SELECT *, deptno * 5 as empno FROM dept) USING (deptno,empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[$11])
  LogicalJoin(condition=[AND(=($7, $9), =($0, $11))], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[*($0, 5)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOn">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept on emp.deptno = dept.deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnIn">
        <Resource name="sql">
            <![CDATA[select * from emp join dept
 on emp.deptno = dept.deptno and emp.empno in (1, 3)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[AND(=($7, $9), OR(=($0, 1), =($0, 3)))], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleBernoulli">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample bernoulli(50) where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[bernoulli], rate=[0.5], repeatableSeed=[-])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleBernoulliQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample bernoulli(10) repeatable(1)
 join dept on e.deptno = dept.deptno
) tablesample bernoulli(50) repeatable(99)
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[bernoulli], rate=[0.5], repeatableSeed=[99])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          Sample(mode=[bernoulli], rate=[0.1], repeatableSeed=[1])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleSystem">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample system(50) where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[system], rate=[0.5], repeatableSeed=[-])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleSystemQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample system(10) repeatable(1)
 join dept on e.deptno = dept.deptno
) tablesample system(50) repeatable(99)
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[system], rate=[0.5], repeatableSeed=[99])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          Sample(mode=[system], rate=[0.1], repeatableSeed=[1])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinctDup">
        <Resource name="sql">
            <![CDATA[select distinct sal + 5, deptno, sal + 5 from emp where deptno < 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EXPR$2=[$0])
  LogicalAggregate(group=[{0, 1}])
    LogicalProject(EXPR$0=[$0], DEPTNO=[$1])
      LogicalProject(EXPR$0=[+($5, 5)], DEPTNO=[$7], EXPR$2=[+($5, 5)])
        LogicalFilter(condition=[<($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCountNoGroup">
        <Resource name="sql">
            <![CDATA[select count(*), sum(sal)
from emp
where empno > 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()], EXPR$1=[SUM($0)])
  LogicalProject(SAL=[$5])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAliasList">
        <Resource name="sql">
            <![CDATA[select a + b from (
  select deptno, 1 as one, name from dept
) as d(a, b, c)
where c like 'X%']]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, $1)])
  LogicalFilter(condition=[LIKE($2, 'X%')])
    LogicalProject(DEPTNO=[$0], ONE=[1], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAliasList2">
        <Resource name="sql">
            <![CDATA[select * from (
  select a, b, c from (values (1, 2, 3)) as t (c, b, a)
) join dept on dept.deptno = c
order by c + a]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2], DEPTNO=[$3], NAME=[$4])
  Sort(sort0=[$5], dir0=[ASC])
    LogicalProject(A=[$0], B=[$1], C=[$2], DEPTNO=[$3], NAME=[$4], EXPR$5=[+($2, $0)])
      LogicalJoin(condition=[=($3, $2)], joinType=[inner])
        LogicalProject(A=[$2], B=[$1], C=[$0])
          LogicalValues(tuples=[[{ 1, 2, 3 }]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinWithUnion">
        <Resource name="sql">
            <![CDATA[select grade from (select empno from emp union select deptno from dept), salgrade]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(GRADE=[$1])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalUnion(all=[false])
      LogicalProject(EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, SALGRADE]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNatural">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp NATURAL JOIN dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNaturalNoCommonColumn">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp NATURAL JOIN (SELECT deptno AS foo, name FROM dept) AS d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOO=[$9], NAME=[$10])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(FOO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNaturalMultipleCommonColumn">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp NATURAL JOIN (SELECT deptno, name AS ename FROM dept) AS d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], ENAME0=[$10])
  LogicalJoin(condition=[AND(=($1, $10), =($7, $9))], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderOffsetFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp order by empno offset 10 rows fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$0], dir0=[ASC], offset=[10], fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOffsetFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp offset 10 rows fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(offset=[10], fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOffset">
        <Resource name="sql">
            <![CDATA[select empno from emp offset 10 rows]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(offset=[10])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultiAnd">
        <Resource name="sql">
            <![CDATA[select * from emp
where deptno < 10
and deptno > 5
and (deptno = 8 or empno < 100)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[AND(<($7, 10), >($7, 5), OR(=($7, 8), <($0, 100)))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsingThreeWay">
        <Resource name="sql">
            <![CDATA[select *
from emp as e
join dept as d using (deptno)
join emp as e2 using (empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[$11], ENAME0=[$12], JOB0=[$13], MGR0=[$14], HIREDATE0=[$15], SAL0=[$16], COMM0=[$17], DEPTNO1=[$18], SLACKER0=[$19])
  LogicalJoin(condition=[=($0, $11)], joinType=[inner])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnExpression">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept on emp.deptno + 1 = dept.deptno - 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($9, $12)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 1)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[-($0, 2)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDuplicateColumnsInSubQuery">
        <Resource name="sql">
            <![CDATA[select "e" from (
select empno as "e", deptno as d, 1 as "e" from EMP)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(e=[$0])
  LogicalProject(e=[$0], D=[$7], e0=[1])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWith">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp)
select * from emp2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithUnion">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp where deptno > 10)
select empno from emp2 where deptno < 30 union all select deptno from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(EMPNO=[$0])
    LogicalFilter(condition=[<($7, 30)])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[>($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExists">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor1], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[<=($0, $cor1.DEPTNO)])
              LogicalProject(DEPTNO=[$0], NAME=[$1])
                LogicalFilter(condition=[>=($0, $cor1.DEPTNO)])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideScalarSubquery">
        <Resource name="sql">
            <![CDATA[select (
 with dept2 as (select * from dept where deptno > 10) select count(*) from dept2) as c
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(C=[$9])
  LogicalJoin(condition=[true], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
      LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
        LogicalProject($f0=[0])
          LogicalProject(DEPTNO=[$0], NAME=[$1])
            LogicalFilter(condition=[>($0, 10)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateNoGroup">
        <Resource name="sql">
            <![CDATA[select sum(deptno) from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConditionOffByOneReversed">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept on dept.deptno = emp.deptno + 0]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($10, $9)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConditionOffByOne">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept on emp.deptno + 0 = dept.deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($9, $10)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testLateralDecorrelate">
        <Resource name="sql">
            <![CDATA[select * from emp, LATERAL (select * from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $11)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], $f0=[$2])
      LogicalFilter(condition=[=($2, $0)])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
          LogicalAggregate(group=[{0}])
            LogicalProject($f0=[$7])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedCorrelations">
        <Resource name="sql">
            <![CDATA[select * from (select 2+deptno d2, 3+deptno d3 from emp) e
 where exists (select 1 from (select deptno+1 d1 from dept) d
 where d1=e.d2 and exists (select 2 from (select deptno+4 d4, deptno+5 d5, deptno+6 d6 from dept)
 where d4=d.d1 and d5=d.d1 and d6=e.d3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(D2=[$0], D3=[$1])
  LogicalFilter(condition=[IS NOT NULL($2)])
    LogicalCorrelate(correlation=[$cor3], joinType=[LEFT], requiredColumns=[{0, 1}])
      LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[AND(=($0, $cor3.D2), IS NOT NULL($1))])
              LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{0}])
                LogicalProject(D1=[+($0, 1)])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                LogicalAggregate(group=[{}], agg#0=[MIN($0)])
                  LogicalProject($f0=[true])
                    LogicalProject(EXPR$0=[2])
                      LogicalFilter(condition=[AND(=($0, $cor0.D1), =($1, $cor0.D1), =($2, $cor3.D3))])
                        LogicalProject(D4=[+($0, 4)], D5=[+($0, 5)], D6=[+($0, 6)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedCorrelationsDecorrelated">
        <Resource name="sql">
            <![CDATA[select * from (select 2+deptno d2, 3+deptno d3 from emp) e
 where exists (select 1 from (select deptno+1 d1 from dept) d
 where d1=e.d2 and exists (select 2 from (select deptno+4 d4, deptno+5 d5, deptno+6 d6 from dept)
 where d4=d.d1 and d5=d.d1 and d6=e.d3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(D2=[$0], D3=[$1])
  LogicalFilter(condition=[IS NOT NULL($2)])
    LogicalProject(D2=[$0], D3=[$1], $f0=[$4])
      LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[left])
        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])
          LogicalProject($f00=[$1], $f03=[$2], $f0=[$0])
            LogicalProject($f0=[true], $f00=[$1], $f03=[$2])
              LogicalProject(EXPR$0=[1], $f00=[$3], $f03=[$2])
                LogicalFilter(condition=[AND(=($0, $3), IS NOT NULL($1))])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalProject(D1=[$0], $f0=[$4], $f03=[$3])
                      LogicalJoin(condition=[AND(=($0, $1), =($0, $2))], joinType=[left])
                        LogicalProject(D1=[+($0, 1)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                        LogicalAggregate(group=[{0, 1, 2}], agg#0=[MIN($3)])
                          LogicalProject(D1=[$1], D12=[$2], $f03=[$3], $f0=[$0])
                            LogicalProject($f0=[true], D1=[$1], D12=[$2], $f03=[$3])
                              LogicalProject(EXPR$0=[2], D1=[$3], D12=[$3], $f0=[$4])
                                LogicalFilter(condition=[AND(=($0, $3), =($1, $3), =($2, $4))])
                                  LogicalJoin(condition=[true], joinType=[inner])
                                    LogicalProject(D4=[+($0, 4)], D5=[+($0, 5)], D6=[+($0, 6)])
                                      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                    LogicalJoin(condition=[true], joinType=[inner])
                                      LogicalAggregate(group=[{0}])
                                        LogicalProject(D1=[+($0, 1)])
                                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                      LogicalAggregate(group=[{0}])
                                        LogicalProject($f0=[$1])
                                          LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                                            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                    LogicalAggregate(group=[{0}])
                      LogicalProject($f0=[$0])
                        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExistsDecorrelate">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$11])
      LogicalJoin(condition=[AND(=($7, $9), =($7, $10))], joinType=[left])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])
          LogicalProject($f00=[$1], $f02=[$2], $f0=[$0])
            LogicalProject($f0=[true], $f00=[$1], $f02=[$2])
              LogicalProject(EXPR$0=[1], $f00=[$3], $f0=[$2])
                LogicalFilter(condition=[<=($0, $3)])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalProject(DEPTNO=[$0], NAME=[$1], $f0=[$2])
                      LogicalFilter(condition=[>=($0, $2)])
                        LogicalJoin(condition=[true], joinType=[inner])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                          LogicalAggregate(group=[{0}])
                            LogicalProject($f0=[$7])
                              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                    LogicalAggregate(group=[{0}])
                      LogicalProject($f0=[$7])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedDecorrelate">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$10])
      LogicalJoin(condition=[=($7, $9)], joinType=[left])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject($f01=[$1], $f0=[$0])
            LogicalProject($f0=[true], $f01=[$1])
              LogicalProject(EXPR$0=[1], $f0=[$2])
                LogicalFilter(condition=[=($2, $0)])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                    LogicalAggregate(group=[{0}])
                      LogicalProject($f0=[$7])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedLimit">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          Sort(fetch=[1])
            LogicalProject(EXPR$0=[1])
              LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedLimitDecorrelate">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$9])
      LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{}], agg#0=[MIN($0)])
          LogicalProject($f0=[true])
            Sort(fetch=[1])
              LogicalProject(EXPR$0=[1])
                LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUnnest">
        <Resource name="sql">
            <![CDATA[select*from dept as d, unnest(multiset[d.deptno * 2])]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EXPR$0=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Uncollect
      LogicalProject(EXPR$0=[$SLICE($0)])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[*($cor0.DEPTNO, 2)])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithAlias">
        <Resource name="sql">
            <![CDATA[with w(x, y) as (select * from dept where deptno > 10)
select x from w where x < 30 union all select deptno from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(X=[$0])
    LogicalFilter(condition=[<($0, 30)])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalFilter(condition=[>($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithOrder">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp)
select * from emp2 order by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$7], dir0=[ASC])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithUnionOrder">
        <Resource name="sql">
            <![CDATA[with emp2 as (select empno, deptno as x from emp)
select * from emp2
union all
select * from emp2
order by empno + x]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], X=[$1])
  Sort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[$0], X=[$1], EXPR$2=[+($0, $1)])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0], X=[$1])
          LogicalProject(EMPNO=[$0], X=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(EMPNO=[$0], X=[$1])
          LogicalProject(EMPNO=[$0], X=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubqueryInSelect">
        <Resource name="sql">
            <![CDATA[select name, deptno in (
  select case when true then deptno else null end from emp)
from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$1], EXPR$1=[CASE(=($2, 0), false, IS NOT NULL($6), true, IS NULL($4), null, <($3, $2), null, false)])
  LogicalJoin(condition=[=($4, $5)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$0])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
          LogicalProject($f0=[$0], $f1=[true])
            LogicalProject(EXPR$0=[CASE(true, CAST($7):INTEGER, null)])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(EXPR$0=[CASE(true, CAST($7):INTEGER, null)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubqueryInSelect">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select case when true then deptno else null end from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(CASE(=($9, 0), false, IS NOT NULL($13), true, IS NULL($11), null, <($10, $9), null, false))])
  LogicalJoin(condition=[=($11, $12)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$10], $f11=[$7])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
          LogicalProject($f0=[$0], $f1=[true])
            LogicalProject(EXPR$0=[CASE(true, CAST($0):INTEGER, null)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(EXPR$0=[CASE(true, CAST($0):INTEGER, null)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubquery">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno not in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[NOT(CASE(=($9, 0), false, IS NOT NULL($13), true, IS NULL($11), null, <($10, $9), null, false))])
    LogicalJoin(condition=[=($11, $12)], joinType=[left])
      LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$10], $f11=[$7])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
            LogicalProject($f0=[$0], $f1=[true])
              LogicalProject(DEPTNO=[$0])
                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
        LogicalProject($f0=[$0], $f1=[true])
          LogicalProject(DEPTNO=[$0])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubqueryInSelectNotNull">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select deptno from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(true)])
  LogicalJoin(condition=[=($9, $10)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(DEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortWithTrim">
        <Resource name="sql">
            <![CDATA[select ename from (select * from emp order by sal) a]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(ENAME=[$0])
  Sort(sort0=[$1], dir0=[ASC])
    LogicalProject(ENAME=[$1], SAL=[$5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupAlias">
        <Resource name="sql">
            <![CDATA[select "$f2", max(x), max(x + 1)
from (values (1, 2)) as t("$f2", x)
group by "$f2"]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)], EXPR$2=[MAX($2)])
  LogicalProject($f2=[$0], EXPR$1=[$1], $f3=[+($1, 1)])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSingletonGroupingSet">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp group by grouping sets (deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
    LogicalProject(DEPTNO=[$7], SAL=[$5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupEmpty">
        <Resource name="sql">
            <![CDATA[select sum(deptno) from emp group by ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByWithDuplicates">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp group by (), ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSets">
        <Resource name="sql">
            <![CDATA[select deptno, ename, sum(sal) from emp
group by grouping sets ((deptno), (ename, deptno))
order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], dir0=[ASC])
  LogicalProject(DEPTNO=[$0], ENAME=[$1], EXPR$2=[$4])
    LogicalProject(DEPTNO=[$0], ENAME=[CASE($3, null, $1)], i$DEPTNO=[$2], i$ENAME=[$3], EXPR$2=[$4])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}]], indicator=[true], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], ENAME=[$1], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDuplicateGroupingSets">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp
group by sal,
  grouping sets (deptno,
    grouping sets ((deptno, ename), ename),
      (ename)),
  ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$6])
  LogicalProject(SAL=[$0], DEPTNO=[CASE($4, null, $1)], ENAME=[CASE($5, null, $2)], i$SAL=[$3], i$DEPTNO=[$4], i$ENAME=[$5], EXPR$0=[$6])
    LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0, 1}, {0, 2}]], indicator=[true], EXPR$0=[SUM($0)])
      LogicalProject(SAL=[$5], DEPTNO=[$7], ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsCartesianProduct">
        <Resource name="sql">
            <![CDATA[select 1 from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by grouping sets (a, b), grouping sets (c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 2}, {0, 3}, {1, 2}, {1, 3}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsCartesianProduct2">
        <Resource name="sql">
            <![CDATA[select 1 from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by grouping sets (a, (a, b)), grouping sets (c), d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[$0], EXPR$1=[CASE($5, null, $1)], EXPR$2=[$2], EXPR$3=[$3], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 2, 3}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollup">
        <Resource name="sql">
            <![CDATA[select 1 from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by rollup(a, b), rollup(c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0, 2, 3}, {0, 2}, {0}, {2, 3}, {2}, {}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCube">
        <Resource name="sql">
            <![CDATA[select 1 from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by cube(a, b)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($2, null, $0)], EXPR$1=[CASE($3, null, $1)], i$EXPR$0=[$2], i$EXPR$1=[$3])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {1}, {}]], indicator=[true])
      LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
        LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollupTuples">
        <Resource name="sql">
            <![CDATA[select 1 from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by rollup(b, (a, d))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$1=[CASE($3, null, $0)], EXPR$0=[CASE($4, null, $1)], EXPR$3=[CASE($5, null, $2)], i$EXPR$1=[$3], i$EXPR$0=[$4], i$EXPR$3=[$5])
    LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0}, {}]], indicator=[true])
      LogicalProject(EXPR$1=[$1], EXPR$0=[$0], EXPR$3=[$3])
        LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsWith">
        <Resource name="sql">
            <![CDATA[with t(a, b, c, d) as (values (1, 2, 3, 4))
select 1 from t
group by rollup(a, b), rollup(c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0, 2, 3}, {0, 2}, {0}, {2, 3}, {2}, {}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollupSimple">
        <Resource name="sql">
            <![CDATA[select a, b, count(*) as c
from (values (cast(null as integer), 2)) as t(a, b)
group by rollup(a, b)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$4])
  LogicalProject(A=[CASE($2, null, $0)], B=[CASE($3, null, $1)], i$A=[$2], i$B=[$3], C=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], C=[COUNT()])
      LogicalProject(A=[null], B=[2])
        LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByExpression">
        <Resource name="sql">
            <![CDATA[select count(*) from emp group by substring(ename FROM 1 FOR 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
    LogicalProject($f0=[SUBSTRING($1, 1, 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsProduct">
        <Resource name="sql">
            <![CDATA[select 1
from (values (0, 1, 2, 3, 4)) as t(a, b, c, x, y)
group by grouping sets ((a, b), c), grouping sets ((x, y), ())]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($5, null, $0)], EXPR$1=[CASE($6, null, $1)], EXPR$2=[CASE($7, null, $2)], EXPR$3=[CASE($8, null, $3)], EXPR$4=[CASE($9, null, $4)], i$EXPR$0=[$5], i$EXPR$1=[$6], i$EXPR$2=[$7], i$EXPR$3=[$8], i$EXPR$4=[$9])
    LogicalAggregate(group=[{0, 1, 2, 3, 4}], groups=[[{0, 1, 3, 4}, {0, 1}, {2, 3, 4}, {2}]], indicator=[true])
      LogicalValues(tuples=[[{ 0, 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingFunctionWithGroupBy">
        <Resource name="sql">
            <![CDATA[select deptno, grouping(deptno), count(*), grouping(empno)
from emp
group by empno, deptno
order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
Sort(sort0=[$1], dir0=[ASC])
  LogicalProject(DEPTNO=[$1], EXPR$1=[1], EXPR$2=[$2], EXPR$3=[1])
    LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()])
      LogicalProject(EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingFunction">
        <Resource name="sql">
            <![CDATA[select deptno, grouping(deptno), count(*), grouping(empno)
from emp
group by rollup(empno, deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$1], EXPR$1=[CASE($3, 1, 0)], EXPR$2=[$4], EXPR$3=[CASE($2, 1, 0)])
  LogicalProject(EMPNO=[CASE($2, null, $0)], DEPTNO=[CASE($3, null, $1)], i$EMPNO=[$2], i$DEPTNO=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT()])
      LogicalProject(EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTableExtend">
        <Resource name="sql">
            <![CDATA[select * from dept extend (x varchar(5) not null)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], X=[$2])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByCaseSubquery">
        <Resource name="sql">
            <![CDATA[SELECT CASE WHEN emp.empno IN (3) THEN 0 ELSE 1 END
FROM emp
GROUP BY (CASE WHEN emp.empno IN (3) THEN 0 ELSE 1 END)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[CASE(=($0, 3), 0, 1)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggCaseSubquery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(CASE WHEN empno IN (3) THEN 0 ELSE 1 END) FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject($f0=[CASE(=($0, 3), 0, 1)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggCaseInSubquery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(
  CASE WHEN deptno IN (SELECT deptno FROM dept) THEN 1 ELSE 0 END)
FROM emp]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggScalarSubquery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(SELECT min(deptno) FROM dept) FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  LogicalJoin(condition=[true], joinType=[left])
    LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
      LogicalProject(EXPR$0=[$9])
        LogicalJoin(condition=[true], joinType=[left])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
</Root>
