<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
    <TestCase name="testCase">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(=('a', 'a'), 1, null)])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (case 'a' when 'a' then 1 end)]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroup">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno from emp group by deptno]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupJustOneAgg">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], SUM_SAL=[SUM($1)])
  LogicalProject(DEPTNO=[$7], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno, sum(sal) as sum_sal from emp group by deptno]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupExpressionsInsideAndOut">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, 4)], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[*(2, $3)])
  LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)], agg#2=[COUNT()])
    LogicalProject(DEPTNO=[$7], SAL=[$5], $f2=[+(3, $5)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select
  deptno + 4, sum(sal), sum(3 + sal), 2 * count(sal)
from emp group by deptno]]>
        </Resource>
    </TestCase>
    <TestCase name="testHaving">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], agg#1=[SUM($1)])
      LogicalProject($f0=[+($5, $5)], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal + sal) from emp having sum(sal) > 10]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupBug281">
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$0])
  LogicalAggregate(group=[{0}])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select name from (select name from dept group by name)]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupBug281b">
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$1], FOO=[$2])
  LogicalProject(DEPTNO=[$1], NAME=[$0], FOO=[$2])
    LogicalAggregate(group=[{0, 1}], FOO=[COUNT()])
      LogicalProject(NAME=[$1], DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select name, foo from (
select deptno, name, count(deptno) as foo
from dept
group by name, deptno, name)]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggDistinct">
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM(DISTINCT $1)], EXPR$3=[COUNT()])
  LogicalProject(DEPTNO=[$7], SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno, sum(sal), sum(distinct sal), count(*)
from emp
group by deptno]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTableWithLateral">
        <Resource name="sql">
            <![CDATA[select * from dept, lateral table(ramp(dept.deptno))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], I=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableFunctionScan(invocation=[RAMP($cor0.DEPTNO)], rowType=[RecordType(INTEGER I)])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTableWithLateral2">
        <Resource name="sql">
            <![CDATA[select * from dept, lateral table(ramp(deptno))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], I=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableFunctionScan(invocation=[RAMP($cor0.DEPTNO)], rowType=[RecordType(INTEGER I)])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelatedSubQueryInAggregate">
        <Resource name="sql">
            <![CDATA[SELECT SUM(
  (select char_length(name) from dept
   where dept.deptno = emp.empno))
FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject($f0=[$SCALAR_QUERY({
LogicalProject(EXPR$0=[CHAR_LENGTH($1)])
  LogicalFilter(condition=[=($0, $cor0.EMPNO)])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelatedSubQueryInJoin">
        <Resource name="sql">
            <![CDATA[select *
from emp as e
join dept as d using (deptno)
where d.name = (
  select max(name)
  from dept as d2
  where d2.deptno = d.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[=($10, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(NAME=[$1])
    LogicalFilter(condition=[=($0, $cor0.DEPTNO0)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
}))], variablesSet=[[$cor0]])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnest">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Uncollect
    LogicalProject(EXPR$0=[$SLICE($0)])
      Collect(field=[EXPR$0])
        LogicalValues(tuples=[[{ 1 }, { 2 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(multiset[1,2])]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestSubQuery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  Uncollect
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(multiset(select*from dept))]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestArray">
        <Resource name="sql">
            <![CDATA[select*from unnest(array(select*from dept))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1])
  Uncollect
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestWithOrdinality">
        <Resource name="sql">
            <![CDATA[select*from unnest(array(select*from dept)) with ordinality]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], ORDINALITY=[$2])
  Uncollect(withOrdinality=[true])
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultisetSubQuery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalValues(tuples=[[{ true }]])
    Collect(field=[EXPR$0])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select multiset(select deptno from dept) from (values(true))]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultiset">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=['a'], EXPR$1=[$SLICE($2)])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Collect(field=[EXPR$0])
      LogicalValues(tuples=[[{ 10 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 'a',multiset[10] from dept]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultisetOfColumns">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=['abc'], EXPR$1=[$SLICE($9)])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{5, 7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    Collect(field=[EXPR$0])
      LogicalUnion(all=[true])
        LogicalProject(EXPR$0=[$cor0.DEPTNO])
          LogicalValues(tuples=[[{ 0 }]])
        LogicalProject(EXPR$0=[$cor0.SAL])
          LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 'abc',multiset[deptno,sal] from emp]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationJoin">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EMPSET=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Collect(field=[EXPR$0])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($7, $cor0.DEPTNO)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select *,
  multiset(select * from emp where deptno=dept.deptno) as empset
from dept]]>
        </Resource>
    </TestCase>
    <TestCase name="testExists">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[=($0, 55)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from emp
where exists (select 1 from dept where deptno=55)]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelated">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestSelect">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Uncollect
    LogicalProject(EXPR$0=[$SLICE($2)])
      LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[$cor0.DEPTNO])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select*from unnest(select multiset[deptno] from dept)]]>
        </Resource>
    </TestCase>
    <TestCase name="testLateral">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select * from emp,
  LATERAL (select * from dept where emp.deptno=dept.deptno)]]>
        </Resource>
    </TestCase>
    <TestCase name="testElement">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[ELEMENT($SLICE($9))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    Collect(field=[EXPR$0])
      LogicalValues(tuples=[[{ 5 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select element(multiset[5]) from emp]]>
        </Resource>
    </TestCase>
    <TestCase name="testElementInValues">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[ELEMENT($SLICE($0))])
  Collect(field=[EXPR$0])
    LogicalValues(tuples=[[{ 5 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values element(multiset[5])]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionAll">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select empno from emp union all select deptno from dept]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnion">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[false])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select empno from emp union select deptno from dept]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionValues">
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalUnion(all=[true])
    LogicalValues(tuples=[[{ 10 }, { 20 }]])
    LogicalProject(EXPR$0=[34])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalUnion(all=[true])
    LogicalProject(EXPR$0=[30])
      LogicalValues(tuples=[[{ 0 }]])
    LogicalProject(EXPR$0=[+(45, 10)])
      LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (10), (20)
union all
select 34 from emp
union all values (30), (45 + 10)]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionSubQuery">
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalUnion(all=[true])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$0])
          LogicalFilter(condition=[>($0, 20)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
      LogicalValues(tuples=[[{ 45 }, { 67 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select deptno from emp as emp0 cross join
 (select empno from emp union all
  select deptno from dept where deptno > 20 union all
  values (45), (67))]]>
        </Resource>
    </TestCase>
    <TestCase name="testIsDistinctFrom">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(CASE(IS NULL(1), IS NOT NULL(2), IS NULL(2), IS NOT NULL(1), <>(1, 2))):BOOLEAN NOT NULL])
  LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 1 is distinct from 2 from (values(true))]]>
        </Resource>
    </TestCase>
    <TestCase name="testIsNotDistinctFrom">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(CASE(IS NULL(1), IS NULL(2), IS NULL(2), IS NULL(1), =(1, 2))):BOOLEAN NOT NULL])
  LogicalValues(tuples=[[{ true }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select 1 is not distinct from 2 from (values(true))]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotLike">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[NOT(LIKE('a', 'b', 'c'))])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values ('a' not like 'b' escape 'c')]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverMultiple">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[CASE(>(COUNT($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$2=[CASE(>=(COUNT() OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW), 2), CASE(>(COUNT($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($7) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW)):INTEGER, null), null)])
  LogicalFilter(condition=[>(-($7, $5), 999)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  sum(deptno) over w1,
  sum(deptno) over w2
from emp
where deptno - sal > 999
window w1 as (partition by job order by hiredate rows 2 preceding),
  w2 as (partition by job order by hiredate rows 3 preceding disallow partial),
  w3 as (partition by job order by hiredate range interval '1' second preceding)]]>
        </Resource>
    </TestCase>
    <TestCase name="testCharLength">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CHAR_LENGTH('foo')])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[values (character_length('foo'))]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverAvg">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[CAST(/(CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null), COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW))):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  avg(sal) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverCountStar">
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)], EXPR$1=[COUNT() OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="sql">
            <![CDATA[select count(sal) over w1,
  count(*) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
    </TestCase>
    <TestCase name="testIntegerLiteral">
        <Resource name="sql">
            <![CDATA[select 1 from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIntervalLiteralYearToMonth">
        <Resource name="sql">
            <![CDATA[select
  cast(empno as Integer) * (INTERVAL '1-1' YEAR TO MONTH)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[*(CAST($0):INTEGER NOT NULL, 13)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIntervalLiteralHourToMinute">
        <Resource name="sql">
            <![CDATA[select
 cast(empno as Integer) * (INTERVAL '1:1' HOUR TO MINUTE)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[*(CAST($0):INTEGER NOT NULL, 3660000)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinct">
        <Resource name="sql">
            <![CDATA[select distinct sal + 5 from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[+($5, 5)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinctGroup">
        <Resource name="sql">
            <![CDATA[select distinct sum(sal) from emp group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[$1])
    LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
      LogicalProject(DEPTNO=[$7], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExplicitTable">
        <Resource name="sql">
            <![CDATA[table emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTable">
        <Resource name="sql">
            <![CDATA[select * from table(ramp(3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(I=[$0])
  LogicalTableFunctionScan(invocation=[RAMP(3)], rowType=[RecordType(INTEGER I)])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInValueListShort">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (10, 20)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[OR(=($7, 10), =($7, 20))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInValueListLong">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalValues(tuples=[[{ 10 }, { 20 }, { 30 }, { 40 }, { 50 }, { 60 }, { 70 }, { 80 }, { 90 }, { 100 }, { 110 }, { 120 }, { 130 }, { 140 }, { 150 }, { 160 }, { 170 }, { 180 }, { 190 }, { 200 }, { 210 }, { 220 }, { 230 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubQuery">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCollectionTableWithCursorParam">
        <Resource name="sql">
            <![CDATA[select * from table(dedup(cursor(select ename from emp), cursor(select name from dept), 'NAME'))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$0])
  LogicalTableFunctionScan(invocation=[DEDUP(CAST($0):CURSOR NOT NULL, CAST($1):CURSOR NOT NULL, 'NAME')], rowType=[RecordType(VARCHAR(1024) NAME)])
    LogicalProject(ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrder">
        <Resource name="sql">
            <![CDATA[select empno from emp order by empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderDescNullsLast">
        <Resource name="sql">
            <![CDATA[select empno from emp order by empno desc nulls last]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[DESC-nulls-last])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAlias">
        <Resource name="sql">
            <![CDATA[select empno + 1 as x, empno - 2 as y from emp order by y]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC])
  LogicalProject(X=[+($0, 1)], Y=[-($0, 2)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByOrdinalDesc">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by 2.5 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], dir0=[DESC])
  LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByIdenticalExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1 from emp order by deptno asc, empno + 1 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByNegativeOrdinal">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by -1 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EMPNO=[$2])
  LogicalSort(sort0=[$3], dir0=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0], EXPR$3=[-1])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByOrdinalInExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1, deptno, empno from emp order by 1 + 2 desc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EMPNO=[$2])
  LogicalSort(sort0=[$3], dir0=[DESC])
    LogicalProject(EXPR$0=[+($0, 1)], DEPTNO=[$7], EMPNO=[$0], EXPR$3=[+(1, 2)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasDoesNotObscure">
        <Resource name="sql">
            <![CDATA[select empno + 1 as empno, empno - 2 as y from emp order by empno + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EMPNO=[$0], Y=[$1])
  SortRel(sort0=[$2], dir0=[Ascending])
    ProjectRel(EMPNO=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+($0, 3)])
      TableAccessRel(table=[[SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasInExpr">
        <Resource name="sql">
            <![CDATA[select empno + 1 as x, empno - 2 as y
from emp order by y + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(X=[$0], Y=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(X=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+(-($0, 2), 3)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByAliasOverrides">
        <Resource name="sql">
            <![CDATA[select empno + 1 as empno, empno - 2 as y
from emp order by empno + 3]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], Y=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[+($0, 1)], Y=[-($0, 2)], EXPR$2=[+(+($0, 1), 3)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnion">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp
union all
select deptno, deptno from dept
order by sal desc, empno asc]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC], dir1=[ASC])
  LogicalProject(EMPNO=[$0], SAL=[$1])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnionExprs">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp
union all
select deptno, deptno from dept
order by empno * sal + 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], SAL=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[$0], SAL=[$1], EXPR$2=[+(*($0, $1), 2)])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderGroup">
        <Resource name="sql">
            <![CDATA[select deptno, count(*)
from emp
group by deptno
order by deptno * sum(sal) desc, min(empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$1])
  LogicalSort(sort0=[$2], sort1=[$3], dir0=[DESC], dir1=[ASC])
    LogicalProject(DEPTNO=[$0], EXPR$1=[$1], EXPR$2=[*($0, $2)], EXPR$3=[$3])
      LogicalAggregate(group=[{0}], EXPR$1=[COUNT()], agg#1=[SUM($1)], agg#2=[MIN($2)])
        LogicalProject(DEPTNO=[$7], SAL=[$5], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderDistinct">
        <Resource name="sql">
            <![CDATA[select distinct empno, deptno + 1
from emp order by deptno + 1 + empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalAggregate(group=[{0, 1, 2}])
      LogicalProject(EMPNO=[$0], EXPR$1=[+($7, 1)], EXPR$2=[+(+($7, 1), $0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderBySameExpr">
        <Resource name="sql">
            <![CDATA[select empno from emp, dept
order by sal + empno desc, sal * empno, sal + empno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalSort(sort0=[$1], sort1=[$2], sort2=[$1], dir0=[DESC], dir1=[ASC], dir2=[ASC])
    LogicalProject(EMPNO=[$0], EXPR$1=[+($5, $0)], EXPR$2=[*($5, $0)])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderUnionOrdinal">
        <Resource name="sql">
            <![CDATA[select empno, sal from emp
union all
select deptno, deptno from dept
order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC])
  LogicalProject(EMPNO=[$0], SAL=[$1])
    LogicalUnion(all=[true])
      LogicalProject(EMPNO=[$0], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], DEPTNO0=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSample">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample substitute('DATASET1') where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample substitute('DATASET1')
 join dept on e.deptno = dept.deptno
) tablesample substitute('DATASET2')
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverOrderWindow">
        <Resource name="sql">
            <![CDATA[select last_value(deptno) over (order by empno)
from emp
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[LAST_VALUE($7) OVER (ORDER BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverOrderFollowingWindow">
        <Resource name="sql">
            <![CDATA[select
  last_value(deptno) over (order by empno rows 2 following)
from emp
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[LAST_VALUE($7) OVER (ORDER BY $0 ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInterval">
        <Resource name="sql">
            <![CDATA[values(cast(interval '1' hour as interval hour to second))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
ProjectRel(EXPR$0=[$0])
  ProjectRel(EXPR$0=[3600000])
    OneRowRel
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOverAvg2">
        <Resource name="sql">
            <![CDATA[select sum(sal) over w1,
  avg(CAST(sal as real)) over w1
from emp
window w1 as (partition by job order by hiredate rows 2 preceding)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CASE(>(COUNT($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0($5) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):INTEGER, null)], EXPR$1=[/(CASE(>(COUNT(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 0), CAST($SUM0(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)):REAL, null), COUNT(CAST($5):REAL NOT NULL) OVER (PARTITION BY $2 ORDER BY $4 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsing">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp JOIN dept USING (deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsingCompound">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp LEFT JOIN (SELECT *, deptno * 5 as empno FROM dept) USING (deptno,empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[$11])
  LogicalJoin(condition=[AND(=($7, $9), =($0, $11))], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], EMPNO=[*($0, 5)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOn">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp
JOIN dept on emp.deptno = dept.deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnIn">
        <Resource name="sql">
            <![CDATA[select * from emp join dept
 on emp.deptno = dept.deptno and emp.empno in (1, 3)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[AND(=($7, $9), OR(=($0, 1), =($0, 3)))], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleBernoulli">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample bernoulli(50) where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[bernoulli], rate=[0.5], repeatableSeed=[-])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleBernoulliQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample bernoulli(10) repeatable(1)
 join dept on e.deptno = dept.deptno
) tablesample bernoulli(50) repeatable(99)
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[bernoulli], rate=[0.5], repeatableSeed=[99])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          Sample(mode=[bernoulli], rate=[0.1], repeatableSeed=[1])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleSystem">
        <Resource name="sql">
            <![CDATA[select * from emp tablesample system(50) where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[system], rate=[0.5], repeatableSeed=[-])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSampleSystemQuery">
        <Resource name="sql">
            <![CDATA[select * from (
 select * from emp as e tablesample system(10) repeatable(1)
 join dept on e.deptno = dept.deptno
) tablesample system(50) repeatable(99)
where empno > 5]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalFilter(condition=[>($0, 5)])
    Sample(mode=[system], rate=[0.5], repeatableSeed=[99])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          Sample(mode=[system], rate=[0.1], repeatableSeed=[1])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectDistinctDup">
        <Resource name="sql">
            <![CDATA[select distinct sal + 5, deptno, sal + 5 from emp where deptno < 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0], DEPTNO=[$1], EXPR$2=[$0])
  LogicalAggregate(group=[{0, 1}])
    LogicalProject(EXPR$0=[$0], DEPTNO=[$1])
      LogicalProject(EXPR$0=[+($5, 5)], DEPTNO=[$7], EXPR$2=[+($5, 5)])
        LogicalFilter(condition=[<($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCountNoGroup">
        <Resource name="sql">
            <![CDATA[select count(*), sum(sal)
from emp
where empno > 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()], EXPR$1=[SUM($0)])
  LogicalProject(SAL=[$5])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAliasList">
        <Resource name="sql">
            <![CDATA[select a + b from (
  select deptno, 1 as one, name from dept
) as d(a, b, c)
where c like 'X%']]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[+($0, $1)])
  LogicalFilter(condition=[LIKE($2, 'X%')])
    LogicalProject(DEPTNO=[$0], ONE=[1], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAliasList2">
        <Resource name="sql">
            <![CDATA[select * from (
  select a, b, c from (values (1, 2, 3)) as t (c, b, a)
) join dept on dept.deptno = c
order by c + a]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$2], DEPTNO=[$3], NAME=[$4])
  LogicalSort(sort0=[$5], dir0=[ASC])
    LogicalProject(A=[$0], B=[$1], C=[$2], DEPTNO=[$3], NAME=[$4], EXPR$5=[+($2, $0)])
      LogicalJoin(condition=[=($3, $2)], joinType=[inner])
        LogicalProject(A=[$2], B=[$1], C=[$0])
          LogicalValues(tuples=[[{ 1, 2, 3 }]])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinWithUnion">
        <Resource name="sql">
            <![CDATA[select grade
from (select empno from emp union select deptno from dept),
  salgrade]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(GRADE=[$1])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalUnion(all=[false])
      LogicalProject(EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, SALGRADE]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNatural">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp NATURAL JOIN dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNaturalNoCommonColumn">
        <Resource name="sql">
            <![CDATA[SELECT *
FROM emp NATURAL JOIN (SELECT deptno AS foo, name FROM dept) AS d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], FOO=[$9], NAME=[$10])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(FOO=[$0], NAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinNaturalMultipleCommonColumn">
        <Resource name="sql">
            <![CDATA[SELECT *
FROM emp
NATURAL JOIN (SELECT deptno, name AS ename FROM dept) AS d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], ENAME0=[$10])
  LogicalJoin(condition=[AND(=($1, $10), =($7, $9))], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], ENAME=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderOffsetFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp
order by empno offset 10 rows fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC], offset=[10], fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOffsetFetch">
        <Resource name="sql">
            <![CDATA[select empno from emp
offset 10 rows fetch next 5 rows only]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(offset=[10], fetch=[5])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOffset">
        <Resource name="sql">
            <![CDATA[select empno from emp offset 10 rows]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(offset=[10])
  LogicalProject(EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultiAnd">
        <Resource name="sql">
            <![CDATA[select * from emp
where deptno < 10
and deptno > 5
and (deptno = 8 or empno < 100)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[AND(<($7, 10), >($7, 5), OR(=($7, 8), <($0, 100)))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUsingThreeWay">
        <Resource name="sql">
            <![CDATA[select *
from emp as e
join dept as d using (deptno)
join emp as e2 using (empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[$11], ENAME0=[$12], JOB0=[$13], MGR0=[$14], HIREDATE0=[$15], SAL0=[$16], COMM0=[$17], DEPTNO1=[$18], SLACKER0=[$19])
  LogicalJoin(condition=[=($0, $11)], joinType=[inner])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnExpression">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp
JOIN dept on emp.deptno + 1 = dept.deptno - 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($9, $12)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 1)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(DEPTNO=[$0], NAME=[$1], $f2=[-($0, 2)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDuplicateColumnsInSubQuery">
        <Resource name="sql">
            <![CDATA[select "e" from (
select empno as "e", deptno as d, 1 as "e" from EMP)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(e=[$0])
  LogicalProject(e=[$0], D=[$7], e0=[1])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWith">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp)
select * from emp2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithUnion">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp where deptno > 10)
select empno from emp2 where deptno < 30
union all
select deptno from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(EMPNO=[$0])
    LogicalFilter(condition=[<($7, 30)])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[>($7, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExists">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor1], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[<=($0, $cor1.DEPTNO)])
              LogicalProject(DEPTNO=[$0], NAME=[$1])
                LogicalFilter(condition=[>=($0, $cor1.DEPTNO)])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideScalarSubQuery">
        <Resource name="sql">
            <![CDATA[select (
 with dept2 as (select * from dept where deptno > 10) select count(*) from dept2) as c
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(C=[$9])
  LogicalJoin(condition=[true], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
      LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
        LogicalProject($f0=[0])
          LogicalProject(DEPTNO=[$0], NAME=[$1])
            LogicalFilter(condition=[>($0, 10)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateNoGroup">
        <Resource name="sql">
            <![CDATA[select sum(deptno) from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConditionOffByOneReversed">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp
JOIN dept on dept.deptno = emp.deptno + 0]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($10, $9)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testConditionOffByOne">
        <Resource name="sql">
            <![CDATA[SELECT * FROM emp
JOIN dept on emp.deptno + 0 = dept.deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$10], NAME=[$11])
    LogicalJoin(condition=[=($9, $10)], joinType=[inner])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f9=[+($7, 0)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testLateralDecorrelate">
        <Resource name="sql">
            <![CDATA[select * from emp,
 LATERAL (select * from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $11)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2])
      LogicalJoin(condition=[=($2, $0)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}])
          LogicalProject(DEPTNO=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedCorrelations">
        <Resource name="sql">
            <![CDATA[select *
from (select 2+deptno d2, 3+deptno d3 from emp) e
 where exists (select 1 from (select deptno+1 d1 from dept) d
 where d1=e.d2 and exists (select 2 from (select deptno+4 d4, deptno+5 d5, deptno+6 d6 from dept)
 where d4=d.d1 and d5=d.d1 and d6=e.d3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(D2=[$0], D3=[$1])
  LogicalFilter(condition=[IS NOT NULL($2)])
    LogicalCorrelate(correlation=[$cor3], joinType=[LEFT], requiredColumns=[{0, 1}])
      LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[AND(=($0, $cor3.D2), IS NOT NULL($1))])
              LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{0}])
                LogicalProject(D1=[+($0, 1)])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                LogicalAggregate(group=[{}], agg#0=[MIN($0)])
                  LogicalProject($f0=[true])
                    LogicalProject(EXPR$0=[2])
                      LogicalFilter(condition=[AND(=($0, $cor0.D1), =($1, $cor0.D1), =($2, $cor3.D3))])
                        LogicalProject(D4=[+($0, 4)], D5=[+($0, 5)], D6=[+($0, 6)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedCorrelationsDecorrelated">
        <Resource name="sql">
            <![CDATA[select *
from (select 2+deptno d2, 3+deptno d3 from emp) e
 where exists (select 1 from (select deptno+1 d1 from dept) d
 where d1=e.d2 and exists (select 2 from (select deptno+4 d4, deptno+5 d5, deptno+6 d6 from dept)
 where d4=d.d1 and d5=d.d1 and d6=e.d3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(D2=[$0], D3=[$1])
  LogicalProject(D2=[$0], D3=[$1], $f0=[$4])
    LogicalProject(D2=[$0], D3=[$1], D20=[CAST($2):INTEGER], D30=[$3], $f2=[CAST($4):BOOLEAN])
      LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner])
        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])
          LogicalProject(D2=[$1], D3=[$2], $f0=[$0])
            LogicalProject($f0=[true], D2=[$1], D3=[$2])
              LogicalProject(EXPR$0=[1], D2=[$3], D3=[$2])
                LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  LogicalFilter(condition=[IS NOT NULL($1)])
                    LogicalProject(D1=[$0], $f0=[$4], D3=[$3])
                      LogicalJoin(condition=[AND(=($0, $1), =($0, $2))], joinType=[left])
                        LogicalProject(D1=[+($0, 1)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                        LogicalAggregate(group=[{0, 1, 2}], agg#0=[MIN($3)])
                          LogicalProject(D1=[$1], D12=[$2], D3=[$3], $f0=[$0])
                            LogicalProject($f0=[true], D1=[$1], D12=[$2], D3=[$3])
                              LogicalProject(EXPR$0=[2], D1=[$3], D12=[$3], D3=[$4])
                                LogicalJoin(condition=[AND(=($0, $3), =($1, $3), =($2, $4))], joinType=[inner])
                                  LogicalProject(D4=[+($0, 4)], D5=[+($0, 5)], D6=[+($0, 6)])
                                    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                  LogicalJoin(condition=[true], joinType=[inner])
                                    LogicalAggregate(group=[{0}])
                                      LogicalProject(D1=[+($0, 1)])
                                        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                    LogicalAggregate(group=[{0}])
                                      LogicalProject(D3=[$1])
                                        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(D2=[$0])
                      LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExistsDecorrelate">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$11])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO1=[CAST($9):INTEGER], DEPTNO0=[CAST($10):INTEGER], $f2=[CAST($11):BOOLEAN])
      LogicalJoin(condition=[AND(=($7, $9), =($7, $10))], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])
          LogicalProject(DEPTNO1=[$1], DEPTNO0=[$2], $f0=[$0])
            LogicalProject($f0=[true], DEPTNO1=[$1], DEPTNO0=[$2])
              LogicalProject(EXPR$0=[1], DEPTNO1=[$3], DEPTNO0=[$2])
                LogicalJoin(condition=[<=($0, $3)], joinType=[inner])
                  LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2])
                    LogicalJoin(condition=[>=($0, $2)], joinType=[inner])
                      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                      LogicalAggregate(group=[{0}])
                        LogicalProject(DEPTNO=[$7])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(DEPTNO=[$7])
                      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedDecorrelate">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$10])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[CAST($9):INTEGER], $f1=[CAST($10):BOOLEAN])
      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject(DEPTNO0=[$1], $f0=[$0])
            LogicalProject($f0=[true], DEPTNO0=[$1])
              LogicalProject(EXPR$0=[1], DEPTNO0=[$2])
                LogicalJoin(condition=[=($2, $0)], joinType=[inner])
                  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(DEPTNO=[$7])
                      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedLimit">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[IS NOT NULL($9)])
    LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalSort(fetch=[1])
            LogicalProject(EXPR$0=[1])
              LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
                LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedLimitDecorrelate">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], $f0=[$10])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[CAST($9):INTEGER], $f1=[CAST($10):BOOLEAN])
      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject(DEPTNO0=[$1], $f0=[$0])
            LogicalProject($f0=[true], DEPTNO0=[$1])
              LogicalSort(fetch=[1])
                LogicalProject(EXPR$0=[1], DEPTNO0=[$2])
                  LogicalJoin(condition=[=($2, $0)], joinType=[inner])
                    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                    LogicalAggregate(group=[{0}])
                      LogicalProject(DEPTNO=[$7])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUnnest">
        <Resource name="sql">
            <![CDATA[select*from dept as d, unnest(multiset[d.deptno * 2])]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EXPR$0=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Uncollect
      LogicalProject(EXPR$0=[$SLICE($0)])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[*($cor0.DEPTNO, 2)])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedAggregates">
        <Resource name="sql">
            <![CDATA[SELECT
  avg(sum(sal) + 2 * min(empno) + 3 * avg(empno))
  over (partition by deptno)
from emp
group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(/(SUM(+(+($1, *(2, $2)), *(3, $3))) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), COUNT(+(+($1, *(2, $2)), *(3, $3))) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))):INTEGER NOT NULL])
  LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[MIN($2)], agg#2=[AVG($2)])
    LogicalProject(DEPTNO=[$7], SAL=[$5], EMPNO=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithAlias">
        <Resource name="sql">
            <![CDATA[with w(x, y) as
  (select * from dept where deptno > 10)
select x from w where x < 30 union all select deptno from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalUnion(all=[true])
  LogicalProject(X=[$0])
    LogicalFilter(condition=[<($0, 30)])
      LogicalProject(DEPTNO=[$0], NAME=[$1])
        LogicalFilter(condition=[>($0, 10)])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
  LogicalProject(DEPTNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithOrder">
        <Resource name="sql">
            <![CDATA[with emp2 as (select * from emp)
select * from emp2 order by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$7], dir0=[ASC])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithUnionOrder">
        <Resource name="sql">
            <![CDATA[with emp2 as (select empno, deptno as x from emp)
select * from emp2
union all
select * from emp2
order by empno + x]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], X=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(EMPNO=[$0], X=[$1], EXPR$2=[+($0, $1)])
      LogicalUnion(all=[true])
        LogicalProject(EMPNO=[$0], X=[$1])
          LogicalProject(EMPNO=[$0], X=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalProject(EMPNO=[$0], X=[$1])
          LogicalProject(EMPNO=[$0], X=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubQueryInSelect">
        <Resource name="sql">
            <![CDATA[select name, deptno in (
  select case when true then deptno else null end from emp)
from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$1], EXPR$1=[CASE(=($2, 0), false, IS NOT NULL($6), true, <($3, $2), null, false)])
  LogicalJoin(condition=[=($4, $5)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$0])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
          LogicalProject($f0=[$0], $f1=[true])
            LogicalProject(EXPR$0=[CAST($7):INTEGER])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(EXPR$0=[CAST($7):INTEGER])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelect">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select case when true then deptno else null end from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(CASE(=($9, 0), false, IS NOT NULL($13), true, IS NULL($11), null, <($10, $9), null, false))])
  LogicalJoin(condition=[=($11, $12)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$10], $f11=[$7])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
          LogicalProject($f0=[$0], $f1=[true])
            LogicalProject(EXPR$0=[CAST($0):INTEGER])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(EXPR$0=[CAST($0):INTEGER])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQuery">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno not in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[NOT(AND(IS TRUE($11), IS NOT NULL($9)))])
    LogicalJoin(condition=[=($9, $10)], joinType=[left])
      LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
        LogicalProject($f0=[$0], $f1=[true])
          LogicalProject(DEPTNO=[$0])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectNotNull">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select deptno from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[IS FALSE($11)])
  LogicalJoin(condition=[=($9, $10)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(DEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSortWithTrim">
        <Resource name="sql">
            <![CDATA[select ename from (select * from emp order by sal) a]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(ENAME=[$0])
  LogicalSort(sort0=[$1], dir0=[ASC])
    LogicalProject(ENAME=[$1], SAL=[$5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupAlias">
        <Resource name="sql">
            <![CDATA[select "$f2", max(x), max(x + 1)
from (values (1, 2)) as t("$f2", x)
group by "$f2"]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)], EXPR$2=[MAX($2)])
  LogicalProject($f2=[$0], EXPR$1=[$1], $f3=[+($1, 1)])
    LogicalValues(tuples=[[{ 1, 2 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectDeduceNotNull">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select mgr from emp where mgr > 5)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[CAST(NOT(AND(IS TRUE($11), IS NOT NULL($9)))):BOOLEAN])
  LogicalJoin(condition=[=($9, $10)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(MGR=[$3])
          LogicalFilter(condition=[>($3, 5)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectDeduceNotNull2">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select mgr from emp where mgr is not null)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[CAST(NOT(AND(IS TRUE($11), IS NOT NULL($9)))):BOOLEAN])
  LogicalJoin(condition=[=($9, $10)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(MGR=[$3])
          LogicalFilter(condition=[IS NOT NULL($3)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectDeduceNotNull3">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select mgr from emp where mgr in (
    select mgr from emp where deptno = 10))
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[CAST(NOT(AND(IS TRUE($11), IS NOT NULL($9)))):BOOLEAN])
  LogicalJoin(condition=[=($9, $10)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(MGR=[$3])
          LogicalJoin(condition=[=($3, $9)], joinType=[inner])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
            LogicalAggregate(group=[{0}])
              LogicalProject(MGR=[$3])
                LogicalFilter(condition=[=($7, 10)])
                  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectMayBeNull">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select mgr from emp)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(CASE(=($9, 0), false, IS NOT NULL($13), true, IS NULL($11), null, <($10, $9), null, false))])
  LogicalJoin(condition=[=($11, $12)], joinType=[left])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[$9], $f10=[$10], $f11=[$7])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{}], agg#0=[COUNT()], agg#1=[COUNT($0)])
          LogicalProject($f0=[$0], $f1=[true])
            LogicalProject(MGR=[$3])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
      LogicalProject($f0=[$0], $f1=[true])
        LogicalProject(MGR=[$3])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSingletonGroupingSet">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp group by grouping sets (deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
    LogicalProject(DEPTNO=[$7], SAL=[$5])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupEmpty">
        <Resource name="sql">
            <![CDATA[select sum(deptno) from emp group by ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByWithDuplicates">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp group by (), ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(SAL=[$5])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSets">
        <Resource name="sql">
            <![CDATA[select deptno, ename, sum(sal) from emp
group by grouping sets ((deptno), (ename, deptno))
order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC])
  LogicalProject(DEPTNO=[$0], ENAME=[$1], EXPR$2=[$4])
    LogicalProject(DEPTNO=[$0], ENAME=[CASE($3, null, $1)], i$DEPTNO=[$2], i$ENAME=[$3], EXPR$2=[$4])
      LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}]], indicator=[true], EXPR$2=[SUM($2)])
        LogicalProject(DEPTNO=[$7], ENAME=[$1], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDuplicateGroupingSets">
        <Resource name="sql">
            <![CDATA[select sum(sal) from emp
group by sal,
  grouping sets (deptno,
    grouping sets ((deptno, ename), ename),
      (ename)),
  ()]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$6])
  LogicalProject(SAL=[$0], DEPTNO=[CASE($4, null, $1)], ENAME=[CASE($5, null, $2)], i$SAL=[$3], i$DEPTNO=[$4], i$ENAME=[$5], EXPR$0=[$6])
    LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0, 1}, {0, 2}]], indicator=[true], EXPR$0=[SUM($0)])
      LogicalProject(SAL=[$5], DEPTNO=[$7], ENAME=[$1])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsCartesianProduct">
        <Resource name="sql">
            <![CDATA[select 1
from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by grouping sets (a, b), grouping sets (c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 2}, {0, 3}, {1, 2}, {1, 3}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsCartesianProduct2">
        <Resource name="sql">
            <![CDATA[select 1
from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by grouping sets (a, (a, b)), grouping sets (c), d]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[$0], EXPR$1=[CASE($5, null, $1)], EXPR$2=[$2], EXPR$3=[$3], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 2, 3}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollup">
        <Resource name="sql">
            <![CDATA[select 1
from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by rollup(a, b), rollup(c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0, 2, 3}, {0, 2}, {0}, {2, 3}, {2}, {}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCube">
        <Resource name="sql">
            <![CDATA[select 1
from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by cube(a, b)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($2, null, $0)], EXPR$1=[CASE($3, null, $1)], i$EXPR$0=[$2], i$EXPR$1=[$3])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {1}, {}]], indicator=[true])
      LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
        LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollupTuples">
        <Resource name="sql">
            <![CDATA[select 1
from (values (1, 2, 3, 4)) as t(a, b, c, d)
group by rollup(b, (a, d))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$1=[CASE($3, null, $0)], EXPR$0=[CASE($4, null, $1)], EXPR$3=[CASE($5, null, $2)], i$EXPR$1=[$3], i$EXPR$0=[$4], i$EXPR$3=[$5])
    LogicalAggregate(group=[{0, 1, 2}], groups=[[{0, 1, 2}, {0}, {}]], indicator=[true])
      LogicalProject(EXPR$1=[$1], EXPR$0=[$0], EXPR$3=[$3])
        LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsWith">
        <Resource name="sql">
            <![CDATA[with t(a, b, c, d) as (values (1, 2, 3, 4))
select 1 from t
group by rollup(a, b), rollup(c, d)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($4, null, $0)], EXPR$1=[CASE($5, null, $1)], EXPR$2=[CASE($6, null, $2)], EXPR$3=[CASE($7, null, $3)], i$EXPR$0=[$4], i$EXPR$1=[$5], i$EXPR$2=[$6], i$EXPR$3=[$7])
    LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0, 2, 3}, {0, 2}, {0}, {2, 3}, {2}, {}]], indicator=[true])
      LogicalValues(tuples=[[{ 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testRollupSimple">
        <Resource name="sql">
            <![CDATA[select a, b, count(*) as c
from (values (cast(null as integer), 2)) as t(a, b)
group by rollup(a, b)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(A=[$0], B=[$1], C=[$4])
  LogicalProject(A=[CASE($2, null, $0)], B=[CASE($3, null, $1)], i$A=[$2], i$B=[$3], C=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], C=[COUNT()])
      LogicalProject(A=[null], B=[2])
        LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByExpression">
        <Resource name="sql">
            <![CDATA[select count(*)
from emp
group by substring(ename FROM 1 FOR 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
    LogicalProject($f0=[SUBSTRING($1, 1, 1)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingSetsProduct">
        <Resource name="sql">
            <![CDATA[select 1
from (values (0, 1, 2, 3, 4)) as t(a, b, c, x, y)
group by grouping sets ((a, b), c), grouping sets ((x, y), ())]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[1])
  LogicalProject(EXPR$0=[CASE($5, null, $0)], EXPR$1=[CASE($6, null, $1)], EXPR$2=[CASE($7, null, $2)], EXPR$3=[CASE($8, null, $3)], EXPR$4=[CASE($9, null, $4)], i$EXPR$0=[$5], i$EXPR$1=[$6], i$EXPR$2=[$7], i$EXPR$3=[$8], i$EXPR$4=[$9])
    LogicalAggregate(group=[{0, 1, 2, 3, 4}], groups=[[{0, 1, 3, 4}, {0, 1}, {2, 3, 4}, {2}]], indicator=[true])
      LogicalValues(tuples=[[{ 0, 1, 2, 3, 4 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingFunctionWithGroupBy">
        <Resource name="sql">
            <![CDATA[select
  deptno, grouping(deptno), count(*), grouping(empno)
from emp
group by empno, deptno
order by 2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC])
  LogicalProject(DEPTNO=[$1], EXPR$1=[1], EXPR$2=[$2], EXPR$3=[1])
    LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()])
      LogicalProject(EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupingFunction">
        <Resource name="sql">
            <![CDATA[select
  deptno, grouping(deptno), count(*), grouping(empno)
from emp
group by rollup(empno, deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$1], EXPR$1=[CASE($3, 1, 0)], EXPR$2=[$4], EXPR$3=[CASE($2, 1, 0)])
  LogicalProject(EMPNO=[CASE($2, null, $0)], DEPTNO=[CASE($3, null, $1)], i$EMPNO=[$2], i$DEPTNO=[$3], EXPR$2=[$4])
    LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], indicator=[true], EXPR$2=[COUNT()])
      LogicalProject(EMPNO=[$0], DEPTNO=[$7])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testTableExtend">
        <Resource name="sql">
            <![CDATA[select * from dept extend (x varchar(5) not null)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], X=[$2])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByCaseSubQuery">
        <Resource name="sql">
            <![CDATA[SELECT CASE WHEN emp.empno IN (3) THEN 0 ELSE 1 END
FROM emp
GROUP BY (CASE WHEN emp.empno IN (3) THEN 0 ELSE 1 END)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(EXPR$0=[CASE(=($0, 3), 0, 1)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggNoDuplicateColumnNames">
        <Resource name="sql">
            <![CDATA[SELECT  empno, EXPR$2, COUNT(empno) FROM (
    SELECT empno, deptno AS EXPR$2
    FROM emp)
GROUP BY empno, EXPR$2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT()])
  LogicalProject(EMPNO=[$0], EXPR$2=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggCaseSubQuery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(CASE WHEN empno IN (3) THEN 0 ELSE 1 END) FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject($f0=[CASE(=($0, 3), 0, 1)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggCaseInSubQuery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(
  CASE WHEN deptno IN (SELECT deptno FROM dept) THEN 1 ELSE 0 END)
FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject($f0=[CASE(IN($7, {
LogicalProject(DEPTNO=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
}), 1, 0)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggScalarSubQuery">
        <Resource name="sql">
            <![CDATA[SELECT SUM(SELECT min(deptno) FROM dept) FROM emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(EXPR$0=[$9])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
        LogicalProject(DEPTNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testStream">
        <Resource name="sql">
            <![CDATA[select stream productId from orders where productId = 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalDelta
  LogicalProject(PRODUCTID=[$1])
    LogicalFilter(condition=[=($1, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, ORDERS]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testStreamGroupBy">
        <Resource name="sql">
            <![CDATA[select stream
 floor(rowtime to second) as rowtime, count(*) as c
from orders
group by floor(rowtime to second)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalDelta
  LogicalAggregate(group=[{0}], C=[COUNT()])
    LogicalProject(ROWTIME=[FLOOR($0, FLAG(SECOND))])
      LogicalTableScan(table=[[CATALOG, SALES, ORDERS]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testStreamWindowedAggregation">
        <Resource name="sql">
            <![CDATA[select stream *,
  count(*) over (partition by productId
    order by rowtime
    range interval '1' second preceding) as c
from orders]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalDelta
  LogicalProject(ROWTIME=[$0], PRODUCTID=[$1], ORDERID=[$2], C=[COUNT() OVER (PARTITION BY $1 ORDER BY $0 RANGE BETWEEN 1000 PRECEDING AND CURRENT ROW)])
    LogicalTableScan(table=[[CATALOG, SALES, ORDERS]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGroupByCaseIn">
        <Resource name="sql">
            <![CDATA[select
 (CASE WHEN (deptno IN (10, 20)) THEN 0 ELSE deptno END),
 min(empno) from EMP
group by (CASE WHEN (deptno IN (10, 20)) THEN 0 ELSE deptno END)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MIN($1)])
  LogicalProject(EXPR$0=[CASE(OR(=($7, 10), =($7, 20)), 0, $7)], EMPNO=[$0])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggFilter">
        <Resource name="sql">
            <![CDATA[select
  deptno, sum(sal * 2) filter (where empno < 10), count(*)
from emp
group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT()])
  LogicalProject(DEPTNO=[$7], $f1=[*($5, 2)], $f2=[<($0, 10)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSubQueryAggregateFunctionFollowedBySimpleOperation">
        <Resource name="sql">
            <![CDATA[select deptno
from EMP
where deptno > (select min(deptno) * 2 + 10 from EMP)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalFilter(condition=[>($7, $9)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalProject(EXPR$0=[+(*($0, 2), 10)])
        LogicalAggregate(group=[{}], agg#0=[MIN($0)])
          LogicalProject(DEPTNO=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSubQueryValues">
        <Resource name="sql">
            <![CDATA[select deptno
from EMP
where deptno > (values 10)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalFilter(condition=[>($7, $9)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalValues(tuples=[[{ 10 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSubQueryLimitOne">
        <Resource name="sql">
            <![CDATA[select deptno
from EMP
where deptno > (select deptno
from EMP order by deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalFilter(condition=[>($7, $9)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalSort(sort0=[$0], dir0=[ASC], fetch=[1])
        LogicalProject(DEPTNO=[$7])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testIdenticalExpressionInSubQuery">
        <Resource name="sql">
            <![CDATA[select deptno
from EMP
where deptno in (1, 2) or deptno in (1, 2)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$7])
  LogicalFilter(condition=[OR(=($7, 1), =($7, 2), =($7, 1), =($7, 2))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testHavingAggrFunctionIn">
        <Resource name="sql">
            <![CDATA[select deptno
from emp
group by deptno
having sum(case when deptno in (1, 2) then 0 else 1 end) +
sum(case when deptno in (3, 4) then 0 else 1 end) > 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[>(+($1, $2), 10)])
    LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)])
      LogicalProject(DEPTNO=[$7], $f1=[CASE(OR(=($7, 1), =($7, 2)), 0, 1)], $f2=[CASE(OR(=($7, 3), =($7, 4)), 0, 1)])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testHavingInSubQueryWithAggrFunction">
        <Resource name="sql">
            <![CDATA[select sal
from emp
group by sal
having sal in (
  select deptno
  from dept
  group by deptno
  having sum(deptno) > 0)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(SAL=[$0])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalAggregate(group=[{0}])
      LogicalProject(SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalProject(DEPTNO=[$0])
        LogicalFilter(condition=[>($1, 0)])
          LogicalAggregate(group=[{0}], agg#0=[SUM($0)])
            LogicalProject(DEPTNO=[$0])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateAndScalarSubQueryInHaving">
        <Resource name="sql">
            <![CDATA[select deptno
from emp
group by deptno
having max(emp.empno) > (SELECT min(emp.empno) FROM emp)
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0])
  LogicalFilter(condition=[>($1, $2)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalAggregate(group=[{0}], agg#0=[MAX($1)])
        LogicalProject(DEPTNO=[$7], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
        LogicalProject(EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testAggregateAndScalarSubQueryInSelect">
        <Resource name="sql">
            <![CDATA[select deptno,
  max(emp.empno) > (SELECT min(emp.empno) FROM emp) as b
from emp
group by deptno
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], B=[>($1, $2)])
  LogicalJoin(condition=[true], joinType=[left])
    LogicalAggregate(group=[{0}], agg#0=[MAX($1)])
      LogicalProject(DEPTNO=[$7], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
      LogicalProject(EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInsert">
        <Resource name="sql">
            <![CDATA[insert into emp (deptno, empno, ename) values (10, 150, 'Fred')]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[INSERT], flattened=[true])
  LogicalProject(EMPNO=[$1], ENAME=[$2], JOB=[null], MGR=[null], HIREDATE=[null], SAL=[null], COMM=[null], DEPTNO=[$0], SLACKER=[null])
    LogicalValues(tuples=[[{ 10, 150, 'Fred' }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectView">
        <Resource name="sql">
            <![CDATA[select * from emp_20 where empno > 100]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], SLACKER=[$7])
  LogicalFilter(condition=[>($0, 100)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], SLACKER=[$8])
      LogicalFilter(condition=[AND(=($7, 20), >($5, 1000))])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInsertView">
        <Resource name="sql">
            <![CDATA[insert into emp_20 (empno, ename) values (150, 'Fred')]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[INSERT], flattened=[true])
  LogicalFilter(condition=[>($5, 1000)])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[CAST($2):VARCHAR(10) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], MGR=[$3], HIREDATE=[CAST($4):TIMESTAMP(0) NOT NULL], SAL=[CAST($5):INTEGER NOT NULL], COMM=[CAST($6):INTEGER NOT NULL], DEPTNO=[20], SLACKER=[CAST($7):BOOLEAN NOT NULL])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[null], MGR=[null], HIREDATE=[null], SAL=[null], COMM=[null], SLACKER=[null])
        LogicalValues(tuples=[[{ 150, 'Fred' }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInsertWithCustomColumnResolving">
        <Resource name="sql">
            <![CDATA[insert into struct.t values (?, ?, ?, ?, ?, ?, ?, ?, ?)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, STRUCT, T]], operation=[INSERT], flattened=[true])
  LogicalProject("K0"=[?0], "C1"=[?1], "F1"."A0"=[?2], "F2"."A0"=[?3], "F0"."C0"=[?4], "F1"."C0"=[?5], "F0"."C1"=[?6], "F1"."C2"=[?7], "F2"."C3"=[?8])
    LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInsertWithCustomColumnResolving2">
        <Resource name="sql">
            <![CDATA[insert into struct.t (c0, c2, c1) values (?, ?, ?)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, STRUCT, T]], operation=[INSERT], flattened=[true])
  LogicalProject("K0"=[null], "C1"=[$2], "F1"."A0"=[null], "F2"."A0"=[null], "F0"."C0"=[$0], "F1"."C0"=[null], "F0"."C1"=[null], "F1"."C2"=[$1], "F2"."C3"=[null])
    LogicalProject(EXPR$0=[?0], EXPR$1=[?1], EXPR$2=[?2])
      LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInsertViewWithCustomColumnResolving">
        <Resource name="sql">
            <![CDATA[insert into struct.t_10 (c0, c2, c1) values (?, ?, ?)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, STRUCT, T]], operation=[INSERT], flattened=[true])
  LogicalFilter(condition=[=($4, 10)])
    LogicalProject("K0"=[CAST($0):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], "C1"=[CAST($1):VARCHAR(20) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], "F1"."A0"=[CAST($2):INTEGER NOT NULL], "F2"."A0"=[CAST($3):BOOLEAN NOT NULL], "F0"."C0"=[CAST($4):INTEGER NOT NULL], "F1"."C0"=[$5], "F0"."C1"=[CAST($6):INTEGER NOT NULL], "F1"."C2"=[CAST($7):INTEGER NOT NULL], "F2"."C3"=[CAST($8):INTEGER NOT NULL])
      LogicalProject("K0"=[null], "C1"=[$2], "F1"."A0"=[null], "F2"."A0"=[null], "F0"."C0"=[$0], "F1"."C0"=[null], "F0"."C1"=[null], "F1"."C2"=[$1], "F2"."C3"=[null])
        LogicalProject(EXPR$0=[?0], EXPR$1=[?1], EXPR$2=[?2])
          LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUpdateWithCustomColumnResolving">
        <Resource name="sql">
            <![CDATA[update struct.t set c0 = c0 + 1]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, STRUCT, T]], operation=[UPDATE], updateColumnList=[["F0"."C0"]], sourceExpressionList=[[+($cor0."F0"."C0", 1)]], flattened=[true])
  LogicalProject("K0"=[$0], "C1"=[$1], "F1"."A0"=[$2], "F2"."A0"=[$3], "F0"."C0"=[$4], "F1"."C0"=[$5], "F0"."C1"=[$6], "F1"."C2"=[$7], "F2"."C3"=[$8], EXPR$0=[+($4, 1)])
    LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCustomColumnResolving">
        <Resource name="sql">
            <![CDATA[select k0 from struct.t]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(K0=[$0])
  LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCustomColumnResolving2">
        <Resource name="sql">
            <![CDATA[select c2 from struct.t]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(C2=[$7])
  LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCustomColumnResolving3">
        <Resource name="sql">
            <![CDATA[select f1.c2 from struct.t]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(C2=[$7])
  LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCustomColumnResolvingWithSelectStar">
        <Resource name="sql">
            <![CDATA[select * from struct.t]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject("K0"=[$0], "C1"=[$1], "F1"."A0"=[$2], "F2"."A0"=[$3], "F0"."C0"=[$4], "F1"."C0"=[$5], "F0"."C1"=[$6], "F1"."C2"=[$7], "F2"."C3"=[$8])
  LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCustomColumnResolvingWithSelectFieldNameDotStar">
        <Resource name="sql">
            <![CDATA[select f1.* from struct.t]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject("F1"."A0"=[$2], "F1"."C0"=[$5], "F1"."C2"=[$7])
  LogicalTableScan(table=[[CATALOG, STRUCT, T]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowAggWithGroupBy">
        <Resource name="sql">
            <![CDATA[select min(deptno), rank() over (order by empno),
max(empno) over (partition by deptno)
from emp group by deptno, empno
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$2], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$2=[MAX($1) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0, 1}], EXPR$0=[MIN($0)])
    LogicalProject(DEPTNO=[$7], EMPNO=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowAverageWithGroupBy">
        <Resource name="sql">
            <![CDATA[select avg(deptno) over ()
from emp
group by deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[CAST(/(SUM($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), COUNT($0) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING))):INTEGER NOT NULL])
  LogicalAggregate(group=[{0}])
    LogicalProject(DEPTNO=[$7])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowAggWithGroupByAndJoin">
        <Resource name="sql">
            <![CDATA[select min(d.deptno), rank() over (order by e.empno),
 max(e.empno) over (partition by e.deptno)
from emp e, dept d
where e.deptno = d.deptno
group by d.deptno, e.empno, e.deptno
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$3], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$2=[MAX($1) OVER (PARTITION BY $2 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MIN($0)])
    LogicalProject(DEPTNO0=[$9], EMPNO=[$0], DEPTNO=[$7])
      LogicalFilter(condition=[=($7, $9)])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowAggWithGroupByAndHaving">
        <Resource name="sql">
            <![CDATA[select min(deptno), rank() over (order by empno),
max(empno) over (partition by deptno)
from emp group by deptno, empno
having empno < 10 and min(deptno) < 20
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$2], EXPR$1=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$2=[MAX($1) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
  LogicalFilter(condition=[AND(<($1, 10), <($2, 20))])
    LogicalAggregate(group=[{0, 1}], EXPR$0=[MIN($0)])
      LogicalProject(DEPTNO=[$7], EMPNO=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWindowAggInSubQueryJoin">
        <Resource name="sql">
            <![CDATA[select T.x, T.y, T.z, emp.empno
from (select min(deptno) as x,
   rank() over (order by empno) as y,
   max(empno) over (partition by deptno) as z
   from emp group by deptno, empno) as T
 inner join emp on T.x = emp.deptno
 and T.y = emp.empno
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(X=[$0], Y=[$1], Z=[$2], EMPNO=[$3])
  LogicalJoin(condition=[AND(=($0, $10), =($1, $3))], joinType=[inner])
    LogicalProject(X=[$2], Y=[RANK() OVER (ORDER BY $1 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], Z=[MAX($1) OVER (PARTITION BY $0 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)])
      LogicalAggregate(group=[{0, 1}], X=[MIN($0)])
        LogicalProject(DEPTNO=[$7], EMPNO=[$0])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOrderByOver">
        <Resource name="sql">
            <![CDATA[select deptno, rank() over(partition by empno order by deptno)
from emp order by row_number() over(partition by empno order by deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], EXPR$1=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(DEPTNO=[$7], EXPR$1=[RANK() OVER (PARTITION BY $0 ORDER BY $7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], EXPR$2=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $7 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testValuesUsing">
        <Resource name="sql">
            <![CDATA[select d.deptno, min(e.empid) as empid
from (values (100, 'Bill', 1)) as e(empid, name, deptno)
join (values (1, 'LeaderShip')) as d(deptno, name)
  using (deptno)
group by d.deptno]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], EMPID=[MIN($1)])
  LogicalProject(DEPTNO=[$3], EXPR$0=[$0])
    LogicalJoin(condition=[=($2, $3)], joinType=[inner])
      LogicalValues(tuples=[[{ 100, 'Bill', 1 }]])
      LogicalValues(tuples=[[{ 1, 'LeaderShip' }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationScalarAggAndFilter">
        <Resource name="sql">
            <![CDATA[SELECT e1.empno
FROM emp e1, dept d1 where e1.deptno = d1.deptno
and e1.deptno < 10 and d1.deptno < 15
and e1.sal > (select avg(sal) from emp e2 where e1.empno = e2.empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EXPR$0=[$12])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[CAST($11):INTEGER], EXPR$0=[CAST($12):INTEGER])
      LogicalJoin(condition=[AND(=($0, $11), >($5, $12))], joinType=[inner])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalFilter(condition=[<($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalFilter(condition=[<($0, 15)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])
          LogicalProject(EMPNO0=[$1], SAL=[$0])
            LogicalProject(SAL=[$5], EMPNO0=[$9])
              LogicalJoin(condition=[=($9, $0)], joinType=[inner])
                LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                LogicalAggregate(group=[{0}])
                  LogicalProject(EMPNO=[$0])
                    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                      LogicalFilter(condition=[<($7, 10)])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                      LogicalFilter(condition=[<($0, 15)])
                        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationMultiScalarAggregate">
        <Resource name="sql">
            <![CDATA[select sum(e1.empno)
from emp e1, dept d1 where e1.deptno = d1.deptno
and e1.sal > (select avg(sal) from emp e2 where e2.deptno = d1.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(EMPNO=[$0])
    LogicalProject(EMPNO=[$0])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EXPR$0=[$12])
        LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], DEPTNO00=[CAST($11):INTEGER], EXPR$0=[CAST($12):INTEGER])
          LogicalJoin(condition=[AND(=($9, $11), >($5, $12))], joinType=[inner])
            LogicalJoin(condition=[=($7, $9)], joinType=[inner])
              LogicalTableScan(table=[[CATALOG, SALES, EMP]])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
            LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])
              LogicalProject(DEPTNO0=[$1], SAL=[$0])
                LogicalProject(SAL=[$5], DEPTNO0=[$9])
                  LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                    LogicalAggregate(group=[{0}])
                      LogicalProject(DEPTNO0=[$9])
                        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationExistsAndFilter">
        <Resource name="sql">
            <![CDATA[SELECT e1.empno
FROM emp e1, dept d1 where e1.deptno = d1.deptno
and e1.deptno < 10 and d1.deptno < 15
and exists (select * from emp e2 where e1.empno = e2.empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], $f0=[$12])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[CAST($11):INTEGER], $f1=[CAST($12):BOOLEAN])
      LogicalJoin(condition=[=($0, $11)], joinType=[inner])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalFilter(condition=[<($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalFilter(condition=[<($0, 15)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject(EMPNO0=[$1], $f0=[$0])
            LogicalProject($f0=[true], EMPNO0=[$9])
              LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EMPNO0=[$9])
                LogicalJoin(condition=[=($9, $0)], joinType=[inner])
                  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(EMPNO=[$0])
                      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                        LogicalFilter(condition=[<($7, 10)])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                        LogicalFilter(condition=[<($0, 15)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationNotExistsAndFilter">
        <Resource name="sql">
            <![CDATA[SELECT e1.empno
FROM emp e1, dept d1 where e1.deptno = d1.deptno
and e1.deptno < 10 and d1.deptno < 15
and not exists (select * from emp e2 where e1.empno = e2.empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], $f0=[$12])
    LogicalFilter(condition=[IS NULL($12)])
      LogicalJoin(condition=[=($0, $11)], joinType=[left])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalFilter(condition=[<($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalFilter(condition=[<($0, 15)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject(EMPNO0=[$1], $f0=[$0])
            LogicalProject($f0=[true], EMPNO0=[$9])
              LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EMPNO0=[$9])
                LogicalJoin(condition=[=($9, $0)], joinType=[inner])
                  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(EMPNO=[$0])
                      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                        LogicalFilter(condition=[<($7, 10)])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                        LogicalFilter(condition=[<($0, 15)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testFakeStar">
        <Resource name="sql">
            <![CDATA[SELECT * FROM (VALUES (0, 0)) AS T(A, "*")]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(A=[$0], *=[$1])
  LogicalValues(tuples=[[{ 0, 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDeleteWhere">
        <Resource name="sql">
            <![CDATA[delete from emp where deptno = 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[DELETE], flattened=[true])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalFilter(condition=[=($7, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectWithoutFrom">
        <Resource name="sql">
            <![CDATA[select 2+2]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[+(2, 2)])
  LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUpdateWhere">
        <Resource name="sql">
            <![CDATA[update emp set empno = empno + 1 where deptno = 10]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[UPDATE], updateColumnList=[[EMPNO]], sourceExpressionList=[[+($cor0.EMPNO, 1)]], flattened=[true])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EXPR$0=[+($0, 1)])
    LogicalFilter(condition=[=($7, 10)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDelete">
        <Resource name="sql">
            <![CDATA[delete from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[DELETE], flattened=[true])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUpdate">
        <Resource name="sql">
            <![CDATA[update emp set empno = empno + 1]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[UPDATE], updateColumnList=[[EMPNO]], sourceExpressionList=[[+($cor0.EMPNO, 1)]], flattened=[true])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EXPR$0=[+($0, 1)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUpdateSubQuery">
        <Resource name="sql">
            <![CDATA[update emp
set empno = (
  select min(empno) from emp as e where e.deptno = emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalTableModify(table=[[CATALOG, SALES, EMP]], operation=[UPDATE], updateColumnList=[[EMPNO]], sourceExpressionList=[[]], flattened=[true])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EXPR$0=[$9])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EXPR$0=[$10])
      LogicalJoin(condition=[=($7, $9)], joinType=[left])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0}], EXPR$0=[MIN($1)])
          LogicalProject(DEPTNO0=[$1], EMPNO=[$0])
            LogicalProject(EMPNO=[$0], DEPTNO0=[$9])
              LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                LogicalAggregate(group=[{0}])
                  LogicalProject(DEPTNO=[$7])
                    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testOffset0">
        <Resource name="sql">
            <![CDATA[select * from emp offset 0]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideScalarSubQueryRex">
        <Resource name="sql">
            <![CDATA[select (
 with dept2 as (select * from dept where deptno > 10) select count(*) from dept2) as c
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(C=[$SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalProject(DEPTNO=[$0], NAME=[$1])
      LogicalFilter(condition=[>($0, 10)])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExistsRex">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[<=($0, $cor1.DEPTNO)])
  LogicalProject(DEPTNO=[$0], NAME=[$1])
    LogicalFilter(condition=[>=($0, $cor1.DEPTNO)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubQueryInSelectRex">
        <Resource name="sql">
            <![CDATA[select name, deptno in (
  select case when true then deptno else null end from emp)
from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(NAME=[$1], EXPR$1=[IN($0, {
LogicalProject(EXPR$0=[CAST($7):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectNotNullRex">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select deptno from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(IN($7, {
LogicalProject(DEPTNO=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
}))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryRex">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno not in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[NOT(IN($7, {
LogicalProject(DEPTNO=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
}))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotInUncorrelatedSubQueryInSelectRex">
        <Resource name="sql">
            <![CDATA[select empno, deptno not in (
  select case when true then deptno else null end from dept)
from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], EXPR$1=[NOT(IN($7, {
LogicalProject(EXPR$0=[CAST($0):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
}))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubQueryRex">
        <Resource name="sql">
            <![CDATA[select empno from emp where deptno in (select deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[IN($7, {
LogicalProject(DEPTNO=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWithInsideWhereExistsDecorrelateRex">
        <Resource name="sql">
            <![CDATA[select * from emp
where exists (
  with dept2 as (select * from dept where dept.deptno >= emp.deptno)
  select 1 from dept2 where deptno <= emp.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[<=($0, $cor1.DEPTNO)])
  LogicalProject(DEPTNO=[$0], NAME=[$1])
    LogicalFilter(condition=[>=($0, $cor1.DEPTNO)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCompositeInUncorrelatedSubQueryRex">
        <Resource name="sql">
            <![CDATA[select empno from emp where (empno, deptno) in (select deptno - 10, deptno from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[IN($0, $7, {
LogicalProject(EXPR$0=[-($0, 10)], DEPTNO=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnInSubQuery">
        <Resource name="sql">
            <![CDATA[select * from emp left join dept
on emp.empno = 1
or dept.deptno in (select deptno from emp where empno > 5)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[OR(=($0, 1), IN($9, {
LogicalProject(DEPTNO=[$7])
  LogicalFilter(condition=[>($0, 5)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
}))], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinOnExists">
        <Resource name="sql">
            <![CDATA[select * from emp left join dept
on emp.empno = 1
or exists (select deptno from emp where empno > dept.deptno + 5)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[OR(=($0, 1), EXISTS({
LogicalFilter(condition=[>($0, +($cor0.DEPTNO0, 5))])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
}))], joinType=[left])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInUncorrelatedSubQueryInHavingRex">
        <Resource name="sql">
            <![CDATA[select sum(sal) as s
from emp
group by deptno
having count(*) > 2
and deptno in (
  select case when true then deptno else null end from emp)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(S=[$1])
  LogicalFilter(condition=[AND(>($2, 2), IN($0, {
LogicalProject(EXPR$0=[CAST($7):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
}))])
    LogicalAggregate(group=[{0}], S=[SUM($1)], agg#1=[COUNT()])
      LogicalProject(DEPTNO=[$7], SAL=[$5])
        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUncorrelatedScalarSubQueryInGroupOrderRex">
        <Resource name="sql">
            <![CDATA[select sum(sal) as s
from emp
group by deptno
order by (select case when true then deptno else null end from emp) desc,
  count(*)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(S=[$0])
  LogicalSort(sort0=[$1], sort1=[$2], dir0=[DESC], dir1=[ASC])
    LogicalProject(S=[$1], EXPR$1=[$SCALAR_QUERY({
LogicalProject(EXPR$0=[CAST($7):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})], EXPR$2=[$2])
      LogicalAggregate(group=[{0}], S=[SUM($1)], agg#1=[COUNT()])
        LogicalProject(DEPTNO=[$7], SAL=[$5])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUncorrelatedScalarSubQueryInOrderRex">
        <Resource name="sql">
            <![CDATA[select ename
from emp
order by (select case when true then deptno else null end from emp) desc,
  ename]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(ENAME=[$0])
  LogicalSort(sort0=[$1], sort1=[$0], dir0=[DESC], dir1=[ASC])
    LogicalProject(ENAME=[$1], EXPR$1=[$SCALAR_QUERY({
LogicalProject(EXPR$0=[CAST($7):INTEGER])
  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUncorrelatedScalarSubQueryInAggregateRex">
        <Resource name="sql">
            <![CDATA[select sum((select min(deptno) from emp)) as s
from emp
group by deptno
]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(S=[$1])
  LogicalAggregate(group=[{0}], S=[SUM($1)])
    LogicalProject(DEPTNO=[$7], $f1=[$SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
  LogicalProject(DEPTNO=[$7])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnionInFrom">
        <Resource name="sql">
            <![CDATA[select x0, x1 from (
  select 'a' as x0, 'a' as x1, 'a' as x2 from emp
  union all
  select 'bb' as x0, 'bb' as x1, 'bb' as x2 from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(X0=[$0], X1=[$1])
  LogicalUnion(all=[true])
    LogicalProject(X0=['a'], X1=['a'], X2=['a'])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(X0=['bb'], X1=['bb'], X2=['bb'])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testWhereInCorrelated">
        <Resource name="sql">
            <![CDATA[select empno from emp as e
join dept as d using (deptno)
where e.sal in (
  select e2.sal from emp as e2 where e2.deptno > e.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[IN($5, {
LogicalProject(SAL=[$5])
  LogicalFilter(condition=[>($7, $cor0.DEPTNO)])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})], variablesSet=[[$cor0]])
    LogicalJoin(condition=[=($7, $9)], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testLateralDecorrelateRex">
        <Resource name="sql">
            <![CDATA[select * from emp,
 LATERAL (select * from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10])
  LogicalJoin(condition=[=($7, $11)], joinType=[inner])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalProject(DEPTNO=[$0], NAME=[$1], DEPTNO0=[$2])
      LogicalJoin(condition=[=($2, $0)], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}])
          LogicalProject(DEPTNO=[$7])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedDecorrelateRex">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
  LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNestedCorrelationsDecorrelatedRex">
        <Resource name="sql">
            <![CDATA[select *
from (select 2+deptno d2, 3+deptno d3 from emp) e
 where exists (select 1 from (select deptno+1 d1 from dept) d
 where d1=e.d2 and exists (select 2 from (select deptno+4 d4, deptno+5 d5, deptno+6 d6 from dept)
 where d4=d.d1 and d5=d.d1 and d6=e.d3))]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(D2=[$0], D3=[$1])
  LogicalProject(D2=[$0], D3=[$1], $f0=[$4])
    LogicalProject(D2=[$0], D3=[$1], D20=[CAST($2):INTEGER], D30=[$3], $f2=[CAST($4):BOOLEAN])
      LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[inner])
        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
        LogicalAggregate(group=[{0, 1}], agg#0=[MIN($2)])
          LogicalProject(D2=[$1], D3=[$2], $f0=[$0])
            LogicalProject($f0=[true], D2=[$1], D3=[$2])
              LogicalProject(EXPR$0=[1], D2=[$3], D3=[$2])
                LogicalJoin(condition=[=($0, $3)], joinType=[inner])
                  LogicalFilter(condition=[IS NOT NULL($1)])
                    LogicalProject(D1=[$0], $f0=[$4], D3=[$3])
                      LogicalJoin(condition=[AND(=($0, $1), =($0, $2))], joinType=[left])
                        LogicalProject(D1=[+($0, 1)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                        LogicalAggregate(group=[{0, 1, 2}], agg#0=[MIN($3)])
                          LogicalProject(D1=[$1], D12=[$2], D3=[$3], $f0=[$0])
                            LogicalProject($f0=[true], D1=[$1], D12=[$2], D3=[$3])
                              LogicalProject(EXPR$0=[2], D1=[$3], D12=[$3], D3=[$4])
                                LogicalJoin(condition=[AND(=($0, $3), =($1, $3), =($2, $4))], joinType=[inner])
                                  LogicalProject(D4=[+($0, 4)], D5=[+($0, 5)], D6=[+($0, 6)])
                                    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                  LogicalJoin(condition=[true], joinType=[inner])
                                    LogicalAggregate(group=[{0}])
                                      LogicalProject(D1=[+($0, 1)])
                                        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
                                    LogicalAggregate(group=[{0}])
                                      LogicalProject(D3=[$1])
                                        LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(D2=[$0])
                      LogicalProject(D2=[+(2, $7)], D3=[+(3, $7)])
                        LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testJoinUnnestRex">
        <Resource name="sql">
            <![CDATA[select*from dept as d, unnest(multiset[d.deptno * 2])]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EXPR$0=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Uncollect
      LogicalProject(EXPR$0=[$SLICE($0)])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[*($cor0.DEPTNO, 2)])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationScalarAggAndFilterRex">
        <Resource name="sql">
            <![CDATA[SELECT e1.empno
FROM emp e1, dept d1 where e1.deptno = d1.deptno
and e1.deptno < 10 and d1.deptno < 15
and e1.sal > (select avg(sal) from emp e2 where e1.empno = e2.empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[AND(=($7, $9), <($7, 10), <($9, 15), >($5, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(SAL=[$5])
    LogicalFilter(condition=[=($cor0.EMPNO, $0)])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
})))], variablesSet=[[$cor0]])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testExistsCorrelatedLimitDecorrelateRex">
        <Resource name="sql">
            <![CDATA[select*from emp where exists (
  select 1 from dept where emp.deptno=dept.deptno limit 1)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[EXISTS({
LogicalSort(fetch=[1])
  LogicalProject(EXPR$0=[1])
    LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
      LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
})], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testUnnestSelectRex">
        <Resource name="sql">
            <![CDATA[select*from unnest(select multiset[deptno] from dept)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=[$0])
  Uncollect
    LogicalProject(EXPR$0=[$SLICE($2)])
      LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
        LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        Collect(field=[EXPR$0])
          LogicalUnion(all=[true])
            LogicalProject(EXPR$0=[$cor0.DEPTNO])
              LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationExistsAndFilterRex">
        <Resource name="sql">
            <![CDATA[SELECT e1.empno
FROM emp e1, dept d1 where e1.deptno = d1.deptno
and e1.deptno < 10 and d1.deptno < 15
and exists (select * from emp e2 where e1.empno = e2.empno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], $f0=[$12])
    LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], DEPTNO0=[$9], NAME=[$10], EMPNO0=[CAST($11):INTEGER], $f1=[CAST($12):BOOLEAN])
      LogicalJoin(condition=[=($0, $11)], joinType=[inner])
        LogicalJoin(condition=[=($7, $9)], joinType=[inner])
          LogicalFilter(condition=[<($7, 10)])
            LogicalTableScan(table=[[CATALOG, SALES, EMP]])
          LogicalFilter(condition=[<($0, 15)])
            LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
        LogicalAggregate(group=[{0}], agg#0=[MIN($1)])
          LogicalProject(EMPNO0=[$1], $f0=[$0])
            LogicalProject($f0=[true], EMPNO0=[$9])
              LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8], EMPNO0=[$9])
                LogicalJoin(condition=[=($9, $0)], joinType=[inner])
                  LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                  LogicalAggregate(group=[{0}])
                    LogicalProject(EMPNO=[$0])
                      LogicalJoin(condition=[=($7, $9)], joinType=[inner])
                        LogicalFilter(condition=[<($7, 10)])
                          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
                        LogicalFilter(condition=[<($0, 15)])
                          LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testCorrelationJoinRex">
        <Resource name="sql">
            <![CDATA[select *,
  multiset(select * from emp where deptno=dept.deptno) as empset
from dept]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(DEPTNO=[$0], NAME=[$1], EMPSET=[$2])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{0}])
    LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
    Collect(field=[EXPR$0])
      LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
        LogicalFilter(condition=[=($7, $cor0.DEPTNO)])
          LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testMultisetOfColumnsRex">
        <Resource name="sql">
            <![CDATA[select 'abc',multiset[deptno,sal] from emp]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EXPR$0=['abc'], EXPR$1=[$SLICE($9)])
  LogicalCorrelate(correlation=[$cor0], joinType=[INNER], requiredColumns=[{5, 7}])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    Collect(field=[EXPR$0])
      LogicalUnion(all=[true])
        LogicalProject(EXPR$0=[$cor0.DEPTNO])
          LogicalValues(tuples=[[{ 0 }]])
        LogicalProject(EXPR$0=[$cor0.SAL])
          LogicalValues(tuples=[[{ 0 }]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testNotExistsCorrelated">
        <Resource name="sql">
            <![CDATA[select * from emp where not exists (
  select 1 from dept where emp.deptno=dept.deptno)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(EMPNO=[$0], ENAME=[$1], JOB=[$2], MGR=[$3], HIREDATE=[$4], SAL=[$5], COMM=[$6], DEPTNO=[$7], SLACKER=[$8])
  LogicalFilter(condition=[NOT(IS NOT NULL($9))])
    LogicalCorrelate(correlation=[$cor0], joinType=[LEFT], requiredColumns=[{7}])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(EXPR$0=[1])
            LogicalFilter(condition=[=($cor0.DEPTNO, $0)])
              LogicalTableScan(table=[[CATALOG, SALES, DEPT]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectFromDynamicTable">
        <Resource name="sql">
            <![CDATA[select n_nationkey, n_name from SALES.NATION]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(N_NATIONKEY=[$0], N_NAME=[$1])
  LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelectStarFromDynamicTable">
        <Resource name="sql">
            <![CDATA[select * from SALES.NATION]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(**=[$0])
  LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReferDynamicStarInSelectOB">
        <Resource name="sql">
            <![CDATA[select n_nationkey, n_name
from (select * from SALES.NATION)
order by n_regionkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(N_NATIONKEY=[$0], N_NAME=[$1])
  LogicalSort(sort0=[$2], dir0=[ASC])
    LogicalProject(N_NATIONKEY=[ITEM($0, 'N_NATIONKEY')], N_NAME=[ITEM($0, 'N_NAME')], EXPR$2=[ITEM($0, 'N_REGIONKEY')])
      LogicalProject(**=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDynamicStarInTableJoin">
        <Resource name="sql">
            <![CDATA[select * from  (select * from SALES.NATION) T1,  (SELECT * from SALES.CUSTOMER) T2  where T1.n_nationkey = T2.c_nationkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(**=[$0], **0=[$1])
  LogicalFilter(condition=[=(ITEM($0, 'N_NATIONKEY'), ITEM($1, 'C_NATIONKEY'))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalProject(**=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, NATION]])
      LogicalProject(**=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testReferDynamicStarInSelectWhereGB">
        <Resource name="sql">
            <![CDATA[select n_regionkey, count(*) as cnt from (select * from SALES.NATION) where n_nationkey > 5 group by n_regionkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}], CNT=[COUNT()])
  LogicalProject(N_REGIONKEY=[ITEM($0, 'N_REGIONKEY')])
    LogicalFilter(condition=[>(ITEM($0, 'N_NATIONKEY'), 5)])
      LogicalProject(**=[$0])
        LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDynamicStarInJoinAndSubQ">
        <Resource name="sql">
            <![CDATA[select * from  (select * from SALES.NATION T1,  SALES.CUSTOMER T2 where T1.n_nationkey = T2.c_nationkey)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(**=[$0], **0=[$1])
  LogicalProject(**=[$1], **0=[$3])
    LogicalFilter(condition=[=($0, $2)])
      LogicalJoin(condition=[true], joinType=[inner])
        LogicalTableScan(table=[[CATALOG, SALES, NATION]])
        LogicalTableScan(table=[[CATALOG, SALES, CUSTOMER]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testStarJoinStaticDynTable">
        <Resource name="sql">
            <![CDATA[select * from SALES.NATION N, SALES.REGION as R where N.n_regionkey = R.r_regionkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(**=[$1], R_REGIONKEY=[$2], R_NAME=[$3], R_COMMENT=[$4])
  LogicalFilter(condition=[=($0, $2)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[CATALOG, SALES, NATION]])
      LogicalTableScan(table=[[CATALOG, SALES, REGION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testGrpByColFromStarInSubQuery">
        <Resource name="sql">
            <![CDATA[SELECT n.n_nationkey AS col  from (SELECT * FROM SALES.NATION) as n  group by n.n_nationkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalAggregate(group=[{0}])
  LogicalProject(COL=[ITEM($0, 'N_NATIONKEY')])
    LogicalProject(**=[$0])
      LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testDynStarInExistSubQ">
        <Resource name="sql">
            <![CDATA[select *
from SALES.REGION where exists (select * from SALES.NATION)]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(R_REGIONKEY=[$0], R_NAME=[$1], R_COMMENT=[$2])
  LogicalFilter(condition=[IS NOT NULL($3)])
    LogicalJoin(condition=[true], joinType=[left])
      LogicalTableScan(table=[[CATALOG, SALES, REGION]])
      LogicalAggregate(group=[{}], agg#0=[MIN($0)])
        LogicalProject($f0=[true])
          LogicalProject(**=[$0])
            LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testSelStarOrderBy">
        <Resource name="sql">
            <![CDATA[SELECT * from SALES.NATION order by n_nationkey]]>
        </Resource>
        <Resource name="plan">
            <![CDATA[
LogicalProject(**=[$0])
  LogicalSort(sort0=[$1], dir0=[ASC])
    LogicalProject(**=[$0], N_NATIONKEY=[$1])
      LogicalTableScan(table=[[CATALOG, SALES, NATION]])
]]>
        </Resource>
    </TestCase>
    <TestCase name="testInToSemiJoin">
        <Resource name="sql">
            <![CDATA[SELECT empno FROM emp AS e WHERE cast(e.empno as bigint) in (130, 131, 132, 133, 134)]]>
        </Resource>
        <Resource name="planNotConverted">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalFilter(condition=[OR(=(CAST($0):BIGINT NOT NULL, 130), =(CAST($0):BIGINT NOT NULL, 131), =(CAST($0):BIGINT NOT NULL, 132), =(CAST($0):BIGINT NOT NULL, 133), =(CAST($0):BIGINT NOT NULL, 134))])
    LogicalTableScan(table=[[CATALOG, SALES, EMP]])
]]>
        </Resource>
        <Resource name="planConverted">
            <![CDATA[
LogicalProject(EMPNO=[$0])
  LogicalJoin(condition=[=($9, $10)], joinType=[inner])
    LogicalProject($f0=[$0], $f1=[$1], $f2=[$2], $f3=[$3], $f4=[$4], $f5=[$5], $f6=[$6], $f7=[$7], $f8=[$8], $f9=[CAST($0):BIGINT NOT NULL])
      LogicalTableScan(table=[[CATALOG, SALES, EMP]])
    LogicalAggregate(group=[{0}])
      LogicalValues(tuples=[[{ 130 }, { 131 }, { 132 }, { 133 }, { 134 }]])
]]>
        </Resource>
    </TestCase>
</Root>
