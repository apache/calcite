# spatial.iq - Geo-spatial functions
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use geo
!set outputformat csv

# Check that the data set is OK.
select count(*) as c from GEO."countries";
C
245
!ok

#### Geometry conversion functions (2D)

# ST_AsBinary(geom) Geometry to Well Known Binary
# Not implemented

# ST_AsGML(geom) Geometry to GML
# Not implemented

# ST_AsText(geom) Alias for `ST_AsWKT`
SELECT ST_AsText(ST_GeomFromText('POINT(-71.064544 42.28787)'));
EXPR$0
POINT (-71.064544 42.28787)
!ok

# ST_AsWKT(geom) Converts *geom* â†’ Well-Known Text

SELECT ST_AsWKT(ST_GeomFromText('POINT(-71.064544 42.28787)'));
EXPR$0
POINT (-71.064544 42.28787)
!ok

# PostGIS can implicitly assign from CHAR to GEOMETRY; we can't
!if (false) {
# ST_AsWKT(geom) Geometry to Well Known Text
SELECT ST_AsText('01030000000100000005000000000000000000
000000000000000000000000000000000000000000000000
F03F000000000000F03F000000000000F03F000000000000F03
F000000000000000000000000000000000000000000000000');
!ok
!}

SELECT ST_AsWKT(CAST(NULL AS GEOMETRY));
EXPR$0
null
!ok

# ST_Force2D(geom) 3D Geometry to 2D Geometry
# Not implemented

# ST_GeomFromGML(gml [, srid ]) GML to Geometry
# Not implemented

# ST_GeomFromText(wkt [, srid ]) Returns a specified geometry value from Well-Known Text representation

SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)');
EXPR$0
{"paths":[[[-71.160281,42.258729],[-71.160837,42.259113],[-71.161144,42.25932]]]}
!ok

SELECT ST_GeomFromText('LINESTRING(-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932)',4269);
EXPR$0
{"paths":[[[-71.160281,42.258729],[-71.160837,42.259113],[-71.161144,42.25932]]],"spatialReference":{"wkid":4269}}
!ok

SELECT ST_GeomFromText('MULTILINESTRING((-71.160281 42.258729,-71.160837 42.259113,-71.161144 42.25932))');
EXPR$0
{"paths":[[[-71.160281,42.258729],[-71.160837,42.259113],[-71.161144,42.25932]]]}
!ok

SELECT ST_GeomFromText('POINT(-71.064544 42.28787)');
EXPR$0
{"x":-71.064544,"y":42.28787}
!ok

SELECT ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
-71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))');
EXPR$0
{"rings":[[[-71.1776585052917,42.3902909739571],[-71.1776820268866,42.3903701743239],[-71.1776063012595,42.3903825660754],[-71.1775826583081,42.3903033653531],[-71.1776585052917,42.3902909739571]]]}
!ok

SELECT ST_GeomFromText('MULTIPOLYGON(((-71.1031880899493 42.3152774590236,
-71.1031627617667 42.3152960829043,-71.102923838298 42.3149156848307,
-71.1023097974109 42.3151969047397,-71.1019285062273 42.3147384934248,
-71.102505233663 42.3144722937587,-71.10277487471 42.3141658254797,
-71.103113945163 42.3142739188902,-71.10324876416 42.31402489987,
-71.1033002961013 42.3140393340215,-71.1033488797549 42.3139495090772,
-71.103396240451 42.3138632439557,-71.1041521907712 42.3141153348029,
-71.1041411411543 42.3141545014533,-71.1041287795912 42.3142114839058,
-71.1041188134329 42.3142693656241,-71.1041112482575 42.3143272556118,
-71.1041072845732 42.3143851580048,-71.1041057218871 42.3144430686681,
-71.1041065602059 42.3145009876017,-71.1041097995362 42.3145589148055,
-71.1041166403905 42.3146168544148,-71.1041258822717 42.3146748022936,
-71.1041375307579 42.3147318674446,-71.1041492906949 42.3147711126569,
-71.1041598612795 42.314808571739,-71.1042515013869 42.3151287620809,
-71.1041173835118 42.3150739481917,-71.1040809891419 42.3151344119048,
-71.1040438678912 42.3151191367447,-71.1040194562988 42.3151832057859,
-71.1038734225584 42.3151140942995,-71.1038446938243 42.3151006300338,
-71.1038315271889 42.315094347535,-71.1037393329282 42.315054824985,
-71.1035447555574 42.3152608696313,-71.1033436658644 42.3151648370544,
-71.1032580383161 42.3152269126061,-71.103223066939 42.3152517403219,
-71.1031880899493 42.3152774590236)),
((-71.1043632495873 42.315113108546,-71.1043583974082 42.3151211109857,
-71.1043443253471 42.3150676015829,-71.1043850704575 42.3150793250568,-71.1043632495873 42.315113108546)))',4326);
EXPR$0
{"rings":[[[-71.1031880899493,42.3152774590236],[-71.1031627617667,42.3152960829043],[-71.102923838298,42.3149156848307],[-71.1023097974109,42.3151969047397],[-71.1019285062273,42.3147384934248],[-... (1697 characters)
!ok

# Disabled: Should not return null
!if (false) {
SELECT ST_GeomFromText('GEOMETRYCOLLECTION(
  POLYGON((-7 4.2,-7.1 4.2,-7.1 4.3,-7 4.2))
  POINT(5 5)
  POINT(-2 3)
  LINESTRING(5 5, 10 10)');
EXPR$0
!ok
!}

# PostGIS does CIRCULARSTRING; we don't currently
!if (false) {
SELECT ST_GeomFromText('CIRCULARSTRING(220268 150415,220227 150505,220227 150406)');
!ok
!}

# In PostGIS prior to 2.0, ST_GeomFromText('GEOMETRYCOLLECTION(EMPTY)') was allowed
# but ST_GeomFromText('GEOMETRYCOLLECTION EMPTY') is not preferred.
SELECT ST_GeomFromText('GEOMETRYCOLLECTION EMPTY');
EXPR$0
null
!ok

# ST_GeomFromWKB(wkb [, srid ]) Well Known Binary to Geometry
# Not implemented

# ST_GoogleMapLink(geom [, layerType [, zoom ]]) Geometry to Google map link
# Not implemented

# ST_LineFromText(wkt [, srid ]) Well Known Text to LINESTRING
SELECT ST_LineFromText('LINESTRING(1 2, 3 4)') AS aline,
  ST_LineFromText('POINT(1 2)') AS null_return;
ALINE, NULL_RETURN
{"paths":[[[1,2],[3,4]]]}, {"x":1,"y":2}
!ok

# ST_LineFromWKB(wkb [, srid ]) Well Known Binary to LINESTRING
# Not implemented

# ST_MLineFromText(wkt [, srid ]) Well Known Text to MULTILINESTRING
SELECT ST_MLineFromText('MULTILINESTRING((1 2, 3 4), (4 5, 6 7))');
EXPR$0
{"paths":[[[1,2],[3,4]],[[4,5],[6,7]]]}
!ok

# ST_MPointFromText(wkt [, srid ]) Well Known Text to MULTIPOINT
SELECT ST_MPointFromText('MULTIPOINT(1 2, 3 4)');
EXPR$0
{"points":[[1,2],[3,4]]}
!ok

SELECT ST_MPointFromText('MULTIPOINT(-70.9590 42.1180, -70.9611 42.1223)', 4326);
EXPR$0
{"points":[[-70.959,42.118],[-70.9611,42.1223]],"spatialReference":{"wkid":4326}}
!ok

# ST_MPolyFromText(wkt [, srid ]) Well Known Text to MULTIPOLYGON
SELECT ST_MPolyFromText('MULTIPOLYGON Z(((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1),(5 5 3,5 7 3,7 7 3,7 5 3,5 5 3)))');
EXPR$0
{"hasZ":true,"rings":[[[0,0,1],[0,20,1],[20,20,1],[20,0,1],[0,0,1]],[[5,5,3],[7,5,3],[7,7,3],[5,7,3],[5,5,3]]]}
!ok

SELECt ST_MPolyFromText('MULTIPOLYGON(((-70.916 42.1002,-70.9468 42.0946,-70.9765 42.0872,-70.9754 42.0875,-70.9749 42.0879,-70.9752 42.0881,-70.9754 42.0891,-70.9758 42.0894,-70.9759 42.0897,-70.9759 42.0899,-70.9754 42.0902,-70.9756 42.0906,-70.9753 42.0907,-70.9753 42.0917,-70.9757 42.0924,-70.9755 42.0928,-70.9755 42.0942,-70.9751 42.0948,-70.9755 42.0953,-70.9751 42.0958,-70.9751 42.0962,-70.9759 42.0983,-70.9767 42.0987,-70.9768 42.0991,-70.9771 42.0997,-70.9771 42.1003,-70.9768 42.1005,-70.977 42.1011,-70.9766 42.1019,-70.9768 42.1026,-70.9769 42.1033,-70.9775 42.1042,-70.9773 42.1043,-70.9776 42.1043,-70.9778 42.1048,-70.9773 42.1058,-70.9774 42.1061,-70.9779 42.1065,-70.9782 42.1078,-70.9788 42.1085,-70.9798 42.1087,-70.9806 42.109,-70.9807 42.1093,-70.9806 42.1099,-70.9809 42.1109,-70.9808 42.1112,-70.9798 42.1116,-70.9792 42.1127,-70.979 42.1129,-70.9787 42.1134,-70.979 42.1139,-70.9791 42.1141,-70.9987 42.1116,-71.0022 42.1273,
    -70.9408 42.1513,-70.9315 42.1165,-70.916 42.1002)))',4326);
EXPR$0
{"rings":[[[-70.916,42.1002],[-70.9468,42.0946],[-70.9765,42.0872],[-70.9754,42.0875],[-70.9749,42.0879],[-70.9752,42.0881],[-70.9754,42.0891],[-70.9758,42.0894],[-70.9759,42.0897],[-70.9759,42.089... (1123 characters)
!ok

# ST_OSMMapLink(geom [, marker ]) Geometry to OSM map link
# Not implemented

# ST_PointFromText(wkt [, srid ]) Well Known Text to POINT
SELECT ST_PointFromText('POINT(-71.064544 42.28787)');
EXPR$0
{"x":-71.064544,"y":42.28787}
!ok

SELECT ST_PointFromText('POINT(-71.064544 42.28787)', 4326);
EXPR$0
{"x":-71.064544,"y":42.28787,"spatialReference":{"wkid":4326}}
!ok

# ST_PointFromWKB(wkb [, srid ]) Well Known Binary to POINT
# Not implemented

# ST_PolyFromText(wkt [, srid ]) Well Known Text to POLYGON
SELECT ST_PolyFromText('POLYGON Z((0 0 1,20 0 1,20 20 1,0 20 1,0 0 1))');
EXPR$0
{"hasZ":true,"rings":[[[0,0,1],[0,20,1],[20,20,1],[20,0,1],[0,0,1]]]}
!ok

SELECT ST_PolyFromText(CAST(NULL AS VARCHAR));
EXPR$0
null
!ok

SELECT ST_PolyFromText('POLYGON((0 0))');
EXPR$0
{"rings":[[[0,0],[0,0]]]}
!ok

# ST_PolyFromWKB(wkb [, srid ]) Well Known Binary to POLYGON
# Not implemented

# ST_ToMultiLine(geom) Converts the coordinates of *geom* (which may be a geometry-collection) into a multi-line-string
# Not implemented

# ST_ToMultiPoint(geom)) Converts the coordinates of *geom* (which may be a geometry-collection) into a multi-point
# Not implemented

# ST_ToMultiSegments(geom) Converts *geom* (which may be a geometry-collection) into a set of distinct segments stored in a multi-line-string
# Not implemented

#### Geometry conversion functions (3D)

# ST_Force3D(geom) 2D Geometry to 3D Geometry
# Not implemented

#### Geometry creation functions (2D)

# ST_BoundingCircle(geom) Returns the minimum bounding circle of *geom*
# Not implemented

# ST_Expand(geom, distance) Expands *geom*'s envelope
# Not implemented

# ST_Expand(geom, deltaX, deltaY) Expands *geom*'s envelope
# Not implemented

# ST_MakeEllipse(point, width, height) Constructs an ellipse
# Not implemented

# ST_MakeEnvelope(xMin, yMin, xMax, yMax  [, srid ]) Creates a rectangular Polygon
# Not implemented

# ST_MakeGrid(geom, deltaX, deltaY) Calculates a regular grid of polygons based on *geom*
# Not implemented

# ST_MakeGridPoints(geom, deltaX, deltaY) Calculates a regular grid of points based on *geom*
# Not implemented

# ST_MakeLine(point1 [, point ]*) Creates a line-string from the given points (or multi-points)

SELECT ST_MakeLine(ST_Point(1.0,1.0), ST_Point(-1.0,-1.0));
EXPR$0
{"paths":[[[1,1],[-1,-1]]]}
!ok

SELECT ST_MakeLine(ST_Point(1.0,1.0), ST_Point(-1.0,-1.0), ST_Point(-3.0,0.0));
EXPR$0
{"paths":[[[1,1],[-1,-1],[-3,0]]]}
!ok

# ST_MakePoint(x, y [, z ]) Constructs a point from two or three coordinates

# Return point with unknown SRID
SELECT ST_MakePoint(-71.1043443253471, 42.3150676015829);
EXPR$0
{"x":-71.1043443253471,"y":42.3150676015829}
!ok

# Return point marked as WGS 84 long lat
SELECT ST_SetSRID(ST_MakePoint(-71.1043443253471, 42.3150676015829),4326);
EXPR$0
{"x":-71.1043443253471,"y":42.3150676015829}
!ok

# Return a 3D point (e.g. has altitude)
SELECT ST_MakePoint(1.0, 2.0, 1.5);
EXPR$0
{"x":1,"y":2,"z":1.5}
!ok

# Get x of point
SELECT ST_X(ST_MakePoint(1.0, 2.0,1.5));
EXPR$0
1.0
!ok

# Get y of point
SELECT ST_Y(ST_MakePoint(1.0, 2.0,1.5));
EXPR$0
2.0
!ok

# Get z of point
SELECT ST_Z(ST_MakePoint(1.0, 2.0,1.5));
EXPR$0
1.5
!ok

select "name", ST_MakePoint("latitude", "longitude") AS p
from GEO."countries" AS c
ORDER BY "latitude" DESC LIMIT 3;
name, P
U.S.Minor Outlying Islands, null
Svalbard and Jan Mayen, {"x":77.553604,"y":23.670272}
Greenland, {"x":71.706936,"y":-42.604303}
!ok

# ST_MakePolygon(lineString [, hole ]*) Creates a polygon from *lineString* with the given holes (which are required to be closed line-strings)
# Not implemented

# ST_MinimumDiameter(geom) Returns the minimum diameter of *geom*
# Not implemented

# ST_MinimumRectangle(geom) Returns the minimum rectangle enclosing *geom*
# Not implemented

# ST_OctogonalEnvelope(geom) Returns the octogonal envelope of *geom*
# Not implemented

# ST_RingBuffer(geom, bufferSize, bufferCount [, endCapStyle [, doDifference]]) Returns a multi-polygon of buffers centered at *geom* and of increasing buffer size
# Not implemented

### Geometry creation functions (3D)

# ST_Extrude(geom, height [, flag]) Extrudes a geometry
# Not implemented

# ST_GeometryShadow(geom, point, height) Computes the shadow footprint of *geom*
# Not implemented

# ST_GeometryShadow(geom, azimuth, altitude, height [, unify ]) Computes the shadow footprint of *geom*
# Not implemented

#### Geometry properties (2D)

# ST_Boundary(geom [, srid ]) Returns the boundary of *geom*
SELECT ST_AsText(ST_Boundary(ST_GeomFromText('LINESTRING(1 1,0 0, -1 1)')));
EXPR$0
MULTIPOINT ((1 1), (-1 1))
!ok

SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON((1 1,0 0, -1 1, 1 1))')));
EXPR$0
MULTILINESTRING ((1 1, 0 0, -1 1, 1 1))
!ok

# Using a 3d polygon
SELECT ST_AsText(ST_Boundary(ST_GeomFromText('POLYGON Z((1 1 1,0 0 1, -1 1 1, 1 1 1))')));

EXPR$0
MULTILINESTRING Z ((1 1 1, 0 0 1, -1 1 1, 1 1 1))
!ok

# Using a 3d multilinestring
SELECT ST_AsText(ST_Boundary(ST_GeomFromText('MULTILINESTRING Z((1 1 1,0 0 0.5, -1 1 1),(1 1 0.5,0 0 0.5, -1 1 0.5, 1 1 0.5) )')));

EXPR$0
MULTIPOINT Z ((1 1 1), (-1 1 1))
!ok

# ST_Centroid(geom) Returns the centroid of *geom* (which may be a geometry-collection)
# Not implemented

# ST_CompactnessRatio(polygon) Returns the square root of *polygon*'s area divided by the area of the circle with circumference equal to its perimeter
# Not implemented

# ST_CoordDim(geom) Returns the dimension of the coordinates of *geom*
# Not implemented

# ST_Dimension(geom) Returns the dimension of *geom*
# Not implemented

# ST_Distance(geom1, geom2) Returns the distance between *geom1* and *geom2*

SELECT ST_Distance(
    ST_GeomFromText('POINT(10 10)'),
    ST_GeomFromText('POINT(40 50)'));
EXPR$0
50.0
!ok

SELECT ST_Distance(
    ST_GeomFromText('POINT(10 10)',4326),
    ST_GeomFromText('POINT(40 50)', 4326));
EXPR$0
50.0
!ok

# Geometry example - units in planar degrees 4326 is WGS 84 long lat unit=degrees
SELECT ST_Distance(
    ST_GeomFromText('POINT(-72.1235 42.3521)',4326),
    ST_GeomFromText('LINESTRING(-72.1260 42.45, -72.123 42.1546)', 4326));
EXPR$0
0.0015056772638282166
!ok

# Geometry example - units in meters (SRID: 26986 Massachusetts state plane meters) (most accurate for Massachusetts)
SELECT ST_Distance(
    ST_Transform(ST_GeomFromText('POINT(-72.1235 42.3521)',4326),26986),
    ST_Transform(ST_GeomFromText('LINESTRING(-72.1260 42.45, -72.123 42.1546)', 4326),26986));
EXPR$0
0.0015056772638282166
!ok

# Geometry example - units in meters (SRID: 2163 US National Atlas Equal area) (least accurate)
SELECT ST_Distance(
    ST_Transform(ST_GeomFromText('POINT(-72.1235 42.3521)',4326),2163),
    ST_Transform(ST_GeomFromText('LINESTRING(-72.1260 42.45, -72.123 42.1546)', 4326),2163));

EXPR$0
0.0015056772638282166
!ok

# Disabled: PostgreSQL does geography, Calcite does not
!if (false) {
# same as geometry example but note units in meters - use sphere for slightly faster less accurate
SELECT ST_Distance(gg1, gg2) As spheroid_dist, ST_Distance(gg1, gg2, false) As sphere_dist
FROM (SELECT
    ST_GeogFromText('SRID=4326;POINT(-72.1235 42.3521)') As gg1,
    ST_GeogFromText('SRID=4326;LINESTRING(-72.1260 42.45, -72.123 42.1546)') As gg2) As foo;

  spheroid_dist   |   sphere_dist
------------------+------------------
 123.802076746848 | 123.475736916397
!ok
!}

# ST_EndPoint(lineString) Returns the last coordinate of *lineString*
# Not implemented

# ST_Envelope(geom [, srid ]) Returns the envelope of *geom* (which may be a geometry-collection) as a geometry

SELECT ST_AsText(ST_Envelope(ST_GeomFromText('POINT(1 3)')));
EXPR$0
POLYGON ((1 3, 1 3, 1 3, 1 3, 1 3))
!ok

SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LINESTRING(0 0, 1 3)')));
EXPR$0
POLYGON ((0 0, 1 0, 1 3, 0 3, 0 0))
!ok

SELECT ST_AsText(ST_Envelope(ST_GeomFromText('POLYGON((0 0, 0 1, 1.0000001 1, 1.0000001 0, 0 0))')));
EXPR$0
POLYGON ((0 0, 1.0000001 0, 1.0000001 1, 0 1, 0 0))
!ok

SELECT ST_AsText(ST_Envelope(ST_GeomFromText('POLYGON((0 0, 0 1, 1.0000000001 1, 1.0000000001 0, 0 0))')));
EXPR$0
POLYGON ((0 0, 1.0000000001 0, 1.0000000001 1, 0 1, 0 0))
!ok

# ST_Explode(query [, fieldName]) Explodes the geometry-collections in the *fieldName* column of a query into multiple geometries
# Not implemented

# ST_Extent(geom) Returns the minimum bounding box of *geom* (which may be a geometry-collection)
# Not implemented

# ST_ExteriorRing(polygon) Returns the exterior ring of *polygon* as a linear-ring
# Not implemented

# ST_GeometryN(geomCollection, n) Returns the *n*th geometry of *geomCollection*
# Not implemented

# ST_GeometryType(geom) Returns the type of *geom*

SELECT ST_GeometryType(ST_Point(0.0, 0.0));
EXPR$0
POINT
!ok

# ST_GeometryTypeCode(geom) Returns the type code of *geom*

SELECT id, ST_GeometryType(g), ST_GeometryTypeCode(g) FROM (VALUES
 ('ls', ST_GeomFromText('LINESTRING(77.29 29.07,77.42 29.26,77.27 29.31,77.29 29.07)')),
 ('p', ST_Point(0.0, 0.0)),
 ('np', ST_Point(0.0, CAST(NULL AS DECIMAL))),
 ('mp', ST_GeomFromText('MULTIPOLYGON(((1 1, 2 2, 5 3, 1 1)),
                                       ((0 0, 2 2, 5 3, 0 0)))'))) AS t(id, g);
ID, EXPR$1, EXPR$2
ls, LINESTRING, 2
mp, POLYGON, 3
np, null, null
p , POINT, 1
!ok

# ST_InteriorRingN(polygon, n) Returns the *n*th interior ring of *polygon*
# Not implemented

# ST_IsClosed(geom) Returns whether *geom* is a closed line-string or multi-line-string
# Not implemented

# ST_IsEmpty(geom) Returns whether *geom* is empty
# Not implemented

# ST_IsRectangle(geom) Returns whether *geom* is a rectangle
# Not implemented

# ST_IsRing(geom) Returns whether *geom* is a closed and simple line-string or multi-line-string
# Not implemented

# ST_IsSimple(geom) Returns whether *geom* is simple
# Not implemented

# ST_IsValid(geom) Returns whether *geom* is valid
# Not implemented

# ST_IsValidDetail(geom [, selfTouchValid ]) Returns a valid detail as an array of objects
# Not implemented

# ST_IsValidReason(geom [, selfTouchValid ]) Returns text stating whether *geom* is valid, and if not valid, a reason why
# Not implemented

# ST_NPoints(geom) Returns the number of points in *geom*
# Not implemented

# ST_NumGeometries(geom) Returns the number of geometries in *geom* (1 if it is not a geometry-collection)
# Not implemented

# ST_NumInteriorRing(geom) Alias for `ST_NumInteriorRings`
# Not implemented

# ST_NumInteriorRings(geom) Returns the number of interior rings of *geom*
# Not implemented

# ST_NumPoints(lineString) Returns the number of points in *lineString*
# Not implemented

# ST_PointN(geom, n) Returns the *n*th point of a *lineString*
# Not implemented

# ST_PointOnSurface(geom) Returns an interior or boundary point of *geom*
# Not implemented

# ST_SRID(geom) Returns SRID value of *geom* or 0 if it does not have one
# Not implemented

# ST_StartPoint(lineString) Returns the first coordinate of *lineString*
# Not implemented

# ST_X(geom) Returns the x-value of the first coordinate of *geom*

SELECT ST_X(ST_GeomFromText('POINT Z(1 2 3)'));
EXPR$0
1.0
!ok

SELECT ST_X(ST_GeomFromText('POINT (1 2)'));
EXPR$0
1.0
!ok

# ST_XMax(geom) Returns the maximum x-value of *geom*
# Not implemented

# ST_XMin(geom) Returns the minimum x-value of *geom*
# Not implemented

# ST_Y(geom) Returns the y-value of the first coordinate of *geom*

SELECT ST_Y(ST_GeomFromText('POINT Z(1 2 3)'));
EXPR$0
2.0
!ok

SELECT ST_Y(ST_GeomFromText('POINT (1 2)'));
EXPR$0
2.0
!ok

# ST_YMax(geom) Returns the maximum y-value of *geom*
# Not implemented

# ST_YMin(geom) Returns the minimum y-value of *geom*
# Not implemented

#### Geometry properties (3D)

# ST_Is3D(s) Returns whether *geom* has at least one z-coordinate

SELECT ST_Is3D(ST_GeomFromText('POINT Z(1 2 0)'));
EXPR$0
true
!ok

SELECT ST_Is3D(ST_GeomFromText('POINT (1 2)'));
EXPR$0
false
!ok

# ST_Z(geom) Returns the z-value of the first coordinate of *geom*

SELECT ST_Z(ST_GeomFromText('POINT Z(1 2 3)'));
EXPR$0
3.0
!ok

SELECT ST_Z(ST_GeomFromText('POINT (1 2)'));
EXPR$0
null
!ok

# Not implemented

# ST_ZMax(geom) Returns the maximum z-value of *geom*
# Not implemented

# ST_ZMin(geom) Returns the minimum z-value of *geom*
# Not implemented

### Geometry predicates

# ST_Contains(geom1, geom2) Returns whether *geom1* contains *geom2*

SELECT ST_Contains(ST_Point(0.0, 0.0), ST_Point(1.0, 2.0));
EXPR$0
false
!ok

SELECT ST_Contains(ST_Point(0.0, 0.0), ST_Point(0.0, 0.0));
EXPR$0
true
!ok

# ST_ContainsProperly(geom1, geom2) Returns whether *geom1* contains *geom2*

-- Example demonstrating difference between contains and contains properly
SELECT ST_GeometryType(geomA) As geomtype, ST_Contains(geomA,geomA) AS acontainsa, ST_ContainsProperly(geomA, geomA) AS acontainspropa,
   ST_Contains(geomA, ST_Boundary(geomA)) As acontainsba, ST_ContainsProperly(geomA, ST_Boundary(geomA)) As acontainspropba
FROM (VALUES ( ST_Buffer(ST_Point(1.0,1.0), 5/*,1*/) ),
             ( ST_MakeLine(ST_Point(1.0,1.0), ST_Point(-1.0,-1.0) ) ),
             ( ST_Point(1.0,1.0))) As foo(geomA);

GEOMTYPE, ACONTAINSA, ACONTAINSPROPA, ACONTAINSBA, ACONTAINSPROPBA
LINESTRING, true, true, false, false
POINT, true, true, false, false
POLYGON, true, true, false, false
!ok

# ST_Covers(geom1, geom2) Returns whether no point in *geom2* is outside *geom1*
# Not implemented

# ST_Crosses(geom1, geom2) Returns whether *geom1* crosses *geom2*

SELECT ST_Crosses(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                  ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
true
!ok

# ST_DWithin(geom1, geom2, distance) Returns whether *geom1* and *geom* are within *distance* of one another

# Countries within 10 degrees of London
select "name" from GEO."countries" AS c
where ST_Distance(ST_MakePoint(51.5, -0.12), ST_MakePoint("latitude", "longitude")) < 10;
name
Andorra
Belgium
France
Guernsey
Ireland
Isle of Man
Jersey
Luxembourg
Netherlands
Switzerland
United Kingdom
!ok

# Countries within 10 degrees of London, formulated a different way
select "name" from GEO."countries" AS c
where ST_DWithin(ST_MakePoint(51.5, -0.12), ST_MakePoint("latitude", "longitude"), 10);
name
Andorra
Belgium
France
Guernsey
Ireland
Isle of Man
Jersey
Luxembourg
Netherlands
Switzerland
United Kingdom
!ok

# ST_Disjoint(geom1, geom2) Returns whether *geom1* and *geom2* are disjoint

SELECT ST_Disjoint(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                   ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
false
!ok


# ST_EnvelopesIntersect(geom1, geom2) Returns whether the envelope of *geom1* intersects the envelope of *geom2*

SELECT ST_EnvelopesIntersect(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                             ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
true
!ok

# ST_Equals(geom1, geom2) Returns whether *geom1* equals *geom2*

SELECT ST_Equals(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                 ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
false
!ok

# ST_Intersects(geom1, geom2) Returns whether *geom1* intersects *geom2*

SELECT ST_Intersects(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                     ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
true
!ok

# ST_OrderingEquals(geom1, geom2) Returns whether *geom1* equals *geom2* and their coordinates and component Geometries are listed in the same order
# Not implemented

# ST_Overlaps(geom1, geom2) Returns whether *geom1* overlaps *geom2*

SELECT ST_Overlaps(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                   ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
false
!ok

# ST_Relate(geom1, geom2) Returns the DE-9IM intersection matrix of *geom1* and *geom2*
# Not implemented

# ST_Relate(geom1, geom2, iMatrix) Returns whether *geom1* and *geom2* are related by the given intersection matrix *iMatrix*
# Not implemented

# ST_Touches(geom1, geom2) Returns whether *geom1* touches *geom2*

SELECT ST_Touches(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                  ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
false
!ok

# ST_Within(geom1, geom2) Returns whether *geom1* is within *geom2*

SELECT ST_Within(ST_GeomFromText('LINESTRING(1 3, 5 3)'),
                 ST_GeomFromText('LINESTRING(1 1, 5 2, 2 5)'));
EXPR$0
false
!ok

#### Geometry operators (2D)

# ST_Buffer(geom, bufferSize [, quadSegs | style ]) Computes a buffer around *geom*

SELECT ST_Buffer(
 ST_GeomFromText('POINT(100 90)'),
 50);
EXPR$0
{"rings":[[[150,90],[149.89294616193018,86.72984353849284],[149.5722430686905,83.47369038899743],[149.0392640201615,80.24548389919359],[148.2962913144534,77.05904774487396],[147.34650647475527,73.9... (3574 characters)
!ok

SELECT ST_Buffer(
 ST_GeomFromText('LINESTRING(10 10,30 10)'),
 5);
EXPR$0
{"rings":[[[10,5],[9.672984353849284,5.010705383806982],[9.347369038899743,5.042775693130948],[9.02454838991936,5.096073597983848],[8.705904774487397,5.1703708685546585],[8.39280267348419,5.2653493... (3532 characters)
!ok

SELECT ST_Buffer(
  ST_GeomFromText('POLYGON((-71.1776585052917 42.3902909739571,-71.1776820268866 42.3903701743239,
    -71.1776063012595 42.3903825660754,-71.1775826583081 42.3903033653531,-71.1776585052917 42.3902909739571))'),
 50);
EXPR$0
{"rings":[[[-21.17763234259735,42.39033677001625],[-21.284686180667173,39.12018030850909],[-21.60538927390683,35.864027159013666],[-22.138368322435824,32.635820669209835],[-22.881341028143936,29.44... (3872 characters)
!ok

# Negative buffer size makes the polgyon smaller
SELECT ST_Buffer(
  ST_GeomFromText('POLYGON((10 10,10 20,20 20,20 10))'),
 -1);
EXPR$0
{"rings":[[[11,11],[11,19],[19,19],[19,11],[11,11]]]}
!ok

!if (fixed.calcite2539) {
# ST_BUFFER(geom, bufferSize, style) variant - not implemented
SELECT ST_Buffer(
 ST_GeomFromText('POINT(100 90)'),
 50, 'quad_segs=8');
at org.apache.calcite.runtime.GeoFunctions.todo
!error GeoFunctions

# ST_BUFFER(geom, bufferSize, quadSegs) variant - not implemented
# When implemented, remove comment from ST_Contains test case
SELECT ST_Buffer(
 ST_GeomFromText('POINT(100 90)'),
 50, 2);
at org.apache.calcite.runtime.GeoFunctions.todo
!error GeoFunctions
!}

# ST_ConvexHull(geom) Computes the smallest convex polygon that contains all the points in the Geometry
# Not implemented

# ST_Difference(geom1, geom2) Computes the difference between two geometries
# Not implemented

# ST_Intersection(geom1, geom2) Computes the intersection of two geometries
# Not implemented

# ST_SymDifference(geom1, geom2) Computes the symmetric difference between two geometries
# Not implemented

# ST_Union(geom1, geom2) Computes the union of two or more geometries

# NOTE: PostGIS altered the order: it returned MULTIPOINT(-2 3,1 2)
SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
    ST_GeomFromText('POINT(-2 3)')));

EXPR$0
MULTIPOINT ((1 2), (-2 3))
!ok

# NOTE: PostGIS returned a point not a multipoint: POINT(1 2). ESRI bug?
SELECT ST_AsText(ST_Union(ST_GeomFromText('POINT(1 2)'),
    ST_GeomFromText('POINT(1 2)')));
EXPR$0
MULTIPOINT ((1 2))
!ok

# ST_Union(geomCollection) Computes the union of two or more geometries

# Disabled: ST_GeomFromText cannot handle GEOMETRYCOLLECTION
!if (false) {
SELECT ST_AsText(st_union(ST_GeomFromText('GEOMETRYCOLLECTION(
  POLYGON((-7 4.2,-7.1 4.2,-7.1 4.3,-7 4.2))
  POINT(5 5)
  POINT(-2 3)
  LINESTRING(5 5, 10 10)')));
EXPR$0
null
!ok
!}

# ST_UNION(ARRAY[GEOMETRY]) is a PostGIS extension
# We don't support it
!if (false) {

SELECT ST_Union(ARRAY(SELECT the_geom FROM sometable));
!ok

SELECT ST_AsText(ST_Union(ARRAY[ST_GeomFromText('LINESTRING(1 2, 3 4)'),
    ST_GeomFromText('LINESTRING(3 4, 4 5)')])) As wktunion;

--wktunion---
MULTILINESTRING((3 4,4 5),(1 2,3 4))
!ok
!}

#### Affine transformation functions (3D and 2D)

# ST_Rotate(geom, angle [, origin | x, y]) Rotates a *geom* counter-clockwise by *angle* (in radians) about *origin* (or the point (*x*, *y*))
# Not implemented

# ST_Scale(geom, xFactor, yFactor [, zFactor ]) Scales *geom* by multiplying the ordinates by the indicated scale factors
# Not implemented

# ST_Translate(geom, x, y, [, z]) Translates *geom*
# Not implemented

#### Geometry editing functions (2D)

# ST_AddPoint(geom, point [, tolerance ]) Adds *point* to *geom* with a given *tolerance* (default 0)
# Not implemented

# ST_CollectionExtract(geom, dimension) Filters *geom*, returning a multi-geometry of those members with a given *dimension* (1 = point, 2 = line-string, 3 = polygon)
# Not implemented

# ST_Densify(geom, tolerance) Inserts extra vertices every *tolerance* along the line segments of *geom*
# Not implemented

# ST_FlipCoordinates(geom) Flips the X and Y coordinates of *geom*
# Not implemented

# ST_Holes(geom) Returns the holes in *geom* (which may be a geometry-collection)
# Not implemented

# ST_Normalize(geom) Converts *geom* to normal form
# Not implemented

# ST_RemoveDuplicatedCoordinates(geom) Removes duplicated coordinates from *geom*
# Not implemented

# ST_RemoveHoles(geom) Removes a *geom*'s holes
# Not implemented

# ST_RemovePoints(geom, poly) Removes all coordinates of *geom* located within *poly*; null if all coordinates are removed
# Not implemented

# ST_RemoveRepeatedPoints(geom, tolerance) Removes from *geom* all repeated points (or points within *tolerance* of another point)
# Not implemented

# ST_Reverse(geom) Reverses the vertex order of *geom*
# Not implemented

#### Geometry editing functions (3D)

# ST_AddZ(geom, zToAdd) Adds *zToAdd* to the z-coordinate of *geom*
# Not implemented

# ST_Interpolate3DLine(geom) Returns *geom* with a interpolation of z values, or null if it is not a line-string or multi-line-string
# Not implemented

# ST_MultiplyZ(geom, zFactor) Returns *geom* with its z-values multiplied by *zFactor*
# Not implemented

# ST_Reverse3DLine(geom [, sortOrder ]) Potentially reverses *geom* according to the z-values of its first and last coordinates
# Not implemented

# ST_UpdateZ(geom, newZ [, updateCondition ]) Updates the z-values of *geom*
# Not implemented

# ST_ZUpdateLineExtremities(geom, startZ, endZ [, interpolate ]) Updates the start and end z-values of *geom*
# Not implemented

#### Geometry measurement functions (2D)

# ST_Area(geom) Returns the area of *geom* (which may be a geometry collection)
# Not implemented

# ST_ClosestCoordinate(geom, point) Returns the coordinate(s) of *geom* closest to *point*
# Not implemented

# ST_ClosestPoint(geom1, geom2) Returns the point of *geom1* closest to *geom2*
# Not implemented

# ST_FurthestCoordinate(geom, point) Returns the coordinate(s) of *geom* that are furthest from *point*
# Not implemented

# ST_Length(lineString) Returns the length of *lineString*
# Not implemented

# ST_LocateAlong(geom, segmentLengthFraction, offsetDistance) Returns a multi-point containing points along the line segments of *geom* at *segmentLengthFraction* and *offsetDistance*
# Not implemented

# ST_LongestLine(geom1, geom2) Returns the 2-dimensional longest line-string between the points of *geom1* and *geom2*
# Not implemented

# ST_MaxDistance(geom1, geom2) Computes the maximum distance between *geom1* and *geom2*
# Not implemented

# ST_Perimeter(polygon) Returns the length of the perimeter of *polygon* (which may be a multi-polygon)
# Not implemented

# ST_ProjectPoint(point, lineString) Projects *point* onto a *lineString* (which may be a multi-line-string)
# Not implemented

#### Geometry measurement functions (3D)

# ST_3DArea(geom) Return a polygon's 3D area
# Not implemented

# ST_3DLength(geom) Returns the 3D length of a line-string
# Not implemented

# ST_3DPerimeter(geom) Returns the 3D perimeter of a polygon or multi-polygon
# Not implemented

# ST_SunPosition(point [, timestamp ]) Computes the sun position at *point* and *timestamp* (now by default)
# Not implemented

#### Geometry processing functions (2D)

# ST_LineIntersector(geom1, geom2) Splits *geom1* (a line-string) with *geom2*
# Not implemented

# ST_LineMerge(geom) Merges a collection of linear components to form a line-string of maximal length
# Not implemented

# ST_MakeValid(geom [, preserveGeomDim [, preserveDuplicateCoord [, preserveCoordDim]]]) Makes *geom* valid
# Not implemented

# ST_Polygonize(geom) Creates a multi-polygon from edges of *geom*
# Not implemented

# ST_PrecisionReducer(geom, n) Reduces *geom*'s precision to *n* decimal places
# Not implemented

# ST_RingSideBuffer(geom, bufferSize, bufferCount [, endCapStyle [, doDifference]]) Computes a ring buffer on one side
# Not implemented

# ST_SideBuffer(geom, bufferSize [, bufferStyle ]) Compute a single buffer on one side
# Not implemented

# ST_Simplify(geom, distance) Simplifies *geom* using the Douglas-Peuker algorithm with a *distance* tolerance
# Not implemented

# ST_SimplifyPreserveTopology(geom) Simplifies *geom*, preserving its topology
# Not implemented

# ST_Snap(geom1, geom2, tolerance) Snaps *geom1* and *geom2* together
# Not implemented

# ST_Split(geom1, geom2 [, tolerance]) Splits *geom1* by *geom2* using *tolerance* (default 1E-6) to determine where the point splits the line
# Not implemented

#### Geometry projection functions

# ST_SetSRID(geom, srid) Returns a copy of *geom* with a new SRID

SELECT ST_SetSRID(ST_MakePoint(-123.365556, 48.428611),4326) As wgs84long_lat;
WGS84LONG_LAT
{"x":-123.365556,"y":48.428611}
!ok

# Mark a point as WGS 84 long lat and then transform to web mercator (Spherical Mercator)
SELECT ST_Transform(ST_SetSRID(ST_MakePoint(-123.365556, 48.428611),4326),3785) As sphere_merc;
SPHERE_MERC
{"x":-123.365556,"y":48.428611,"spatialReference":{"wkid":102113,"latestWkid":3785}}
!ok

# ST_Transform(geom, srid) Transforms *geom* from one coordinate reference system (CRS) to the CRS specified by *srid*

SELECT ST_AsText(ST_Transform(ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
  743265 2967450,743265.625 2967416,743238 2967416))',2249),4326)) As wgs_geom;

WGS_GEOM
MULTIPOLYGON (((743238 2967416, 743265.625 2967416, 743265 2967450, 743238 2967450, 743238 2967416)))
!ok

#### Trigonometry functions

# ST_Azimuth(point1, point2) Return the azimuth of the segment from *point1* to *point2*
# Not implemented

#### Topography functions

# ST_TriangleAspect(geom) Returns the aspect of a triangle
# Not implemented

# ST_TriangleContouring(query \[, z1, z2, z3 ]\[, varArgs]*) Splits triangles into smaller triangles according to classes
# Not implemented

# ST_TriangleDirection(geom) Computes the direction of steepest ascent of a triangle and returns it as a line-string
# Not implemented

# ST_TriangleSlope(geom) Computes the slope of a triangle as a percentage
# Not implemented

# ST_Voronoi(geom [, outDimension [, envelopePolygon ]]) Creates a Voronoi diagram
# Not implemented

#### Triangulation functions

# ST_ConstrainedDelaunay(geom [, flag [, quality ]]) Computes a constrained Delaunay triangulation based on *geom*
# Not implemented

# ST_Delaunay(geom [, flag [, quality ]]) Computes a Delaunay triangulation based on points
# Not implemented

# ST_Tessellate(polygon) Tessellates *polygon* (may be multi-polygon) with adaptive triangles
# Not implemented

#### Geometry aggregate functions

# ST_Accum(geom) Accumulates *geom* into a geometry-collection (or multi-point, multi-line-string or multi-polygon if possible)
# Not implemented

# ST_Collect(geom) Alias for `ST_Accum`
# Not implemented

# ST_Union(geom) Computes the union of geometries
# Not implemented

# Disabled - ST_Union agg function is not implemented
!if (false) {
SELECT ST_AsText(st_union(the_geom))
FROM (VALUES ST_GeomFromText('POLYGON((-7 4.2,-7.1 4.2,-7.1 4.3,-7 4.2))'),
  ST_GeomFromText('POINT(5 5)'),
  ST_GeomFromText('POINT(-2 3)'),
  ST_GeomFromText('LINESTRING(5 5, 10 10)')) as foo(the_geom);

st_asewkt
---------
GEOMETRYCOLLECTION(POINT(-2 3 1),LINESTRING(5 5 5,10 10 10),POLYGON((-7 4.2 5,-7.1 4.2 5,-7.1 4.3 5,-7 4.2 5)))
!ok
!}

# 3d example - sort of supports 3d (and with mixed dimensions!)
# WRONG: Currently returns 4 rows, should return 1 row when ST_Union is aggregate function
SELECT ST_AsText(st_union(the_geom))
FROM (
  SELECT ST_GeomFromText('POLYGON((-7 4.2,-7.1 4.2,-7.1 4.3,-7 4.2))') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('POINT Z(5 5 5)') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('POINT Z(-2 3 1)') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('LINESTRING Z(5 5 5, 10 10 10)') as the_geom ) as foo;

EXPR$0
MULTILINESTRING Z ((5 5 5, 10 10 10))
MULTIPOLYGON (((-7 4.2, -7.1 4.3, -7.1 4.2, -7 4.2)))
POINT Z (-2 3 1)
POINT Z (5 5 5)
!ok

# 3d example not mixing dimensions
# WRONG: Currently returns 4 rows, should return 1 row when ST_Union is aggregate function
SELECT ST_AsText(st_union(the_geom))
FROM (
  SELECT ST_GeomFromText('POLYGON Z((-7 4.2 2,-7.1 4.2 3,-7.1 4.3 2,-7 4.2 2))') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('POINT Z(5 5 5)') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('POINT Z(-2 3 1)') as the_geom
  UNION ALL
  SELECT ST_GeomFromText('LINESTRING Z(5 5 5, 10 10 10)') as the_geom ) as foo;

EXPR$0
MULTILINESTRING Z ((5 5 5, 10 10 10))
MULTIPOLYGON Z (((-7 4.2 2, -7.1 4.3 2, -7.1 4.2 3, -7 4.2 2)))
POINT Z (-2 3 1)
POINT Z (5 5 5)
!ok

# End spatial.iq
