# blank.iq - Queries that start from a blank schema and create their own tables
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use blank
!set outputformat mysql

create table foo (i int not null, j int);
(0 rows modified)

!update
insert into foo values (1, 0);
(1 row modified)

!update
insert into foo values (0, 2);
(1 row modified)

!update
select * from foo;
+---+---+
| I | J |
+---+---+
| 0 | 2 |
| 1 | 0 |
+---+---+
(2 rows)

!ok

# Correlated non-equi IN
select * from foo as f where i in (
  select j from foo where i > f.i);
+---+---+
| I | J |
+---+---+
| 0 | 2 |
+---+---+
(1 row)

!ok

# [CALCITE-1493] Wrong plan for NOT IN correlated queries
create table table1(i int, j int);
(0 rows modified)

!update
create table table2(i int, j int);
(0 rows modified)

!update
insert into table1 values (1, 2), (1, 3);
(2 rows modified)

!update
insert into table2 values (NULL, 1), (2, 1);
(2 rows modified)

!update
# Checked on Oracle
!set lateDecorrelate true
select i, j from table1 where table1.j NOT IN (select i from table2 where table1.i=table2.j);
EnumerableCalc(expr#0..5=[{inputs}], expr#6=[0], expr#7=[=($t2, $t6)], expr#8=[IS NULL($t1)], expr#9=[IS NOT NULL($t5)], expr#10=[<($t3, $t2)], expr#11=[OR($t8, $t9, $t10)], expr#12=[IS NOT TRUE($t11)], expr#13=[OR($t7, $t12)], proj#0..1=[{exprs}], $condition=[$t13])
  EnumerableCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{0}])
    EnumerableCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{0}])
      EnumerableTableScan(table=[[BLANK, TABLE1]])
      EnumerableAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
        EnumerableCalc(expr#0..1=[{inputs}], expr#2=[$cor0], expr#3=[$t2.I], expr#4=[=($t3, $t1)], proj#0..1=[{exprs}], $condition=[$t4])
          EnumerableTableScan(table=[[BLANK, TABLE2]])
    EnumerableCalc(expr#0..1=[{inputs}], expr#2=[$cor0], expr#3=[$t2.J], expr#4=[=($t3, $t0)], proj#0..1=[{exprs}], $condition=[$t4])
      EnumerableAggregate(group=[{0, 1}])
        EnumerableCalc(expr#0..1=[{inputs}], expr#2=[true], expr#3=[$cor0], expr#4=[$t3.I], expr#5=[=($t4, $t1)], I=[$t0], i=[$t2], $condition=[$t5])
          EnumerableTableScan(table=[[BLANK, TABLE2]])
!plan
+---+---+
| I | J |
+---+---+
+---+---+
(0 rows)

!ok

select * from table1 where j not in (select i from table2);
+---+---+
| I | J |
+---+---+
+---+---+
(0 rows)

!ok

select * from table1 where j not in (select i from table2) or i = 1;
+---+---+
| I | J |
+---+---+
| 1 | 2 |
| 1 | 3 |
+---+---+
(2 rows)

!ok

select * from table1 where j not in (select i from table2) or j = 2;
+---+---+
| I | J |
+---+---+
| 1 | 2 |
+---+---+
(1 row)

!ok

select * from table1 where j not in (select i from table2) or j = 3;
+---+---+
| I | J |
+---+---+
| 1 | 3 |
+---+---+
(1 row)

!ok

# End blank.iq
