# empty-string.iq - Null semantics for empty strings
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use scott-oracle
!set outputformat mysql
# Test case for [CALCITE-815] Add an option to allow empty strings to represent null values.
# CONCAT function
with t as (select '' || '' as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# INITCAP function
with t as (select initcap('') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# LOWER function
with t as (select lower('') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# OVERLAY function
with t as (select overlay('A' placing '' from 1 for 1) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select overlay('  ' placing '' from 1 for 1) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | false     |
+---+-----------+
(1 row)

!ok

with t as (select overlay(cast(null as varchar(1)) placing 'abc' from 1) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# REPLACE function
with t as (select replace('ciao', 'ciao', '') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select replace('', 'ciao', 'ci') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# SUBSTRING function
with t as (select substring('abc' from 2147483650) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select substring('' from 1) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select substring('  ' from 1) as c from dual)
select c, c is null as c_is_null
from t;
+----+-----------+
| C  | C_IS_NULL |
+----+-----------+
|    | false     |
+----+-----------+
(1 row)

!ok

# TRIM function
with t as (select trim(null) as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select trim('  ') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select trim('a' from 'a') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

with t as (select trim('A' from 'AAA') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok

# UPPER function
with t as (select upper('') as c from dual)
select c, c is null as c_is_null
from t;
+---+-----------+
| C | C_IS_NULL |
+---+-----------+
|   | true      |
+---+-----------+
(1 row)

!ok