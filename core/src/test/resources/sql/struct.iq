# struct.iq - Queries involving structured types
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# [CALCITE-2677] Struct types with one field are not mapped correctly to Java Classes
select * from (values
    (1, ROW(1)),
    (2, ROW(2))) as v(id,struct);
+----+--------+
| ID | STRUCT |
+----+--------+
|  1 | {1}    |
|  2 | {2}    |
+----+--------+
(2 rows)

!ok

# [CALCITE-3021] Equality of nested ROWs returns false for identical values
select distinct * from (values
    (1, ROW(1,1)),
    (1, ROW(1,1)),
    (2, ROW(2,2))) as v(id,struct);
+----+--------+
| ID | STRUCT |
+----+--------+
|  1 | {1, 1} |
|  2 | {2, 2} |
+----+--------+
(2 rows)

!ok

# [CALCITE-3482] Equality of nested ROWs returns false for identical literal value
select * from
(values
    (1, ROW(1,2)),
    (2, ROW(2,1)),
    (3, ROW(1,2)),
    (4, ROW(2,1))) as t(id,struct)
where t.struct = ROW(2,1);
+----+--------+
| ID | STRUCT |
+----+--------+
|  2 | {2, 1} |
|  4 | {2, 1} |
+----+--------+
(2 rows)

!ok

# [CALCITE-3482] Equality of nested ROWs returns false for identical literal value
select * from
(values
    (1, ROW(2, ROW(4,3))),
    (2, ROW(2, ROW(3,4))),
    (3, ROW(1, ROW(3,4))),
    (4, ROW(2, ROW(3,4)))) as t(id,struct)
where t.struct = ROW(2, ROW(3,4));
+----+-------------+
| ID | STRUCT      |
+----+-------------+
|  2 | {2, {3, 4}} |
|  4 | {2, {3, 4}} |
+----+-------------+
(2 rows)

!ok

# [CALCITE-3627] Null check if all fields of ROW are null
select ROW(null, null, null) is null;
+--------+
| EXPR$0 |
+--------+
| true   |
+--------+
(1 row)

!ok

# [CALCITE-3627] Not Null check if all fields of ROW are null
select ROW(null, null, null) is not null;
+--------+
| EXPR$0 |
+--------+
| false  |
+--------+
(1 row)

!ok

# [CALCITE-3627] Null check if all fields of ROW are null except one
select ROW(null, 1, null) is null;
+--------+
| EXPR$0 |
+--------+
| false  |
+--------+
(1 row)

!ok

# [CALCITE-3627] Not Null check if all fields of ROW are null except one
select ROW(null, 1, null) is not null;
+--------+
| EXPR$0 |
+--------+
| true   |
+--------+
(1 row)

!ok

# [CALCITE-3627] Reverse Null check if all fields of ROW are null except one
select NOT(ROW(null, 1, null) is null);
+--------+
| EXPR$0 |
+--------+
| true   |
+--------+
(1 row)

!ok

# [CALCITE-3627] Null check if all fields of ROW are null include nested ROW
select ROW(null, ROW(null, null), null) is null;
+--------+
| EXPR$0 |
+--------+
| true   |
+--------+
(1 row)

!ok

# [CALCITE-3627] Null check if all fields of ROW are null except nested ROW
select ROW(null, ROW(null, 1), null) is null;
+--------+
| EXPR$0 |
+--------+
| false  |
+--------+
(1 row)

!ok

# End struct.iq
