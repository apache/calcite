# winagg.iq - Unit tests for windowed aggregation, verified on Postgres
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# Multiple window functions sharing a single window
select count(*) over(partition by gender order by ename) as count1,
  count(*) over(partition by deptno order by ename) as count2,
  sum(deptno) over(partition by gender order by ename) as sum1,
  sum(deptno) over(partition by deptno order by ename) as sum2
from emp
order by sum1, sum2;
+--------+--------+------+------+
| COUNT1 | COUNT2 | SUM1 | SUM2 |
+--------+--------+------+------+
|      1 |      1 |   30 |   30 |
|      1 |      1 |   50 |   50 |
|      2 |      1 |   60 |   10 |
|      3 |      1 |   80 |   20 |
|      2 |      2 |   80 |  100 |
|      3 |      1 |  140 |   60 |
|      4 |      2 |  150 |   20 |
|      5 |      2 |  180 |   60 |
|      6 |      1 |  180 |      |
+--------+--------+------+------+
(9 rows)

!ok

# [CALCITE-1540] Support multiple columns in PARTITION BY clause of window function
select gender,deptno,
  count(*) over (partition by gender,deptno) as count1
from emp;

+--------+--------+--------+
| GENDER | DEPTNO | COUNT1 |
+--------+--------+--------+
| F      |     10 |      1 |
| F      |     30 |      2 |
| F      |     30 |      2 |
| F      |     50 |      1 |
| F      |     60 |      1 |
| F      |        |      1 |
| M      |     10 |      1 |
| M      |     20 |      1 |
| M      |     50 |      1 |
+--------+--------+--------+
(9 rows)

!ok

# Partition by same column twice.
# (It's degenerate, but I believe it's valid SQL.)
select gender,deptno,
  count(*) over (partition by gender,gender) as count1
from emp;

+--------+--------+--------+
| GENDER | DEPTNO | COUNT1 |
+--------+--------+--------+
| F      |     10 |      6 |
| F      |     30 |      6 |
| F      |     30 |      6 |
| F      |     50 |      6 |
| F      |     60 |      6 |
| F      |        |      6 |
| M      |     10 |      3 |
| M      |     20 |      3 |
| M      |     50 |      3 |
+--------+--------+--------+
(9 rows)

!ok

!if (false) {
select *, first_value(deptno) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      |          10
 Bob   |     10 | M      |          10
 Eric  |     20 | M      |          10
 Susan |     30 | F      |          10
 Alice |     30 | F      |          10
 Adam  |     50 | M      |          10
 Eve   |     50 | F      |          10
 Grace |     60 | F      |          10
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Jane
 Susan |     30 | F      | Jane
 Alice |     30 | F      | Jane
 Adam  |     50 | M      | Jane
 Eve   |     50 | F      | Jane
 Grace |     60 | F      | Jane
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range current row) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno order by gender range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Alice |     30 | F      | Alice
 Susan |     30 | F      | Alice
 Eve   |     50 | F      | Eve
 Adam  |     50 | M      | Eve
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
# Calcite does not yet generate tied ranks
!if (false) {
select *, count(*) over (order by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Jane  |     10 | F      | 2
 Bob   |     10 | M      | 2
 Eric  |     20 | M      | 3
 Susan |     30 | F      | 5
 Alice |     30 | F      | 5
 Adam  |     50 | M      | 7
 Eve   |     50 | F      | 7
 Grace |     60 | F      | 8
(8 rows)

!ok
!}
select *, rank() over (order by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 6 |
| Alice |     30 | F      | 4 |
| Bob   |     10 | M      | 1 |
| Eric  |     20 | M      | 3 |
| Eve   |     50 | F      | 6 |
| Grace |     60 | F      | 8 |
| Jane  |     10 | F      | 1 |
| Susan |     30 | F      | 4 |
| Wilma |        | F      | 9 |
+-------+--------+--------+---+
(9 rows)

!ok

# Calcite does not yet generate tied ranks
select *, dense_rank() over (order by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 4 |
| Alice |     30 | F      | 3 |
| Bob   |     10 | M      | 1 |
| Eric  |     20 | M      | 2 |
| Eve   |     50 | F      | 4 |
| Grace |     60 | F      | 5 |
| Jane  |     10 | F      | 1 |
| Susan |     30 | F      | 3 |
| Wilma |        | F      | 6 |
+-------+--------+--------+---+
(9 rows)

!ok

# [CALCITE-806] ROW_NUMBER should emit distinct values
#
# We only run this test under JDK 1.8 because the results are
# non-deterministic and are different (but still correct) on
# JDK 1.7 and other platforms.
!if (jdk18) {
select *,
  row_number() over (order by deptno) as r1,
  row_number() over (partition by deptno order by gender desc) as r2,
  row_number() over (partition by deptno order by gender) as r3,
  row_number() over (partition by gender) as r4,
  row_number() over () as r
from emp;
+-------+--------+--------+----+----+----+----+---+
| ENAME | DEPTNO | GENDER | R1 | R2 | R3 | R4 | R |
+-------+--------+--------+----+----+----+----+---+
| Adam  |     50 | M      |  6 |  1 |  2 |  1 | 7 |
| Alice |     30 | F      |  5 |  2 |  2 |  6 | 6 |
| Bob   |     10 | M      |  2 |  1 |  2 |  3 | 9 |
| Eric  |     20 | M      |  3 |  1 |  1 |  2 | 8 |
| Eve   |     50 | F      |  7 |  2 |  1 |  2 | 2 |
| Grace |     60 | F      |  8 |  1 |  1 |  4 | 4 |
| Jane  |     10 | F      |  1 |  2 |  1 |  3 | 3 |
| Susan |     30 | F      |  4 |  1 |  1 |  5 | 5 |
| Wilma |        | F      |  9 |  1 |  1 |  1 | 1 |
+-------+--------+--------+----+----+----+----+---+
(9 rows)

!ok
!}

# As above, ROW_NUMBER without explicit ORDER BY
select deptno,
  ename,
  row_number() over (partition by deptno) as r
from emp
where gender = 'F';
+--------+-------+---+
| DEPTNO | ENAME | R |
+--------+-------+---+
|     10 | Jane  | 1 |
|     30 | Alice | 2 |
|     30 | Susan | 1 |
|     50 | Eve   | 1 |
|     60 | Grace | 1 |
|        | Wilma | 1 |
+--------+-------+---+
(6 rows)

!ok

!if (false) {
select *, count(*) over (order by deptno), first_value(ename) over (order by deptno rows 2 following) from emp;
 ERROR:  frame starting from following row cannot end with current row
 LINE 1: ...o), first_value(ename) over (order by deptno rows 2 followin...
!ok
!}

# Without ORDER BY
select *, count(*) over (partition by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 2 |
| Alice |     30 | F      | 2 |
| Bob   |     10 | M      | 2 |
| Eric  |     20 | M      | 1 |
| Eve   |     50 | F      | 2 |
| Grace |     60 | F      | 1 |
| Jane  |     10 | F      | 2 |
| Susan |     30 | F      | 2 |
| Wilma |        | F      | 1 |
+-------+--------+--------+---+
(9 rows)

!ok

# No ORDER BY, windows defined in WINDOW clause.
select deptno, gender, min(gender) over w1 as a, min(gender) over w2 as d
from emp
window w1 as (),
 w2 as (partition by deptno);
+--------+--------+---+---+
| DEPTNO | GENDER | A | D |
+--------+--------+---+---+
|     10 | F      | F | F |
|     10 | M      | F | F |
|     20 | M      | F | M |
|     30 | F      | F | F |
|     30 | F      | F | F |
|     50 | F      | F | F |
|     50 | M      | F | F |
|     60 | F      | F | F |
|        | F      | F | F |
+--------+--------+---+---+
(9 rows)

!ok

# Composite COUNT.
select deptno, gender, count(gender, deptno) over w1 as a
from emp
window w1 as ();
+--------+--------+---+
| DEPTNO | GENDER | A |
+--------+--------+---+
|     10 | F      | 8 |
|     10 | M      | 8 |
|     20 | M      | 8 |
|     30 | F      | 8 |
|     30 | F      | 8 |
|     50 | F      | 8 |
|     50 | M      | 8 |
|     60 | F      | 8 |
|        | F      | 8 |
+--------+--------+---+
(9 rows)

!ok

# Window Aggregate and group-by.
!set outputformat mysql
select min(deptno) as x, rank() over (order by ename) as y,
  max(ename) over (partition by deptno) as z
from emp
group by deptno, ename;

+----+---+-------+
| X  | Y | Z     |
+----+---+-------+
|    | 9 | Wilma |
| 50 | 1 | Eve   |
| 50 | 5 | Eve   |
| 20 | 4 | Eric  |
| 10 | 3 | Jane  |
| 10 | 7 | Jane  |
| 60 | 6 | Grace |
| 30 | 2 | Susan |
| 30 | 8 | Susan |
+----+---+-------+
(9 rows)

!ok

# Window function on top of regular aggregate in partitioning or order clause.
select deptno, gender, min(ename) as x, sum(deptno) as y,
  rank() over (partition by gender order by min(ename)) as r,
  sum(sum(deptno)) over (partition by gender order by min(ename)) as s
from emp
group by deptno, gender
order by gender, r;
+--------+--------+-------+----+---+-----+
| DEPTNO | GENDER | X     | Y  | R | S   |
+--------+--------+-------+----+---+-----+
|     30 | F      | Alice | 60 | 1 |  60 |
|     50 | F      | Eve   | 50 | 2 | 110 |
|     60 | F      | Grace | 60 | 3 | 170 |
|     10 | F      | Jane  | 10 | 4 | 180 |
|        | F      | Wilma |    | 5 | 180 |
|     50 | M      | Adam  | 50 | 1 |  50 |
|     10 | M      | Bob   | 10 | 2 |  60 |
|     20 | M      | Eric  | 20 | 3 |  80 |
+--------+--------+-------+----+---+-----+
(8 rows)

!ok

# [CALCITE-311] Wrong results when filtering the results of windowed aggregation

select * from (
  select "empid", count(*) over () c
    from "hr"."emps"
) where "empid"=100;

+-------+---+
| empid | C |
+-------+---+
|   100 | 4 |
+-------+---+
(1 row)

!ok

# [CALCITE-2081] Two windows under a JOIN
select a."deptno", a.r as ar, b.r as br
from (
  select "deptno", first_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) a
join (
  select "deptno", last_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) b
on a."deptno" = b."deptno"
limit 5;

+--------+-----+-----+
| deptno | AR  | BR  |
+--------+-----+-----+
|     10 | 110 | 100 |
|     10 | 110 | 110 |
|     20 | 200 | 200 |
|     10 | 110 | 110 |
|     10 | 110 | 110 |
+--------+-----+-----+
(5 rows)

!ok

select a."empid", a."deptno", a."commission", a.r as ar, b.r as br
from (
  select "empid", "deptno", "commission", first_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) a
join (
  select "empid", "deptno", "commission", last_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) b
on a."empid" = b."empid"
limit 5;

+-------+--------+------------+-----+-----+
| empid | deptno | commission | AR  | BR  |
+-------+--------+------------+-----+-----+
|   100 |     10 |       1000 | 110 | 100 |
|   110 |     10 |        250 | 110 | 110 |
|   150 |     10 |            | 110 | 150 |
|   200 |     20 |        500 | 200 | 200 |
+-------+--------+------------+-----+-----+
(4 rows)

!ok

# [CALCITE-2271] Two windows under a JOIN 2
select
 t1.l, t1.key as key1, t2.key as key2
from
 (
  select
   dense_rank() over (order by key) l,
   key
  from
   unnest(map[1,1,2,2]) k
 ) t1
 join
 (
  select
   dense_rank() over(order by key) l,
   key
  from
   unnest(map[2,2]) k
 ) t2 on (t1.l = t2.l and t1.key + 1 = t2.key);

+---+------+------+
| L | KEY1 | KEY2 |
+---+------+------+
| 1 |    1 |    2 |
+---+------+------+
(1 row)

!ok

# NTH_VALUE
select emp."ENAME", emp."DEPTNO",
 nth_value(emp."DEPTNO", 1) over() as "first_value",
 nth_value(emp."DEPTNO", 2) over() as "second_value",
 nth_value(emp."DEPTNO", 5) over() as "fifth_value",
 nth_value(emp."DEPTNO", 8) over() as "eighth_value",
 nth_value(emp."DEPTNO", 10) over() as "tenth_value"
from emp order by emp."ENAME";
+-------+--------+-------------+--------------+-------------+--------------+-------------+
| ENAME | DEPTNO | first_value | second_value | fifth_value | eighth_value | tenth_value |
+-------+--------+-------------+--------------+-------------+--------------+-------------+
| Adam  |     50 |          10 |           10 |          30 |           60 |             |
| Alice |     30 |          10 |           10 |          30 |           60 |             |
| Bob   |     10 |          10 |           10 |          30 |           60 |             |
| Eric  |     20 |          10 |           10 |          30 |           60 |             |
| Eve   |     50 |          10 |           10 |          30 |           60 |             |
| Grace |     60 |          10 |           10 |          30 |           60 |             |
| Jane  |     10 |          10 |           10 |          30 |           60 |             |
| Susan |     30 |          10 |           10 |          30 |           60 |             |
| Wilma |        |          10 |           10 |          30 |           60 |             |
+-------+--------+-------------+--------------+-------------+--------------+-------------+
(9 rows)

!ok

# [CALCITE-2402] COVAR_POP, REGR_COUNT functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO",
 sum(emps."AGE" * emps."DEPTNO") over() as "sum(age * deptno)",
 regr_count(emps."AGE", emps."DEPTNO") over() as "regr_count(age, deptno)",
 covar_pop(emps."DEPTNO", emps."AGE") over() as "covar_pop"
from emps order by emps."AGE";
+-----+--------+-------------------+-------------------------+-----------+
| AGE | DEPTNO | sum(age * deptno) | regr_count(age, deptno) | covar_pop |
+-----+--------+-------------------+-------------------------+-----------+
|   5 |     20 |              1950 |                       3 |        39 |
|  25 |     10 |              1950 |                       3 |        39 |
|  80 |     20 |              1950 |                       3 |        39 |
|     |     40 |              1950 |                       3 |        39 |
|     |     40 |              1950 |                       3 |        39 |
+-----+--------+-------------------+-------------------------+-----------+
(5 rows)

!ok

# [CALCITE-2402] COVAR_POP, REGR_COUNT functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 sum(emps."AGE" * emps."DEPTNO") over(partition by emps."GENDER") as "sum(age * deptno)",
 regr_count(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_count(age, deptno)",
 covar_pop(emps."DEPTNO", emps."AGE") over(partition by emps."GENDER") as "covar_pop"
from emps order by emps."GENDER";
+-----+--------+--------+-------------------+-------------------------+-----------+
| AGE | DEPTNO | GENDER | sum(age * deptno) | regr_count(age, deptno) | covar_pop |
+-----+--------+--------+-------------------+-------------------------+-----------+
|   5 |     20 | F      |               100 |                       1 |         0 |
|     |     40 | F      |               100 |                       1 |         0 |
|  80 |     20 | M      |              1600 |                       1 |         0 |
|     |     40 | M      |              1600 |                       1 |         0 |
|  25 |     10 |        |               250 |                       1 |         0 |
+-----+--------+--------+-------------------+-------------------------+-----------+
(5 rows)

!ok

# [CALCITE-2402] COVAR_SAMP functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_SAMP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / (REGR_COUNT(x, y) - 1)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 covar_samp(emps."AGE", emps."AGE") over() as "var_samp",
 covar_samp(emps."DEPTNO", emps."AGE") over() as "covar_samp",
 covar_samp(emps."EMPNO", emps."DEPTNO") over(partition by emps."MANAGER") as "covar_samp partitioned"
from emps order by emps."AGE";
+-----+--------+--------+----------+------------+------------------------+
| AGE | DEPTNO | GENDER | var_samp | covar_samp | covar_samp partitioned |
+-----+--------+--------+----------+------------+------------------------+
|   5 |     20 | F      |     1508 |         58 |                      0 |
|  25 |     10 |        |     1508 |         58 |                     50 |
|  80 |     20 | M      |     1508 |         58 |                     50 |
|     |     40 | M      |     1508 |         58 |                      0 |
|     |     40 | F      |     1508 |         58 |                      0 |
+-----+--------+--------+----------+------------+------------------------+
(5 rows)

!ok

# [CALCITE-2402] VAR_POP, VAR_SAMP functions
# VAR_POP(x) = (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x)) / COUNT(x)
# VAR_SAMP(x) = (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x)) / (COUNT(x) - 1)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 var_pop(emps."AGE") over() as "var_pop",
 var_pop(emps."AGE") over(partition by emps."AGE") as "var_pop by age",
 var_samp(emps."AGE") over() as "var_samp",
 var_samp(emps."AGE") over(partition by emps."GENDER") as "var_samp by gender"
from emps order by emps."AGE";
+-----+--------+--------+---------+----------------+----------+--------------------+
| AGE | DEPTNO | GENDER | var_pop | var_pop by age | var_samp | var_samp by gender |
+-----+--------+--------+---------+----------------+----------+--------------------+
|   5 |     20 | F      |    1005 |              0 |     1508 |                    |
|  25 |     10 |        |    1005 |              0 |     1508 |                    |
|  80 |     20 | M      |    1005 |              0 |     1508 |                    |
|     |     40 | F      |    1005 |                |     1508 |                    |
|     |     40 | M      |    1005 |                |     1508 |                    |
+-----+--------+--------+---------+----------------+----------+--------------------+
(5 rows)

!ok

# [CALCITE-2402] REGR_SXX, REGR_SXY, REGR_SYY functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# REGR_SXX(x, y) = REGR_COUNT(x, y) * VAR_POP(y, y)
# REGR_SXY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, y)
# REGR_SYY(x, y) = REGR_COUNT(x, y) * VAR_POP(x, x)
## COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
## VAR_POP(y, y) = (SUM(y * y, x) - SUM(y, x) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO",
 regr_sxx(emps."AGE", emps."DEPTNO") over() as "regr_sxx(age, deptno)",
 regr_syy(emps."AGE", emps."DEPTNO") over() as "regr_syy(age, deptno)"
from emps order by emps."AGE";
+-----+--------+-----------------------+-----------------------+
| AGE | DEPTNO | regr_sxx(age, deptno) | regr_syy(age, deptno) |
+-----+--------+-----------------------+-----------------------+
|   5 |     20 |                    66 |                  3015 |
|  25 |     10 |                    66 |                  3015 |
|  80 |     20 |                    66 |                  3015 |
|     |     40 |                    66 |                  3015 |
|     |     40 |                    66 |                  3015 |
+-----+--------+-----------------------+-----------------------+
(5 rows)

!ok

# [CALCITE-2402] REGR_SXX, REGR_SXY, REGR_SYY functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# REGR_SXX(x, y) = REGR_COUNT(x, y) * COVAR_POP(y, y)
# REGR_SXY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, y)
# REGR_SYY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, x)
## COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
## COVAR_POP(y, y) = (SUM(y * y, x) - SUM(y, x) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 regr_sxx(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_sxx(age, deptno)",
 regr_syy(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_syy(age, deptno)"
from emps order by emps."GENDER";
+-----+--------+--------+-----------------------+-----------------------+
| AGE | DEPTNO | GENDER | regr_sxx(age, deptno) | regr_syy(age, deptno) |
+-----+--------+--------+-----------------------+-----------------------+
|   5 |     20 | F      |                     0 |                     0 |
|     |     40 | F      |                     0 |                     0 |
|  80 |     20 | M      |                     0 |                     0 |
|     |     40 | M      |                     0 |                     0 |
|  25 |     10 |        |                     0 |                     0 |
+-----+--------+--------+-----------------------+-----------------------+
(5 rows)

!ok

# End winagg.iq
