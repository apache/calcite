# winagg.iq - Unit tests for windowed aggregation, verified on Postgres
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# Multiple window functions sharing a single window
select count(*) over(partition by gender order by ename) as count1,
  count(*) over(partition by deptno order by ename) as count2,
  sum(deptno) over(partition by gender order by ename) as sum1,
  sum(deptno) over(partition by deptno order by ename) as sum2
from emp
order by sum1, sum2;
+--------+--------+------+------+
| COUNT1 | COUNT2 | SUM1 | SUM2 |
+--------+--------+------+------+
|      1 |      1 |   30 |   30 |
|      1 |      1 |   50 |   50 |
|      2 |      1 |   60 |   10 |
|      3 |      1 |   80 |   20 |
|      2 |      2 |   80 |  100 |
|      3 |      1 |  140 |   60 |
|      4 |      2 |  150 |   20 |
|      5 |      2 |  180 |   60 |
|      6 |      1 |  180 |      |
+--------+--------+------+------+
(9 rows)

!ok

!use scott
# Check default brackets. Note that:
# c2 and c3 are equivalent to c1;
# c5 is equivalent to c4;
# c7 is equivalent to c6.
select empno, deptno,
 count(*) over (order by deptno) c1,
 count(*) over (order by deptno range unbounded preceding) c2,
 count(*) over (order by deptno range between unbounded preceding and current row) c3,
 count(*) over (order by deptno rows unbounded preceding) c4,
 count(*) over (order by deptno rows between unbounded preceding and current row) c5,
 count(*) over (order by deptno range between unbounded preceding and unbounded following) c6,
 count(*) over (order by deptno rows between unbounded preceding and unbounded following) c7
from emp;
+-------+--------+----+----+----+----+----+----+----+
| EMPNO | DEPTNO | C1 | C2 | C3 | C4 | C5 | C6 | C7 |
+-------+--------+----+----+----+----+----+----+----+
|  7900 |     30 | 14 | 14 | 14 | 14 | 14 | 14 | 14 |
|  7902 |     20 |  8 |  8 |  8 |  8 |  8 | 14 | 14 |
|  7934 |     10 |  3 |  3 |  3 |  3 |  3 | 14 | 14 |
|  7369 |     20 |  8 |  8 |  8 |  4 |  4 | 14 | 14 |
|  7499 |     30 | 14 | 14 | 14 |  9 |  9 | 14 | 14 |
|  7521 |     30 | 14 | 14 | 14 | 10 | 10 | 14 | 14 |
|  7566 |     20 |  8 |  8 |  8 |  5 |  5 | 14 | 14 |
|  7654 |     30 | 14 | 14 | 14 | 11 | 11 | 14 | 14 |
|  7698 |     30 | 14 | 14 | 14 | 12 | 12 | 14 | 14 |
|  7782 |     10 |  3 |  3 |  3 |  1 |  1 | 14 | 14 |
|  7788 |     20 |  8 |  8 |  8 |  6 |  6 | 14 | 14 |
|  7839 |     10 |  3 |  3 |  3 |  2 |  2 | 14 | 14 |
|  7844 |     30 | 14 | 14 | 14 | 13 | 13 | 14 | 14 |
|  7876 |     20 |  8 |  8 |  8 |  7 |  7 | 14 | 14 |
+-------+--------+----+----+----+----+----+----+----+
(14 rows)

!ok

# [CALCITE-6538] OVER (ROWS CURRENT ROW) should return a window with one row, not all rows
# (RANGE CURRENT ROW returns all rows, and is already correct.)
select ename,
  sal,
  sum(sal) over (rows current row) as row_sum_sal,
  sum(sal) over (range current row) as range_sum_sal
from emp
where job = 'MANAGER';
+-------+---------+-------------+---------------+
| ENAME | SAL     | ROW_SUM_SAL | RANGE_SUM_SAL |
+-------+---------+-------------+---------------+
| BLAKE | 2850.00 |     2850.00 |       8275.00 |
| CLARK | 2450.00 |     2450.00 |       8275.00 |
| JONES | 2975.00 |     2975.00 |       8275.00 |
+-------+---------+-------------+---------------+
(3 rows)

!ok

# [CALCITE-5883] ROWS window aggregates ignore frames when there is no ORDER BY clause
# Other windows with ROWS and no ORDER BY.
select count(*) over (rows between 3 preceding and 2 preceding) as c3p2p,
  sum(two) over (rows between 3 preceding and 2 preceding) as s3p2p,
  sum(two) over (rows 1 preceding) as s1p,
  sum(two) over (rows between 1 preceding and 1 following) as s1p1f,
  sum(two) over (rows between current row and 2 following) as s2f
from (select *, 2 as two from emp)
order by 1;
+-------+-------+-----+-------+-----+
| C3P2P | S3P2P | S1P | S1P1F | S2F |
+-------+-------+-----+-------+-----+
|     0 |       |   2 |     4 |   6 |
|     0 |       |   4 |     6 |   6 |
|     1 |     2 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   6 |
|     2 |     4 |   4 |     6 |   4 |
|     2 |     4 |   4 |     4 |   2 |
+-------+-------+-----+-------+-----+
(14 rows)

!ok

# Various combinations of ROWS, RANGE, UNBOUNDED PRECEDING,
# UNBOUNDED FOLLOWING, and CURRENT ROW.
#
# 'OVER (ROWS CURRENT ROW)' includes one row;
#
# 'OVER (ROWS UNBOUNDED PRECEDING)' includes the previous rows;
#
# 'OVER ()' includes all rows and is equivalent to
# 'OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)' and
# 'OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)' and
# 'OVER (RANGE UNBOUNDED PRECEDING)'.
# Checked on Postgres.
select count(*) over (rows current row) as "rows",
  count(*) over (rows unbounded preceding) as "rowsUp",
  count(*) over (range unbounded preceding) as "rangeUp",
  count(*) over () as "empty",
  count(*) over (rows between unbounded preceding and unbounded following) as "rowsUpUf",
  count(*) over (range between unbounded preceding and unbounded following) as "rangeUpUf",
  count(*) over (range unbounded preceding) as "rangeUp"
from emp
order by 3;
+------+--------+---------+-------+----------+-----------+---------+
| rows | rowsUp | rangeUp | empty | rowsUpUf | rangeUpUf | rangeUp |
+------+--------+---------+-------+----------+-----------+---------+
|    1 |      1 |      14 |    14 |       14 |        14 |      14 |
|    1 |      2 |      14 |    14 |       14 |        14 |      14 |
|    1 |      3 |      14 |    14 |       14 |        14 |      14 |
|    1 |      4 |      14 |    14 |       14 |        14 |      14 |
|    1 |      5 |      14 |    14 |       14 |        14 |      14 |
|    1 |      6 |      14 |    14 |       14 |        14 |      14 |
|    1 |      7 |      14 |    14 |       14 |        14 |      14 |
|    1 |      8 |      14 |    14 |       14 |        14 |      14 |
|    1 |      9 |      14 |    14 |       14 |        14 |      14 |
|    1 |     10 |      14 |    14 |       14 |        14 |      14 |
|    1 |     11 |      14 |    14 |       14 |        14 |      14 |
|    1 |     12 |      14 |    14 |       14 |        14 |      14 |
|    1 |     13 |      14 |    14 |       14 |        14 |      14 |
|    1 |     14 |      14 |    14 |       14 |        14 |      14 |
+------+--------+---------+-------+----------+-----------+---------+
(14 rows)

!ok

# Various combinations of ROWS, RANGE, UNBOUNDED PRECEDING,
# UNBOUNDED FOLLOWING, and CURRENT ROW, with PARTITION BY.
# The equivalence sets are the same the previous query (without PARTITION BY).
# Checked on Postgres.
select deptno,
  count(*) over (partition by deptno rows current row) as "rows",
  count(*) over (partition by deptno rows unbounded preceding) as "rowsUp",
  count(*) over (partition by deptno range unbounded preceding) as "rangeUp",
  count(*) over (partition by deptno) as "empty",
  count(*) over (partition by deptno rows between unbounded preceding and unbounded following) as "rowsUpUf",
  count(*) over (partition by deptno range between unbounded preceding and unbounded following) as "rangeUpUf",
  count(*) over (partition by deptno range unbounded preceding) as "rangeUp"
from emp
order by 1, 4;
+--------+------+--------+---------+-------+----------+-----------+---------+
| DEPTNO | rows | rowsUp | rangeUp | empty | rowsUpUf | rangeUpUf | rangeUp |
+--------+------+--------+---------+-------+----------+-----------+---------+
|     10 |    1 |      1 |       3 |     3 |        3 |         3 |       3 |
|     10 |    1 |      2 |       3 |     3 |        3 |         3 |       3 |
|     10 |    1 |      3 |       3 |     3 |        3 |         3 |       3 |
|     20 |    1 |      1 |       5 |     5 |        5 |         5 |       5 |
|     20 |    1 |      2 |       5 |     5 |        5 |         5 |       5 |
|     20 |    1 |      3 |       5 |     5 |        5 |         5 |       5 |
|     20 |    1 |      4 |       5 |     5 |        5 |         5 |       5 |
|     20 |    1 |      5 |       5 |     5 |        5 |         5 |       5 |
|     30 |    1 |      1 |       6 |     6 |        6 |         6 |       6 |
|     30 |    1 |      2 |       6 |     6 |        6 |         6 |       6 |
|     30 |    1 |      3 |       6 |     6 |        6 |         6 |       6 |
|     30 |    1 |      4 |       6 |     6 |        6 |         6 |       6 |
|     30 |    1 |      5 |       6 |     6 |        6 |         6 |       6 |
|     30 |    1 |      6 |       6 |     6 |        6 |         6 |       6 |
+--------+------+--------+---------+-------+----------+-----------+---------+
(14 rows)

!ok

# As previous, with PARTITION BY and ORDER BY.
#
# 'OVER (... ROWS CURRENT ROW)' (rows) includes one row;
#
# 'OVER (...)' (empty),
# 'OVER (... RANGE UNBOUNDED PRECEDING)' (rangeUp) and
# 'OVER (... RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)' (rangeUpC)
# are equivalent to each other,
#
# 'OVER (... ROWS UNBOUNDED PRECEDING)' (rowsUp) and
# 'OVER (... ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)' (rowsUpC)
# are equivalent to each other and include N rows,
# and are similar to empty/rangeUp/rangeUpC except when there are ties (WARD, SCOTT);
#
# 'OVER (... ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)' (rowsUpUf) and
# 'OVER (... RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)' (rangeUpUf)
# are equivalent and return all rows.
#
# Checked on Postgres.
select deptno, sal, ename,
  count(*) over (partition by deptno order by sal rows current row) as "rows",
  count(*) over (partition by deptno order by sal) as "empty",
  count(*) over (partition by deptno order by sal range unbounded preceding) as "rangeUp",
  count(*) over (partition by deptno order by sal range between unbounded preceding and current row) as "rangeUpC",
  count(*) over (partition by deptno order by sal rows unbounded preceding) as "rowsUp",
  count(*) over (partition by deptno order by sal rows between unbounded preceding and current row) as "rowsUpC",
  count(*) over (partition by deptno order by sal range between unbounded preceding and unbounded following) as "rangeUpUf",
  count(*) over (partition by deptno order by sal rows between unbounded preceding and unbounded following) as "rowsUpUf"
from emp
order by 1, 2;
+--------+---------+--------+------+-------+---------+----------+--------+---------+-----------+----------+
| DEPTNO | SAL     | ENAME  | rows | empty | rangeUp | rangeUpC | rowsUp | rowsUpC | rangeUpUf | rowsUpUf |
+--------+---------+--------+------+-------+---------+----------+--------+---------+-----------+----------+
|     10 | 1300.00 | MILLER |    1 |     1 |       1 |        1 |      1 |       1 |         3 |        3 |
|     10 | 2450.00 | CLARK  |    1 |     2 |       2 |        2 |      2 |       2 |         3 |        3 |
|     10 | 5000.00 | KING   |    1 |     3 |       3 |        3 |      3 |       3 |         3 |        3 |
|     20 |  800.00 | SMITH  |    1 |     1 |       1 |        1 |      1 |       1 |         5 |        5 |
|     20 | 1100.00 | ADAMS  |    1 |     2 |       2 |        2 |      2 |       2 |         5 |        5 |
|     20 | 2975.00 | JONES  |    1 |     3 |       3 |        3 |      3 |       3 |         5 |        5 |
|     20 | 3000.00 | SCOTT  |    1 |     5 |       5 |        5 |      4 |       4 |         5 |        5 |
|     20 | 3000.00 | FORD   |    1 |     5 |       5 |        5 |      5 |       5 |         5 |        5 |
|     30 |  950.00 | JAMES  |    1 |     1 |       1 |        1 |      1 |       1 |         6 |        6 |
|     30 | 1250.00 | WARD   |    1 |     3 |       3 |        3 |      2 |       2 |         6 |        6 |
|     30 | 1250.00 | MARTIN |    1 |     3 |       3 |        3 |      3 |       3 |         6 |        6 |
|     30 | 1500.00 | TURNER |    1 |     4 |       4 |        4 |      4 |       4 |         6 |        6 |
|     30 | 1600.00 | ALLEN  |    1 |     5 |       5 |        5 |      5 |       5 |         6 |        6 |
|     30 | 2850.00 | BLAKE  |    1 |     6 |       6 |        6 |      6 |       6 |         6 |        6 |
+--------+---------+--------+------+-------+---------+----------+--------+---------+-----------+----------+
(14 rows)

!ok

# STDDEV applied to nullable column
select empno,
  stddev(CAST(comm AS DECIMAL(12, 4))) over (order by empno rows unbounded preceding) as stdev
from emp
where deptno = 30
order by 1;
+-------+----------+
| EMPNO | STDEV    |
+-------+----------+
|  7499 |          |
|  7521 | 141.4213 |
|  7654 | 585.9465 |
|  7698 | 585.9465 |
|  7844 | 602.7713 |
|  7900 | 602.7713 |
+-------+----------+
(6 rows)

!ok

# [CALCITE-5931] Allow integers like 1.00 in window frame
select empno,
  stddev(CAST(comm AS DECIMAL(12, 4))) over (order by empno rows 2 preceding) as stdev_2int,
  stddev(CAST(comm AS DECIMAL(12, 4))) over (order by empno rows 2.00 preceding) as stdev_2double
from emp
where deptno = 30
order by 1;
+-------+------------+---------------+
| EMPNO | STDEV_2INT | STDEV_2DOUBLE |
+-------+------------+---------------+
|  7499 |            |               |
|  7521 |   141.4213 |      141.4213 |
|  7654 |   585.9465 |      585.9465 |
|  7698 |   636.3961 |      636.3961 |
|  7844 |   989.9494 |      989.9494 |
|  7900 |            |               |
+-------+------------+---------------+
(6 rows)

!ok

!use post
# [CALCITE-1540] Support multiple columns in PARTITION BY clause of window function
select gender,deptno,
  count(*) over (partition by gender,deptno) as count1
from emp;
+--------+--------+--------+
| GENDER | DEPTNO | COUNT1 |
+--------+--------+--------+
| F      |     10 |      1 |
| F      |     30 |      2 |
| F      |     30 |      2 |
| F      |     50 |      1 |
| F      |     60 |      1 |
| F      |        |      1 |
| M      |     10 |      1 |
| M      |     20 |      1 |
| M      |     50 |      1 |
+--------+--------+--------+
(9 rows)

!ok

# Partition by same column twice.
# (It's degenerate, but I believe it's valid SQL.)
select gender,deptno,
  count(*) over (partition by gender,gender) as count1
from emp;
+--------+--------+--------+
| GENDER | DEPTNO | COUNT1 |
+--------+--------+--------+
| F      |     10 |      6 |
| F      |     30 |      6 |
| F      |     30 |      6 |
| F      |     50 |      6 |
| F      |     60 |      6 |
| F      |        |      6 |
| M      |     10 |      3 |
| M      |     20 |      3 |
| M      |     50 |      3 |
+--------+--------+--------+
(9 rows)

!ok

!if (false) {
select *, first_value(deptno) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      |          10
 Bob   |     10 | M      |          10
 Eric  |     20 | M      |          10
 Susan |     30 | F      |          10
 Alice |     30 | F      |          10
 Adam  |     50 | M      |          10
 Eve   |     50 | F      |          10
 Grace |     60 | F      |          10
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Jane
 Susan |     30 | F      | Jane
 Alice |     30 | F      | Jane
 Adam  |     50 | M      | Jane
 Eve   |     50 | F      | Jane
 Grace |     60 | F      | Jane
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range current row) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno order by gender range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Alice |     30 | F      | Alice
 Susan |     30 | F      | Alice
 Eve   |     50 | F      | Eve
 Adam  |     50 | M      | Eve
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
# Calcite does not yet generate tied ranks
!if (false) {
select *, count(*) over (order by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Jane  |     10 | F      | 2
 Bob   |     10 | M      | 2
 Eric  |     20 | M      | 3
 Susan |     30 | F      | 5
 Alice |     30 | F      | 5
 Adam  |     50 | M      | 7
 Eve   |     50 | F      | 7
 Grace |     60 | F      | 8
(8 rows)

!ok
!}
select *, rank() over (order by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 6 |
| Alice |     30 | F      | 4 |
| Bob   |     10 | M      | 1 |
| Eric  |     20 | M      | 3 |
| Eve   |     50 | F      | 6 |
| Grace |     60 | F      | 8 |
| Jane  |     10 | F      | 1 |
| Susan |     30 | F      | 4 |
| Wilma |        | F      | 9 |
+-------+--------+--------+---+
(9 rows)

!ok

# Calcite does not yet generate tied ranks
select *, dense_rank() over (order by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 4 |
| Alice |     30 | F      | 3 |
| Bob   |     10 | M      | 1 |
| Eric  |     20 | M      | 2 |
| Eve   |     50 | F      | 4 |
| Grace |     60 | F      | 5 |
| Jane  |     10 | F      | 1 |
| Susan |     30 | F      | 3 |
| Wilma |        | F      | 6 |
+-------+--------+--------+---+
(9 rows)

!ok

# [CALCITE-806] ROW_NUMBER should emit distinct values
#
# We only run this test under JDK 1.8 because the results are
# non-deterministic and are different (but still correct) on
# JDK 1.7 and other platforms.
!if (jdk18) {
select *,
  row_number() over (order by deptno) as r1,
  row_number() over (partition by deptno order by gender desc) as r2,
  row_number() over (partition by deptno order by gender) as r3,
  row_number() over (partition by gender) as r4,
  row_number() over () as r
from emp;
+-------+--------+--------+----+----+----+----+---+
| ENAME | DEPTNO | GENDER | R1 | R2 | R3 | R4 | R |
+-------+--------+--------+----+----+----+----+---+
| Adam  |     50 | M      |  6 |  1 |  2 |  1 | 7 |
| Alice |     30 | F      |  5 |  2 |  2 |  6 | 6 |
| Bob   |     10 | M      |  2 |  1 |  2 |  3 | 9 |
| Eric  |     20 | M      |  3 |  1 |  1 |  2 | 8 |
| Eve   |     50 | F      |  7 |  2 |  1 |  2 | 2 |
| Grace |     60 | F      |  8 |  1 |  1 |  4 | 4 |
| Jane  |     10 | F      |  1 |  2 |  1 |  3 | 3 |
| Susan |     30 | F      |  4 |  1 |  1 |  5 | 5 |
| Wilma |        | F      |  9 |  1 |  1 |  1 | 1 |
+-------+--------+--------+----+----+----+----+---+
(9 rows)

!ok
!}

# As above, ROW_NUMBER without explicit ORDER BY
select deptno,
  ename,
  row_number() over (partition by deptno) as r
from emp
where gender = 'F';
+--------+-------+---+
| DEPTNO | ENAME | R |
+--------+-------+---+
|     10 | Jane  | 1 |
|     30 | Alice | 2 |
|     30 | Susan | 1 |
|     50 | Eve   | 1 |
|     60 | Grace | 1 |
|        | Wilma | 1 |
+--------+-------+---+
(6 rows)

!ok

!if (false) {
select *, count(*) over (order by deptno), first_value(ename) over (order by deptno rows 2 following) from emp;
 ERROR:  frame starting from following row cannot end with current row
 LINE 1: ...o), first_value(ename) over (order by deptno rows 2 followin...
!ok
!}

# Without ORDER BY
select *, count(*) over (partition by deptno) as c from emp;
+-------+--------+--------+---+
| ENAME | DEPTNO | GENDER | C |
+-------+--------+--------+---+
| Adam  |     50 | M      | 2 |
| Alice |     30 | F      | 2 |
| Bob   |     10 | M      | 2 |
| Eric  |     20 | M      | 1 |
| Eve   |     50 | F      | 2 |
| Grace |     60 | F      | 1 |
| Jane  |     10 | F      | 2 |
| Susan |     30 | F      | 2 |
| Wilma |        | F      | 1 |
+-------+--------+--------+---+
(9 rows)

!ok

# No ORDER BY, windows defined in WINDOW clause.
select deptno, gender, min(gender) over w1 as a, min(gender) over w2 as d
from emp
window w1 as (),
 w2 as (partition by deptno);
+--------+--------+---+---+
| DEPTNO | GENDER | A | D |
+--------+--------+---+---+
|     10 | F      | F | F |
|     10 | M      | F | F |
|     20 | M      | F | M |
|     30 | F      | F | F |
|     30 | F      | F | F |
|     50 | F      | F | F |
|     50 | M      | F | F |
|     60 | F      | F | F |
|        | F      | F | F |
+--------+--------+---+---+
(9 rows)

!ok

# Composite COUNT.
select deptno, gender, count(gender, deptno) over w1 as a
from emp
window w1 as ();
+--------+--------+---+
| DEPTNO | GENDER | A |
+--------+--------+---+
|     10 | F      | 8 |
|     10 | M      | 8 |
|     20 | M      | 8 |
|     30 | F      | 8 |
|     30 | F      | 8 |
|     50 | F      | 8 |
|     50 | M      | 8 |
|     60 | F      | 8 |
|        | F      | 8 |
+--------+--------+---+
(9 rows)

!ok

# Window Aggregate and group-by.
!set outputformat mysql
select min(deptno) as x, rank() over (order by ename) as y,
  max(ename) over (partition by deptno) as z
from emp
group by deptno, ename;
+----+---+-------+
| X  | Y | Z     |
+----+---+-------+
|    | 9 | Wilma |
| 50 | 1 | Eve   |
| 50 | 5 | Eve   |
| 20 | 4 | Eric  |
| 10 | 3 | Jane  |
| 10 | 7 | Jane  |
| 60 | 6 | Grace |
| 30 | 2 | Susan |
| 30 | 8 | Susan |
+----+---+-------+
(9 rows)

!ok

# Window function on top of regular aggregate in partitioning or order clause.
select deptno, gender, min(ename) as x, sum(deptno) as y,
  rank() over (partition by gender order by min(ename)) as r,
  sum(sum(deptno)) over (partition by gender order by min(ename)) as s
from emp
group by deptno, gender
order by gender, r;
+--------+--------+-------+----+---+-----+
| DEPTNO | GENDER | X     | Y  | R | S   |
+--------+--------+-------+----+---+-----+
|     30 | F      | Alice | 60 | 1 |  60 |
|     50 | F      | Eve   | 50 | 2 | 110 |
|     60 | F      | Grace | 60 | 3 | 170 |
|     10 | F      | Jane  | 10 | 4 | 180 |
|        | F      | Wilma |    | 5 | 180 |
|     50 | M      | Adam  | 50 | 1 |  50 |
|     10 | M      | Bob   | 10 | 2 |  60 |
|     20 | M      | Eric  | 20 | 3 |  80 |
+--------+--------+-------+----+---+-----+
(8 rows)

!ok

# [CALCITE-311] Wrong results when filtering the results of windowed aggregation

select * from (
  select "empid", count(*) over () c
    from "hr"."emps"
) where "empid"=100;
+-------+---+
| empid | C |
+-------+---+
|   100 | 4 |
+-------+---+
(1 row)

!ok

# [CALCITE-2081] Two windows under a JOIN
select a."deptno", a.r as ar, b.r as br
from (
  select "deptno", first_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) a
join (
  select "deptno", last_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) b
on a."deptno" = b."deptno"
order by "deptno", ar, br limit 5;
+--------+-----+-----+
| deptno | AR  | BR  |
+--------+-----+-----+
|     10 | 110 | 100 |
|     10 | 110 | 100 |
|     10 | 110 | 100 |
|     10 | 110 | 110 |
|     10 | 110 | 110 |
+--------+-----+-----+
(5 rows)

!ok

select a."empid", a."deptno", a."commission", a.r as ar, b.r as br
from (
  select "empid", "deptno", "commission", first_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) a
join (
  select "empid", "deptno", "commission", last_value("empid") over w as r
  from "hr"."emps"
  window w as (partition by "deptno" order by "commission")) b
on a."empid" = b."empid"
limit 5;
+-------+--------+------------+-----+-----+
| empid | deptno | commission | AR  | BR  |
+-------+--------+------------+-----+-----+
|   100 |     10 |       1000 | 110 | 100 |
|   110 |     10 |        250 | 110 | 110 |
|   150 |     10 |            | 110 | 150 |
|   200 |     20 |        500 | 200 | 200 |
+-------+--------+------------+-----+-----+
(4 rows)

!ok

# [CALCITE-2271] Two windows under a JOIN 2
select
 t1.l, t1.key as key1, t2.key as key2
from
 (
  select
   dense_rank() over (order by key) l,
   key
  from
   unnest(map[1,1,2,2]) k
 ) t1
 join
 (
  select
   dense_rank() over(order by key) l,
   key
  from
   unnest(map[2,2]) k
 ) t2 on (t1.l = t2.l and t1.key + 1 = t2.key);
+---+------+------+
| L | KEY1 | KEY2 |
+---+------+------+
| 1 |    1 |    2 |
+---+------+------+
(1 row)

!ok

# NTH_VALUE
select emp."ENAME", emp."DEPTNO",
 nth_value(emp."DEPTNO", 1) over() as "first_value",
 nth_value(emp."DEPTNO", 2) over() as "second_value",
 nth_value(emp."DEPTNO", 5) over() as "fifth_value",
 nth_value(emp."DEPTNO", 8) over() as "eighth_value",
 nth_value(emp."DEPTNO", 10) over() as "tenth_value"
from emp order by emp."ENAME";
EnumerableSort(sort0=[$0], dir0=[ASC])
  EnumerableWindow(window#0=[window(aggs [NTH_VALUE($1, $2), NTH_VALUE($1, $3), NTH_VALUE($1, $4), NTH_VALUE($1, $5), NTH_VALUE($1, $6)])], constants=[[1, 2, 5, 8, 10]])
    EnumerableValues(tuples=[[{ 'Jane ', 10 }, { 'Bob  ', 10 }, { 'Eric ', 20 }, { 'Susan', 30 }, { 'Alice', 30 }, { 'Adam ', 50 }, { 'Eve  ', 50 }, { 'Grace', 60 }, { 'Wilma', null }]])
!plan
+-------+--------+-------------+--------------+-------------+--------------+-------------+
| ENAME | DEPTNO | first_value | second_value | fifth_value | eighth_value | tenth_value |
+-------+--------+-------------+--------------+-------------+--------------+-------------+
| Adam  |     50 |          10 |           10 |          30 |           60 |             |
| Alice |     30 |          10 |           10 |          30 |           60 |             |
| Bob   |     10 |          10 |           10 |          30 |           60 |             |
| Eric  |     20 |          10 |           10 |          30 |           60 |             |
| Eve   |     50 |          10 |           10 |          30 |           60 |             |
| Grace |     60 |          10 |           10 |          30 |           60 |             |
| Jane  |     10 |          10 |           10 |          30 |           60 |             |
| Susan |     30 |          10 |           10 |          30 |           60 |             |
| Wilma |        |          10 |           10 |          30 |           60 |             |
+-------+--------+-------------+--------------+-------------+--------------+-------------+
(9 rows)

!ok

# [CALCITE-2402] COVAR_POP, REGR_COUNT functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO",
 sum(emps."AGE" * emps."DEPTNO") over() as "sum(age * deptno)",
 regr_count(emps."AGE", emps."DEPTNO") over() as "regr_count(age, deptno)",
 covar_pop(emps."DEPTNO", emps."AGE") over() as "covar_pop"
from emps order by emps."AGE";
+-----+--------+-------------------+-------------------------+-----------+
| AGE | DEPTNO | sum(age * deptno) | regr_count(age, deptno) | covar_pop |
+-----+--------+-------------------+-------------------------+-----------+
|   5 |     20 |              1950 |                       3 |        39 |
|  25 |     10 |              1950 |                       3 |        39 |
|  80 |     20 |              1950 |                       3 |        39 |
|     |     40 |              1950 |                       3 |        39 |
|     |     40 |              1950 |                       3 |        39 |
+-----+--------+-------------------+-------------------------+-----------+
(5 rows)

!ok

# [CALCITE-2402] COVAR_POP, REGR_COUNT functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 sum(emps."AGE" * emps."DEPTNO") over(partition by emps."GENDER") as "sum(age * deptno)",
 regr_count(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_count(age, deptno)",
 covar_pop(emps."DEPTNO", emps."AGE") over(partition by emps."GENDER") as "covar_pop"
from emps order by emps."GENDER";
+-----+--------+--------+-------------------+-------------------------+-----------+
| AGE | DEPTNO | GENDER | sum(age * deptno) | regr_count(age, deptno) | covar_pop |
+-----+--------+--------+-------------------+-------------------------+-----------+
|   5 |     20 | F      |               100 |                       1 |         0 |
|     |     40 | F      |               100 |                       1 |         0 |
|  80 |     20 | M      |              1600 |                       1 |         0 |
|     |     40 | M      |              1600 |                       1 |         0 |
|  25 |     10 |        |               250 |                       1 |         0 |
+-----+--------+--------+-------------------+-------------------------+-----------+
(5 rows)

!ok

# [CALCITE-2402] COVAR_SAMP functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# COVAR_SAMP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / (REGR_COUNT(x, y) - 1)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 covar_samp(emps."AGE", emps."AGE") over() as "var_samp",
 covar_samp(emps."DEPTNO", emps."AGE") over() as "covar_samp",
 covar_samp(emps."EMPNO", emps."DEPTNO") over(partition by emps."MANAGER") as "covar_samp partitioned"
from emps order by emps."AGE";
+-----+--------+--------+----------+------------+------------------------+
| AGE | DEPTNO | GENDER | var_samp | covar_samp | covar_samp partitioned |
+-----+--------+--------+----------+------------+------------------------+
|   5 |     20 | F      |     1508 |         58 |                      0 |
|  25 |     10 |        |     1508 |         58 |                     50 |
|  80 |     20 | M      |     1508 |         58 |                     50 |
|     |     40 | M      |     1508 |         58 |                      0 |
|     |     40 | F      |     1508 |         58 |                      0 |
+-----+--------+--------+----------+------------+------------------------+
(5 rows)

!ok

# [CALCITE-2402] VAR_POP, VAR_SAMP functions
# VAR_POP(x) = (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x)) / COUNT(x)
# VAR_SAMP(x) = (SUM(x * x) - SUM(x) * SUM(x) / COUNT(x)) / (COUNT(x) - 1)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 var_pop(emps."AGE") over() as "var_pop",
 var_pop(emps."AGE") over(partition by emps."AGE") as "var_pop by age",
 var_samp(emps."AGE") over() as "var_samp",
 var_samp(emps."AGE") over(partition by emps."GENDER") as "var_samp by gender"
from emps order by emps."AGE";
+-----+--------+--------+---------+----------------+----------+--------------------+
| AGE | DEPTNO | GENDER | var_pop | var_pop by age | var_samp | var_samp by gender |
+-----+--------+--------+---------+----------------+----------+--------------------+
|   5 |     20 | F      |    1005 |              0 |     1508 |                    |
|  25 |     10 |        |    1005 |              0 |     1508 |                    |
|  80 |     20 | M      |    1005 |              0 |     1508 |                    |
|     |     40 | F      |    1005 |                |     1508 |                    |
|     |     40 | M      |    1005 |                |     1508 |                    |
+-----+--------+--------+---------+----------------+----------+--------------------+
(5 rows)

!ok

# [CALCITE-2402] REGR_SXX, REGR_SXY, REGR_SYY functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# REGR_SXX(x, y) = REGR_COUNT(x, y) * VAR_POP(y, y)
# REGR_SXY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, y)
# REGR_SYY(x, y) = REGR_COUNT(x, y) * VAR_POP(x, x)
## COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
## VAR_POP(y, y) = (SUM(y * y, x) - SUM(y, x) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO",
 regr_sxx(emps."AGE", emps."DEPTNO") over() as "regr_sxx(age, deptno)",
 regr_syy(emps."AGE", emps."DEPTNO") over() as "regr_syy(age, deptno)"
from emps order by emps."AGE";
+-----+--------+-----------------------+-----------------------+
| AGE | DEPTNO | regr_sxx(age, deptno) | regr_syy(age, deptno) |
+-----+--------+-----------------------+-----------------------+
|   5 |     20 |                    66 |                  3015 |
|  25 |     10 |                    66 |                  3015 |
|  80 |     20 |                    66 |                  3015 |
|     |     40 |                    66 |                  3015 |
|     |     40 |                    66 |                  3015 |
+-----+--------+-----------------------+-----------------------+
(5 rows)

!ok

# [CALCITE-2402] REGR_SXX, REGR_SXY, REGR_SYY functions
# SUM(x, y) = SUM(x) WHERE y IS NOT NULL
# REGR_SXX(x, y) = REGR_COUNT(x, y) * COVAR_POP(y, y)
# REGR_SXY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, y)
# REGR_SYY(x, y) = REGR_COUNT(x, y) * COVAR_POP(x, x)
## COVAR_POP(x, y) = (SUM(x * y) - SUM(x, y) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
## COVAR_POP(y, y) = (SUM(y * y, x) - SUM(y, x) * SUM(y, x) / REGR_COUNT(x, y)) / REGR_COUNT(x, y)
select emps."AGE", emps."DEPTNO", emps."GENDER",
 regr_sxx(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_sxx(age, deptno)",
 regr_syy(emps."AGE", emps."DEPTNO") over(partition by emps."GENDER") as "regr_syy(age, deptno)"
from emps order by emps."GENDER";
+-----+--------+--------+-----------------------+-----------------------+
| AGE | DEPTNO | GENDER | regr_sxx(age, deptno) | regr_syy(age, deptno) |
+-----+--------+--------+-----------------------+-----------------------+
|   5 |     20 | F      |                     0 |                     0 |
|     |     40 | F      |                     0 |                     0 |
|  80 |     20 | M      |                     0 |                     0 |
|     |     40 | M      |                     0 |                     0 |
|  25 |     10 |        |                     0 |                     0 |
+-----+--------+--------+-----------------------+-----------------------+
(5 rows)

!ok

# [CALCITE-3661] MODE function

# MODE function without ORDER BY.
select deptno,
  mode(gender) over (partition by deptno) as m
from emp;
+--------+---+
| DEPTNO | M |
+--------+---+
|     10 | F |
|     10 | F |
|     20 | M |
|     30 | F |
|     30 | F |
|     50 | M |
|     50 | M |
|     60 | F |
|        | F |
+--------+---+
(9 rows)

!ok

select deptno,
  ename,
  mode(gender) over (partition by deptno order by ENAME) as m
from emp;
+--------+-------+---+
| DEPTNO | ENAME | M |
+--------+-------+---+
|     10 | Bob   | M |
|     10 | Jane  | M |
|     20 | Eric  | M |
|     30 | Alice | F |
|     30 | Susan | F |
|     50 | Adam  | M |
|     50 | Eve   | M |
|     60 | Grace | F |
|        | Wilma | F |
+--------+-------+---+
(9 rows)

!ok

# [CALCITE-5283] Add ARG_MIN, ARG_MAX aggregate function

# ARG_MIN, ARG_MAX function without ORDER BY.
select gender,
  arg_min(ename, deptno) over (partition by gender order by ename) as mi,
  arg_max(ename, deptno) over (partition by gender order by ename) as ma
from emp;
+--------+-------+-------+
| GENDER | MI    | MA    |
+--------+-------+-------+
| F      | Alice | Alice |
| F      | Alice | Eve   |
| F      | Alice | Grace |
| F      | Jane  | Grace |
| F      | Jane  | Grace |
| F      | Jane  | Grace |
| M      | Adam  | Adam  |
| M      | Bob   | Adam  |
| M      | Bob   | Adam  |
+--------+-------+-------+
(9 rows)

!ok

# [CALCITE-6011] Add the planner rule that pushes the Filter past a Window
# Get the initial result which not push filter past window.
select gender, count(*) over(partition by gender order by ename) as count1 from emp;
+--------+--------+
| GENDER | COUNT1 |
+--------+--------+
| F      |      1 |
| F      |      2 |
| F      |      3 |
| F      |      4 |
| F      |      5 |
| F      |      6 |
| M      |      1 |
| M      |      2 |
| M      |      3 |
+--------+--------+
(9 rows)

!ok

# Get the plan and result which push filter past window
select gender, count(*) over(partition by gender order by ename) as count1 from emp where gender = 'F';
EnumerableCalc(expr#0..3=[{inputs}], GENDER=[$t2], $1=[$t3])
  EnumerableWindow(window#0=[window(partition {2} order by [0] aggs [COUNT()])])
    EnumerableCalc(expr#0..2=[{inputs}], expr#3=['F'], expr#4=[=($t2, $t3)], proj#0..2=[{exprs}], $condition=[$t4])
      EnumerableValues(tuples=[[{ 'Jane ', 10, 'F' }, { 'Bob  ', 10, 'M' }, { 'Eric ', 20, 'M' }, { 'Susan', 30, 'F' }, { 'Alice', 30, 'F' }, { 'Adam ', 50, 'M' }, { 'Eve  ', 50, 'F' }, { 'Grace', 60, 'F' }, { 'Wilma', null, 'F' }]])
!plan
+--------+--------+
| GENDER | COUNT1 |
+--------+--------+
| F      |      1 |
| F      |      2 |
| F      |      3 |
| F      |      4 |
| F      |      5 |
| F      |      6 |
+--------+--------+
(6 rows)

!ok

# [CALCITE-5855] Implement frame exclusion in window functions
# Verified against PostgreSQL
!use scott

select empno,
  avg(comm) over (order by empno rows 2 preceding exclude current row) as e1,
  avg(comm) over (order by empno rows 2 preceding exclude group) as e2,
  avg(comm) over (order by empno rows 2 preceding exclude ties) as e3,
  avg(comm) over (order by empno rows 2 preceding exclude no others) as e4,
  avg(comm) over (order by empno rows 2 preceding) as e5
from emp
order by 1;
+-------+---------+---------+---------+---------+---------+
| EMPNO | E1      | E2      | E3      | E4      | E5      |
+-------+---------+---------+---------+---------+---------+
|  7369 |         |         |         |         |         |
|  7499 |         |         |  300.00 |  300.00 |  300.00 |
|  7521 |  300.00 |  300.00 |  400.00 |  400.00 |  400.00 |
|  7566 |  400.00 |  400.00 |  400.00 |  400.00 |  400.00 |
|  7654 |  500.00 |  500.00 |  950.00 |  950.00 |  950.00 |
|  7698 | 1400.00 | 1400.00 | 1400.00 | 1400.00 | 1400.00 |
|  7782 | 1400.00 | 1400.00 | 1400.00 | 1400.00 | 1400.00 |
|  7788 |         |         |         |         |         |
|  7839 |         |         |         |         |         |
|  7844 |         |         |    0.00 |    0.00 |    0.00 |
|  7876 |    0.00 |    0.00 |    0.00 |    0.00 |    0.00 |
|  7900 |    0.00 |    0.00 |    0.00 |    0.00 |    0.00 |
|  7902 |         |         |         |         |         |
|  7934 |         |         |         |         |         |
+-------+---------+---------+---------+---------+---------+
(14 rows)

!ok

select
  count(*) over (order by "one" rows between 2 preceding and 5 following exclude group) as c2p5fxg,
  count(*) over (order by "one" rows between 2 preceding and 5 following) as c2p5f,
  count(*) over (order by "one" rows 20 preceding) as c20p,
  sum("one") over (order by "one" rows between 2 preceding and unbounded following exclude ties) as s2pxt,
  sum("one") over (order by "one" rows between unbounded preceding and unbounded following exclude no others) as sxn,
  sum("one") over (order by "one" rows between unbounded preceding and unbounded following) as s
from (select *, 1 as "one" from emp) as e
order by c20p;
+---------+-------+------+-------+-----+----+
| C2P5FXG | C2P5F | C20P | S2PXT | SXN | S  |
+---------+-------+------+-------+-----+----+
|       0 |     6 |    1 |     1 |  14 | 14 |
|       0 |     7 |    2 |     1 |  14 | 14 |
|       0 |     8 |    3 |     1 |  14 | 14 |
|       0 |     8 |    4 |     1 |  14 | 14 |
|       0 |     8 |    5 |     1 |  14 | 14 |
|       0 |     8 |    6 |     1 |  14 | 14 |
|       0 |     8 |    7 |     1 |  14 | 14 |
|       0 |     8 |    8 |     1 |  14 | 14 |
|       0 |     8 |    9 |     1 |  14 | 14 |
|       0 |     7 |   10 |     1 |  14 | 14 |
|       0 |     6 |   11 |     1 |  14 | 14 |
|       0 |     5 |   12 |     1 |  14 | 14 |
|       0 |     4 |   13 |     1 |  14 | 14 |
|       0 |     3 |   14 |     1 |  14 | 14 |
+---------+-------+------+-------+-----+----+
(14 rows)

!ok

# As above, without ORDER BY. Results are the same, because 'one' has
# the same value for all rows.
select
  count(*) over (rows between 2 preceding and 5 following exclude group) as c2p5fxg,
  count(*) over (rows between 2 preceding and 5 following) as c2p5f,
  count(*) over (rows between 20 preceding and current row) as c20p,
  sum("one") over (rows between 2 preceding and unbounded following exclude ties) as s2pxt,
  sum("one") over (rows between unbounded preceding and unbounded following exclude no others) as sxn,
  sum("one") over (rows between unbounded preceding and unbounded following) as s
from (select *, 1 as "one" from emp) as e
order by c20p;
+---------+-------+------+-------+-----+----+
| C2P5FXG | C2P5F | C20P | S2PXT | SXN | S  |
+---------+-------+------+-------+-----+----+
|       0 |     6 |    1 |     1 |  14 | 14 |
|       0 |     7 |    2 |     1 |  14 | 14 |
|       0 |     8 |    3 |     1 |  14 | 14 |
|       0 |     8 |    4 |     1 |  14 | 14 |
|       0 |     8 |    5 |     1 |  14 | 14 |
|       0 |     8 |    6 |     1 |  14 | 14 |
|       0 |     8 |    7 |     1 |  14 | 14 |
|       0 |     8 |    8 |     1 |  14 | 14 |
|       0 |     8 |    9 |     1 |  14 | 14 |
|       0 |     7 |   10 |     1 |  14 | 14 |
|       0 |     6 |   11 |     1 |  14 | 14 |
|       0 |     5 |   12 |     1 |  14 | 14 |
|       0 |     4 |   13 |     1 |  14 | 14 |
|       0 |     3 |   14 |     1 |  14 | 14 |
+---------+-------+------+-------+-----+----+
(14 rows)

!ok

select empno,
  stddev(comm) over (order by empno rows between 2 preceding and 5 following exclude current row) as e1,
  count(*) over (order by empno rows between 2 preceding and 5 following exclude group) as e2,
  sum(sal) over (order by empno rows between 2 preceding and unbounded following exclude ties) as e3,
  sum(sal) over (order by empno rows between unbounded preceding and unbounded following exclude no others) as e4,
  sum(sal) over (order by empno rows between unbounded preceding and unbounded following) as e5
from emp
order by 1;
+-------+--------+----+----------+----------+----------+
| EMPNO | E1     | E2 | E3       | E4       | E5       |
+-------+--------+----+----------+----------+----------+
|  7369 | 585.94 |  5 | 29025.00 | 29025.00 | 29025.00 |
|  7499 | 636.39 |  6 | 29025.00 | 29025.00 | 29025.00 |
|  7521 | 777.81 |  7 | 29025.00 | 29025.00 | 29025.00 |
|  7566 | 585.94 |  7 | 28225.00 | 29025.00 | 29025.00 |
|  7654 | 353.55 |  7 | 26625.00 | 29025.00 | 29025.00 |
|  7698 | 989.94 |  7 | 25375.00 | 29025.00 | 29025.00 |
|  7782 | 989.94 |  7 | 22400.00 | 29025.00 | 29025.00 |
|  7788 |        |  7 | 21150.00 | 29025.00 | 29025.00 |
|  7839 |        |  7 | 18300.00 | 29025.00 | 29025.00 |
|  7844 |        |  6 | 15850.00 | 29025.00 | 29025.00 |
|  7876 |        |  5 | 12850.00 | 29025.00 | 29025.00 |
|  7900 |        |  4 |  7850.00 | 29025.00 | 29025.00 |
|  7902 |        |  3 |  6350.00 | 29025.00 | 29025.00 |
|  7934 |        |  2 |  5250.00 | 29025.00 | 29025.00 |
+-------+--------+----+----------+----------+----------+
(14 rows)

!ok
# End winagg.iq
