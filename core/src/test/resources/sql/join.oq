# join.oq - Join query tests
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# OR is a theta join
select *
from emp
join dept
on emp.deptno = dept.deptno or emp.ename = dept.dname;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Alice |     30 | F      |      30 | Engineering |
| Bob   |     10 | M      |      10 | Sales       |
| Eric  |     20 | M      |      20 | Marketing   |
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(5 rows)

!ok

# As an INNER join, it can be executed as an equi-join followed by a filter
EnumerableCalc(expr#0..5=[{inputs}], expr#6=[=($t3, $t0)], expr#7=[=($t5, $t1)], expr#8=[OR($t6, $t7)], ENAME=[$t2], DEPTNO=[$t3], GENDER=[$t4], DEPTNO0=[$t0], DNAME=[$t1], $condition=[$t8])
  EnumerableJoin(condition=[true], joinType=[inner])
    EnumerableValues(tuples=[[{ 10, 'Sales      ' }, { 20, 'Marketing  ' }, { 30, 'Engineering' }, { 40, 'Empty      ' }]])
    EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):CHAR(11) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], proj#0..3=[{exprs}])
      EnumerableUnion(all=[true])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Jane'], expr#2=[10], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Bob'], expr#2=[10], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eric'], expr#2=[20], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Susan'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Alice'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Adam'], expr#2=[50], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eve'], expr#2=[50], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Grace'], expr#2=[60], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Wilma'], expr#2=[null], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
!plan

# Now the same, but LEFT join
select *
from emp
left join dept
on emp.deptno = dept.deptno or emp.ename = dept.dname;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Adam  |     50 | M      |         |             |
| Alice |     30 | F      |      30 | Engineering |
| Bob   |     10 | M      |      10 | Sales       |
| Eric  |     20 | M      |      20 | Marketing   |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Wilma |        | F      |         |             |
+-------+--------+--------+---------+-------------+
(9 rows)

!ok

# Cannot be decomposed into an equi-join; plan uses EnumerableThetaJoin
EnumerableCalc(expr#0..5=[{inputs}], proj#0..2=[{exprs}], DEPTNO0=[$t4], DNAME=[$t5])
  EnumerableThetaJoin(condition=[OR(=($1, $4), =($3, $5))], joinType=[left])
    EnumerableCalc(expr#0..2=[{inputs}], expr#3=[CAST($t0):CHAR(11) CHARACTER SET "ISO-8859-1" COLLATE "ISO-8859-1$en_US$primary" NOT NULL], proj#0..3=[{exprs}])
      EnumerableUnion(all=[true])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Jane'], expr#2=[10], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Bob'], expr#2=[10], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eric'], expr#2=[20], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Susan'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Alice'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Adam'], expr#2=[50], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eve'], expr#2=[50], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Grace'], expr#2=[60], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Wilma'], expr#2=[null], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
    EnumerableValues(tuples=[[{ 10, 'Sales      ' }, { 20, 'Marketing  ' }, { 30, 'Engineering' }, { 40, 'Empty      ' }]])
!plan

!use scott

# Push aggregate through join
select distinct dept.deptno, emp.deptno
from "scott".emp join "scott".dept using (deptno);
+--------+--------+
| DEPTNO | DEPTNO |
+--------+--------+
|     10 |     10 |
|     20 |     20 |
|     30 |     30 |
+--------+--------+
(3 rows)

!ok
EnumerableJoin(condition=[=($0, $1)], joinType=[inner])
  EnumerableAggregate(group=[{0}])
    EnumerableTableScan(table=[[scott, DEPT]])
  EnumerableAggregate(group=[{7}])
    EnumerableTableScan(table=[[scott, EMP]])
!plan

select distinct dept.deptno
from "scott".emp join "scott".dept using (deptno);
+--------+
| DEPTNO |
+--------+
|     10 |
|     20 |
|     30 |
+--------+
(3 rows)

!ok
EnumerableAggregate(group=[{0}])
  EnumerableJoin(condition=[=($0, $1)], joinType=[inner])
    EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
      EnumerableTableScan(table=[[scott, DEPT]])
    EnumerableCalc(expr#0..7=[{inputs}], DEPTNO=[$t7])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

# [CALCITE-676] AssertionError in GROUPING SETS query
select emp.deptno as e, dept.deptno as d
from "scott".emp join "scott".dept using (deptno)
group by cube(emp.deptno, dept.deptno);
+----+----+
| E  | D  |
+----+----+
| 10 | 10 |
| 10 |    |
| 20 | 20 |
| 20 |    |
| 30 | 30 |
| 30 |    |
|    | 10 |
|    | 20 |
|    | 30 |
|    |    |
+----+----+
(10 rows)

!ok

# [CALCITE-688] splitCondition does not behave correctly
# when one side of the condition references columns from
# different inputs
select distinct emp1.deptno, emp3.ename
from "scott".emp emp1 join "scott".emp emp2 on (emp1.deptno = emp2.deptno)
join "scott".emp emp3 on (emp1.deptno + emp2.deptno = emp3.deptno + 10);
+--------+--------+
| DEPTNO | ENAME  |
+--------+--------+
|     10 | CLARK  |
|     10 | KING   |
|     10 | MILLER |
|     20 | ALLEN  |
|     20 | BLAKE  |
|     20 | JAMES  |
|     20 | MARTIN |
|     20 | TURNER |
|     20 | WARD   |
+--------+--------+
(9 rows)

!ok

EnumerableCalc(expr#0..1=[{inputs}], DEPTNO0=[$t1], ENAME=[$t0])
  EnumerableAggregate(group=[{1, 16}])
    EnumerableJoin(condition=[=($8, $25)], joinType=[inner])
      EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..7=[{exprs}], $f8=[$t9])
        EnumerableTableScan(table=[[scott, EMP]])
      EnumerableCalc(expr#0..15=[{inputs}], expr#16=[+($t7, $t15)], expr#17=[CAST($t16):INTEGER], proj#0..15=[{exprs}], $f16=[$t17])
        EnumerableJoin(condition=[=($7, $15)], joinType=[inner])
          EnumerableTableScan(table=[[scott, EMP]])
          EnumerableTableScan(table=[[scott, EMP]])
!plan

# End join.oq
