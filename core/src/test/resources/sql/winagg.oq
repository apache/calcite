# winagg.oq - Unit tests for windowed aggregation, verified on Postgres
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat psql

# Multiple window functions sharing a single window
select count(*) over(partition by gender order by ename) as count1,
  count(*) over(partition by deptno order by ename) as count2,
  sum(deptno) over(partition by gender order by ename) as sum1,
  sum(deptno) over(partition by deptno order by ename) as sum2
from emp
order by sum1, sum2;
 COUNT1 | COUNT2 | SUM1 | SUM2
--------+--------+------+------
      1 |      1 |   30 |   30
      1 |      1 |   50 |   50
      2 |      1 |   60 |   10
      3 |      1 |   80 |   20
      2 |      2 |   80 |  100
      3 |      1 |  140 |   60
      4 |      2 |  150 |   20
      5 |      2 |  180 |   60
      6 |      1 |  180 |     
(9 rows)

!ok

!if (false) {
select *, first_value(deptno) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      |          10
 Bob   |     10 | M      |          10
 Eric  |     20 | M      |          10
 Susan |     30 | F      |          10
 Alice |     30 | F      |          10
 Adam  |     50 | M      |          10
 Eve   |     50 | F      |          10
 Grace |     60 | F      |          10
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over () from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Jane
 Susan |     30 | F      | Jane
 Alice |     30 | F      | Jane
 Adam  |     50 | M      | Jane
 Eve   |     50 | F      | Jane
 Grace |     60 | F      | Jane
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range current row) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Susan |     30 | F      | Susan
 Alice |     30 | F      | Susan
 Adam  |     50 | M      | Adam
 Eve   |     50 | F      | Adam
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
!if (false) {
select *, first_value(ename) over (partition by deptno order by gender range unbounded preceding) from emp;
 ename | deptno | gender | first_value
-------+--------+--------+-------------
 Jane  |     10 | F      | Jane
 Bob   |     10 | M      | Jane
 Eric  |     20 | M      | Eric
 Alice |     30 | F      | Alice
 Susan |     30 | F      | Alice
 Eve   |     50 | F      | Eve
 Adam  |     50 | M      | Eve
 Grace |     60 | F      | Grace
(8 rows)

!ok
!}
# Calcite does not yet generate tied ranks
!if (false) {
select *, count(*) over (order by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Jane  |     10 | F      | 2
 Bob   |     10 | M      | 2
 Eric  |     20 | M      | 3
 Susan |     30 | F      | 5
 Alice |     30 | F      | 5
 Adam  |     50 | M      | 7
 Eve   |     50 | F      | 7
 Grace |     60 | F      | 8
(8 rows)

!ok
!}
select *, rank() over (order by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Jane  |     10 | F      | 1
 Bob   |     10 | M      | 1
 Eric  |     20 | M      | 3
 Susan |     30 | F      | 4
 Alice |     30 | F      | 4
 Adam  |     50 | M      | 6
 Eve   |     50 | F      | 6
 Grace |     60 | F      | 8
 Wilma |        | F      | 9
(9 rows)

!ok

# Calcite does not yet generate tied ranks
select *, dense_rank() over (order by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Jane  |     10 | F      | 1
 Bob   |     10 | M      | 1
 Eric  |     20 | M      | 2
 Susan |     30 | F      | 3
 Alice |     30 | F      | 3
 Adam  |     50 | M      | 4
 Eve   |     50 | F      | 4
 Grace |     60 | F      | 5
 Wilma |        | F      | 6
(9 rows)

!ok

# [CALCITE-806] ROW_NUMBER should emit distinct values
#
# We only run this test under JDK 1.8 because the results are
# non-deterministic and are different (but still correct) on
# JDK 1.7 and other platforms.
!if (jdk18) {
select *,
  row_number() over (order by deptno) as r1,
  row_number() over (partition by deptno order by gender desc) as r2,
  row_number() over (partition by deptno order by gender) as r3,
  row_number() over (partition by gender) as r4,
  row_number() over () as r
from emp;
 ENAME | DEPTNO | GENDER | R1 | R2 | R3 | R4 | R
-------+--------+--------+----+----+----+----+---
 Wilma |        | F      |  9 |  1 |  1 |  1 | 1
 Eve   |     50 | F      |  7 |  2 |  1 |  2 | 2
 Jane  |     10 | F      |  1 |  2 |  1 |  3 | 3
 Grace |     60 | F      |  8 |  1 |  1 |  4 | 4
 Susan |     30 | F      |  4 |  1 |  1 |  5 | 5
 Alice |     30 | F      |  5 |  2 |  2 |  6 | 6
 Adam  |     50 | M      |  6 |  1 |  2 |  1 | 7
 Eric  |     20 | M      |  3 |  1 |  1 |  2 | 8
 Bob   |     10 | M      |  2 |  1 |  2 |  3 | 9
(9 rows)

!ok
!}

# As above, ROW_NUMBER without explicit ORDER BY
select deptno,
  ename,
  row_number() over (partition by deptno) as r
from emp
where gender = 'F';
 DEPTNO | ENAME | R
--------+-------+---
     10 | Jane  | 1
     30 | Alice | 2
     30 | Susan | 1
     50 | Eve   | 1
     60 | Grace | 1
        | Wilma | 1
(6 rows)

!ok

!if (false) {
select *, count(*) over (order by deptno), first_value(ename) over (order by deptno rows 2 following) from emp;
 ERROR:  frame starting from following row cannot end with current row
 LINE 1: ...o), first_value(ename) over (order by deptno rows 2 followin...
!ok
!}

# Without ORDER BY
select *, count(*) over (partition by deptno) as c from emp;
 ENAME | DEPTNO | GENDER | C
-------+--------+--------+---
 Adam  |     50 | M      | 2
 Alice |     30 | F      | 2
 Bob   |     10 | M      | 2
 Eric  |     20 | M      | 1
 Eve   |     50 | F      | 2
 Grace |     60 | F      | 1
 Jane  |     10 | F      | 2
 Susan |     30 | F      | 2
 Wilma |        | F      | 1
(9 rows)

!ok

# No ORDER BY, windows defined in WINDOW clause.
select deptno, gender, min(gender) over w1 as a, min(gender) over w2 as d
from emp
window w1 as (),
 w2 as (partition by deptno);
 DEPTNO | GENDER | A | D
--------+--------+---+---
     10 | F      | F | F
     10 | M      | F | F
     20 | M      | F | M
     30 | F      | F | F
     30 | F      | F | F
     50 | F      | F | F
     50 | M      | F | F
     60 | F      | F | F
        | F      | F | F
(9 rows)

!ok

# Composite COUNT.
select deptno, gender, count(gender, deptno) over w1 as a
from emp
window w1 as ();
 DEPTNO | GENDER | A
--------+--------+---
     10 | F      | 8
     10 | M      | 8
     20 | M      | 8
     30 | F      | 8
     30 | F      | 8
     50 | F      | 8
     50 | M      | 8
     60 | F      | 8
        | F      | 8
(9 rows)

!ok

# Window Aggregate and group-by.
!set outputformat mysql
select min(deptno) as x, rank() over (order by ename) as y,
  max(ename) over (partition by deptno) as z
from emp
group by deptno, ename;

+----+---+-------+
| X  | Y | Z     |
+----+---+-------+
|    | 9 | Wilma |
| 50 | 1 | Eve   |
| 50 | 5 | Eve   |
| 20 | 4 | Eric  |
| 10 | 3 | Jane  |
| 10 | 7 | Jane  |
| 60 | 6 | Grace |
| 30 | 2 | Susan |
| 30 | 8 | Susan |
+----+---+-------+
(9 rows)

!ok

# End winagg.oq
