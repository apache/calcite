# outer.iq - Various kinds of outer join
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

select * from emp;
+-------+--------+--------+
| ENAME | DEPTNO | GENDER |
+-------+--------+--------+
| Jane  |     10 | F      |
| Bob   |     10 | M      |
| Eric  |     20 | M      |
| Susan |     30 | F      |
| Alice |     30 | F      |
| Adam  |     50 | M      |
| Eve   |     50 | F      |
| Grace |     60 | F      |
| Wilma |        | F      |
+-------+--------+--------+
(9 rows)

!ok
select * from emp join dept on emp.deptno = dept.deptno;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Bob   |     10 | M      |      10 | Sales       |
| Eric  |     20 | M      |      20 | Marketing   |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(5 rows)

!ok

# The following test is disabled, because we cannot handle non-equi-join.
# Following it are the results from MySQL.
!if (false) {
select * from emp join dept on emp.deptno = dept.deptno and emp.gender = 'F';
 ename | deptno | gender | deptno | dname
-------+--------+--------+--------+-------------
 Jane  |     10 | F      |     10 | Sales
 Susan |     30 | F      |     30 | Engineering
 Alice |     30 | F      |     30 | Engineering

!ok
!}

select * from emp join dept on emp.deptno = dept.deptno where emp.gender = 'F';
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(3 rows)

!ok

select * from (select * from emp where gender ='F') as emp join dept on emp.deptno = dept.deptno;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(3 rows)

!ok

# The following test is disabled, because we cannot handle non-equi-join.
# Following it are the results from MySQL.
!if (false) {
select * from emp left join dept on emp.deptno = dept.deptno and emp.gender = 'F';
 ename | deptno | gender | deptno | dname
-------+--------+--------+--------+-------------
 Jane  |     10 | F      |     10 | Sales
 Susan |     30 | F      |     30 | Engineering
 Alice |     30 | F      |     30 | Engineering
 Bob   |     10 | M      |   NULL | NULL
 Eric  |     20 | M      |   NULL | NULL
 Adam  |     50 | M      |   NULL | NULL
 Eve   |     50 | F      |   NULL | NULL
 Grace |     60 | F      |   NULL | NULL
!ok
!}

select * from emp left join dept on emp.deptno = dept.deptno where emp.gender = 'F';
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Wilma |        | F      |         |             |
+-------+--------+--------+---------+-------------+
(6 rows)

!ok

select * from (select * from emp where gender ='F') as emp left join dept on emp.deptno = dept.deptno;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Wilma |        | F      |         |             |
+-------+--------+--------+---------+-------------+
(6 rows)

!ok

# The following test is disabled, because we cannot handle non-equi-join.
# Following it are the results from MySQL.
!if (false) {
select * from emp right join dept on emp.deptno = dept.deptno and emp.gender = 'F';
+-------+--------+--------+--------+-------------+
| ename | deptno | gender | deptno | dname       |
+-------+--------+--------+--------+-------------+
| Jane  |     10 | F      |     10 | Sales       |
| Susan |     30 | F      |     30 | Engineering |
| Alice |     30 | F      |     30 | Engineering |
| NULL  |   NULL | NULL   |     20 | Marketing   |
| NULL  |   NULL | NULL   |     40 | Empty       |
+-------+--------+--------+--------+-------------+
!ok
!}

select * from emp right join dept on emp.deptno = dept.deptno where emp.gender = 'F';
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(3 rows)

!ok

select * from (select * from emp where gender ='F') as emp right join dept on emp.deptno = dept.deptno;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
|       |        |        |      20 | Marketing   |
|       |        |        |      40 | Empty       |
+-------+--------+--------+---------+-------------+
(5 rows)

!ok

!if (false) {
select * from emp full join dept on emp.deptno = dept.deptno and emp.gender = 'F';
+-------+--------+--------+--------+-------------+
| ename | deptno | gender | deptno |    dname    |
+-------+--------+--------+--------+-------------+
| Jane  |     10 | F      |     10 | Sales       |
|       |        |        |     20 | Marketing   |
| Alice |     30 | F      |     30 | Engineering |
| Susan |     30 | F      |     30 | Engineering |
|       |        |        |     40 | Empty       |
| Wilma |        | F      |        |             |
| Eric  |     20 | M      |        |             |
| Bob   |     10 | M      |        |             |
| Eve   |     50 | F      |        |             |
| Adam  |     50 | M      |        |             |
| Grace |     60 | F      |        |             |
+-------+--------+--------+--------+-------------+
(11 rows)

!ok
!}


select * from emp full join dept on emp.deptno = dept.deptno where emp.gender = 'F';
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Wilma |        | F      |         |             |
+-------+--------+--------+---------+-------------+
(6 rows)

!ok

select * from (select * from emp where gender ='F') as emp full join dept on emp.deptno = dept.deptno;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Wilma |        | F      |         |             |
|       |        |        |      20 | Marketing   |
|       |        |        |      40 | Empty       |
+-------+--------+--------+---------+-------------+
(8 rows)

!ok

# same as above, but expressed as a nestedLoop-join
select * from (select * from emp where gender ='F') as emp full join dept on emp.deptno - dept.deptno = 0;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Alice |     30 | F      |      30 | Engineering |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Wilma |        | F      |         |             |
|       |        |        |      20 | Marketing   |
|       |        |        |      40 | Empty       |
+-------+--------+--------+---------+-------------+
(8 rows)

!ok
EnumerableNestedLoopJoin(condition=[=(-($1, $3), 0)], joinType=[full])
  EnumerableCalc(expr#0..2=[{inputs}], expr#3=['F'], expr#4=[=($t2, $t3)], proj#0..2=[{exprs}], $condition=[$t4])
    EnumerableUnion(all=[true])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Jane'], expr#2=[10], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Bob'], expr#2=[10], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Eric'], expr#2=[20], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Susan'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Alice'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Adam'], expr#2=[50], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Eve'], expr#2=[50], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Grace'], expr#2=[60], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
      EnumerableCalc(expr#0=[{inputs}], expr#1=['Wilma'], expr#2=[null:INTEGER], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
        EnumerableValues(tuples=[[{ 0 }]])
  EnumerableValues(tuples=[[{ 10, 'Sales      ' }, { 20, 'Marketing  ' }, { 30, 'Engineering' }, { 40, 'Empty      ' }]])
!plan

# [CALCITE-554] Outer join over NULL keys generates wrong result
with t1(x) as (select * from  (values (1),(2), (case when 1 = 1 then null else 3 end)) as t(x)),
  t2(x) as (select * from  (values (1),(case when 1 = 1 then null else 3 end)) as t(x))
select t1.x from t1 left join t2 on t1.x = t2.x;
+---+
| X |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

# Equivalent query, using CAST, and skipping unnecessary aliases
# (Postgres doesn't like the missing alias, or the missing parentheses.)
with t1(x) as (select * from (values 1, 2, cast(null as integer))),
  t2(x) as (select * from (values 1, cast(null as integer)))
select t1.x from t1 left join t2 on t1.x = t2.x;
+---+
| X |
+---+
| 1 |
| 2 |
|   |
+---+
(3 rows)

!ok

# Similar query, projecting left and right key columns
with t1(x) as (select * from (values (1), (2), (cast(null as integer))) as t),
  t2(x) as (select * from (values (1), (cast(null as integer))) as t)
select t1.x, t2.x from t1 left join t2 on t1.x = t2.x;
+---+---+
| X | X |
+---+---+
| 1 | 1 |
| 2 |   |
|   |   |
+---+---+
(3 rows)

!ok

# Similar, with 2 columns on each side projecting both columns
with t1(x, y) as (select * from (values (1, 10), (2, 20), (cast(null as integer), 30)) as t),
  t2(x, y) as (select * from (values (1, 100), (cast(null as integer), 200)) as t)
select * from t1 left join t2 on t1.x = t2.x;
+---+----+----+-----+
| X | Y  | X0 | Y0  |
+---+----+----+-----+
| 1 | 10 |  1 | 100 |
| 2 | 20 |    |     |
|   | 30 |    |     |
+---+----+----+-----+
(3 rows)

!ok

# Similar, full join
with t1(x, y) as (select * from (values (1, 10), (2, 20), (cast(null as integer), 30)) as t),
  t2(x, y) as (select * from (values (1,100), (cast(null as integer), 200)) as t)
select * from t1 full join t2 on t1.x = t2.x;
+---+----+----+-----+
| X | Y  | X0 | Y0  |
+---+----+----+-----+
| 1 | 10 |  1 | 100 |
| 2 | 20 |    |     |
|   | 30 |    |     |
|   |    |    | 200 |
+---+----+----+-----+
(4 rows)

!ok

# Outer join condition that references columns from only one side is
# effectively pushed down. Checked on Oracle.
!use scott
select * from "scott".emp right join "scott".dept on sal < 100;
+-------+-------+-----+-----+----------+-----+------+--------+---------+------------+----------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO | DEPTNO0 | DNAME      | LOC      |
+-------+-------+-----+-----+----------+-----+------+--------+---------+------------+----------+
|       |       |     |     |          |     |      |        |      10 | ACCOUNTING | NEW YORK |
|       |       |     |     |          |     |      |        |      20 | RESEARCH   | DALLAS   |
|       |       |     |     |          |     |      |        |      30 | SALES      | CHICAGO  |
|       |       |     |     |          |     |      |        |      40 | OPERATIONS | BOSTON   |
+-------+-------+-----+-----+----------+-----+------+--------+---------+------------+----------+
(4 rows)

!ok

# End outer.iq
