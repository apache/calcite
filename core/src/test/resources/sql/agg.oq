# agg.oq - Aggregate functions
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# count(*) returns number of rows in table
select count(ename) as c from emp;
+---+
| C |
+---+
| 9 |
+---+
(1 row)

!ok

# count of not-nullable column same as count(*)
select count(ename) as c from emp;
+---+
| C |
+---+
| 9 |
+---+
(1 row)

!ok

# count of nullable column
select count(deptno) as c from emp;
+---+
| C |
+---+
| 8 |
+---+
(1 row)

!ok

# composite count
!if (false) {
select count(deptno, ename, 1, deptno) as c from emp;
+---+
| C |
+---+
| 8 |
+---+
(1 row)

!ok
!}

select city, gender as c from emps;
+---------------+---+
| CITY          | C |
+---------------+---+
| Vancouver     | F |
| San Francisco | M |
|               |   |
| Vancouver     | M |
|               | F |
+---------------+---+
(5 rows)

!ok

# SELECT DISTINCT includes fully and partially null rows
select distinct city, gender from emps;
+---------------+--------+
| CITY          | GENDER |
+---------------+--------+
|               |        |
| Vancouver     | M      |
|               | F      |
| San Francisco | M      |
| Vancouver     | F      |
+---------------+--------+
(5 rows)

!ok

# COUNT excludes fully or partially null rows
select count(city, gender) as c from emps;
+---+
| C |
+---+
| 3 |
+---+
(1 row)

!ok

# COUNT-DISTINCT excludes fully or partially null rows
select count(distinct city, gender) as c from emps;
+---+
| C |
+---+
| 3 |
+---+
(1 row)

!ok

select distinct mod(deptno, 20) as m, gender as c from emps;
+----+---+
| M  | C |
+----+---+
|  0 | F |
| 10 |   |
|  0 | M |
+----+---+
(3 rows)

!ok

# Partially null row (10, NULL) is excluded from count.
select count(distinct mod(deptno, 20), gender) as c from emps;
+---+
| C |
+---+
| 2 |
+---+
(1 row)

!ok

select count(mod(deptno, 20), gender) as c from emps;
+---+
| C |
+---+
| 4 |
+---+
(1 row)

!ok

# Nulls in GROUP BY
select x = 1 as x1, count(*) as c
from (values 0, 1, 2, cast(null as integer)) as t(x)
group by x = 1;
+-------+---+
| X1    | C |
+-------+---+
| false | 2 |
| true  | 1 |
|       | 1 |
+-------+---+
(3 rows)

!ok

# Basic GROUPING SETS
select deptno, count(*) as c from emps group by grouping sets ((), (deptno));
+--------+---+
| DEPTNO | C |
+--------+---+
|     10 | 1 |
|     20 | 2 |
|     40 | 2 |
|        | 5 |
+--------+---+
(4 rows)

!ok

# GROUPING SETS on expression
select deptno + 1, count(*) as c from emps group by grouping sets ((), (deptno + 1));
+--------+---+
| EXPR$0 | C |
+--------+---+
|     11 | 1 |
|     21 | 2 |
|     41 | 2 |
|        | 5 |
+--------+---+
(4 rows)

!ok

# CUBE
select deptno + 1, count(*) as c from emp group by cube(deptno, gender);
+--------+---+
| EXPR$0 | C |
+--------+---+
|     11 | 1 |
|     11 | 1 |
|     11 | 2 |
|     21 | 1 |
|     21 | 1 |
|     31 | 2 |
|     31 | 2 |
|     51 | 1 |
|     51 | 1 |
|     51 | 2 |
|     61 | 1 |
|     61 | 1 |
|        | 1 |
|        | 1 |
|        | 3 |
|        | 6 |
|        | 9 |
+--------+---+
(17 rows)

!ok

# ROLLUP on 1 column
select deptno + 1, count(*) as c
from emp
group by rollup(deptno);
+--------+---+
| EXPR$0 | C |
+--------+---+
|     11 | 2 |
|     21 | 1 |
|     31 | 2 |
|     51 | 2 |
|     61 | 1 |
|        | 1 |
|        | 9 |
+--------+---+
(7 rows)

!ok

# ROLLUP on 2 columns; project columns in different order
select gender, deptno + 1, count(*) as c
from emp
group by rollup(deptno, gender);
+--------+--------+---+
| GENDER | EXPR$1 | C |
+--------+--------+---+
| M      |     21 | 1 |
| F      |     11 | 1 |
| F      |     31 | 2 |
| F      |     51 | 1 |
| F      |     61 | 1 |
| F      |        | 1 |
| M      |     11 | 1 |
| M      |     51 | 1 |
|        |     11 | 2 |
|        |     21 | 1 |
|        |     31 | 2 |
|        |     51 | 2 |
|        |     61 | 1 |
|        |        | 1 |
|        |        | 9 |
+--------+--------+---+
(15 rows)

!ok

# ROLLUP on column with nulls
# Note the two rows with NULL key (one represents ALL)
select gender, count(*) as c
from emp
group by rollup(gender);
+--------+---+
| GENDER | C |
+--------+---+
| F      | 6 |
| M      | 3 |
|        | 9 |
+--------+---+
(3 rows)

!ok

# ROLLUP plus ORDER BY
select gender, count(*) as c
from emp
group by rollup(gender)
order by c desc;
+--------+---+
| GENDER | C |
+--------+---+
|        | 9 |
| F      | 6 |
| M      | 3 |
+--------+---+
(3 rows)

!ok

# ROLLUP cartesian product
select deptno, count(*) as c
from emp
group by rollup(deptno), rollup(gender);
+--------+---+
| DEPTNO | C |
+--------+---+
|     10 | 1 |
|     10 | 1 |
|     20 | 1 |
|     20 | 1 |
|        | 1 |
|     10 | 2 |
|     30 | 2 |
|     30 | 2 |
|     50 | 1 |
|     50 | 1 |
|     50 | 2 |
|     60 | 1 |
|     60 | 1 |
|        | 1 |
|        | 3 |
|        | 6 |
|        | 9 |
+--------+---+
(17 rows)

!ok

# ROLLUP cartesian product of with tuple with expression
select deptno / 2 + 1 as half1, count(*) as c
from emp
group by rollup(deptno / 2, gender), rollup(substring(ename FROM 1 FOR 1));
+-------+---+
| HALF1 | C |
+-------+---+
|    11 | 1 |
|    11 | 1 |
|    11 | 1 |
|    11 | 1 |
|    16 | 1 |
|    16 | 1 |
|    16 | 1 |
|    16 | 1 |
|    16 | 2 |
|    16 | 2 |
|    26 | 1 |
|    26 | 1 |
|    26 | 1 |
|    26 | 1 |
|    26 | 1 |
|    26 | 1 |
|    26 | 2 |
|    31 | 1 |
|    31 | 1 |
|    31 | 1 |
|    31 | 1 |
|     6 | 1 |
|     6 | 1 |
|     6 | 1 |
|     6 | 1 |
|     6 | 1 |
|     6 | 1 |
|     6 | 2 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 1 |
|       | 2 |
|       | 2 |
|       | 9 |
+-------+---+
(40 rows)

!ok

# ROLLUP with HAVING
select deptno + 1 as d1, count(*) as c
from emp
group by rollup(deptno)
having count(*) > 3;
+----+---+
| D1 | C |
+----+---+
|    | 9 |
+----+---+
(1 row)

!ok

# CUBE and DISTINCT
select distinct count(*) from emp group by cube(deptno, gender);
+--------+
| EXPR$0 |
+--------+
|      1 |
|      2 |
|      3 |
|      6 |
|      9 |
+--------+
(5 rows)

!ok

# CUBE and JOIN
select e.deptno, e.gender, min(e.ename) as min_name
from emp as e join dept as d using (deptno)
group by cube(e.deptno, d.deptno, e.gender)
having count(*) > 2 or gender = 'M' and e.deptno = 10;
+--------+--------+----------+
| DEPTNO | GENDER | MIN_NAME |
+--------+--------+----------+
|     10 | M      | Bob      |
|     10 | M      | Bob      |
|        | F      | Alice    |
|        |        | Alice    |
+--------+--------+----------+
(4 rows)

!ok

# GROUPING in SELECT clause of GROUP BY query
select count(*) as c, grouping(deptno) as g
from emp
group by deptno;
+---+---+
| C | G |
+---+---+
| 1 | 1 |
| 1 | 1 |
| 1 | 1 |
| 2 | 1 |
| 2 | 1 |
| 2 | 1 |
+---+---+
(6 rows)

!ok

# GROUPING, GROUP_ID, GROUPING_ID in SELECT clause of GROUP BY query
select count(*) as c,
  grouping(deptno) as g,
  group_id() as gid,
  grouping_id(deptno) as gd,
  grouping_id(gender) as gg,
  grouping_id(gender, deptno) as ggd,
  grouping_id(gender, deptno) as gdg
from emp
group by deptno, gender;
+---+---+-----+----+----+-----+-----+
| C | G | GID | GD | GG | GGD | GDG |
+---+---+-----+----+----+-----+-----+
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 1 | 1 |   3 |  1 |  1 |   3 |   3 |
| 2 | 1 |   3 |  1 |  1 |   3 |   3 |
+---+---+-----+----+----+-----+-----+
(8 rows)

!ok

# GROUPING in ORDER BY clause
select count(*) as c
from emp
group by deptno
order by grouping(deptno);
+---+
| C |
+---+
| 1 |
| 2 |
| 1 |
| 2 |
| 1 |
| 2 |
+---+
(6 rows)

!ok

# Duplicate argument to GROUPING_ID.
select deptno, gender, grouping_id(deptno, gender, deptno), count(*) as c
from emp
where deptno = 10
group by rollup(gender, deptno);
+--------+--------+--------+---+
| DEPTNO | GENDER | EXPR$2 | C |
+--------+--------+--------+---+
|     10 | F      |      0 | 1 |
|     10 | M      |      0 | 1 |
|        | F      |      5 | 1 |
|        | M      |      5 | 1 |
|        |        |      7 | 2 |
+--------+--------+--------+---+
(5 rows)

!ok

# GROUPING in SELECT clause of ROLLUP query
select count(*) as c, deptno, grouping(deptno) as g
from emp
group by rollup(deptno);
+---+--------+---+
| C | DEPTNO | G |
+---+--------+---+
| 1 |     20 | 0 |
| 1 |     60 | 0 |
| 1 |        | 0 |
| 2 |     10 | 0 |
| 2 |     30 | 0 |
| 2 |     50 | 0 |
| 9 |        | 1 |
+---+--------+---+
(7 rows)

!ok

# GROUPING, GROUPING_ID and GROUP_ID
select deptno, gender, grouping(deptno) gd, grouping(gender) gg,
  grouping_id(deptno, gender) dg, grouping_id(gender, deptno) gd,
  group_id() gid, count(*) c
from emp group by cube(deptno, gender);
+--------+--------+----+----+----+----+-----+---+
| DEPTNO | GENDER | GD | GG | DG | GD | GID | C |
+--------+--------+----+----+----+----+-----+---+
|     10 | F      |  0 |  0 |  0 |  0 |   0 | 1 |
|     10 | M      |  0 |  0 |  0 |  0 |   0 | 1 |
|     10 |        |  0 |  1 |  1 |  2 |   1 | 2 |
|     20 | M      |  0 |  0 |  0 |  0 |   0 | 1 |
|     20 |        |  0 |  1 |  1 |  2 |   1 | 1 |
|     30 | F      |  0 |  0 |  0 |  0 |   0 | 2 |
|     30 |        |  0 |  1 |  1 |  2 |   1 | 2 |
|     50 | F      |  0 |  0 |  0 |  0 |   0 | 1 |
|     50 | M      |  0 |  0 |  0 |  0 |   0 | 1 |
|     50 |        |  0 |  1 |  1 |  2 |   1 | 2 |
|     60 | F      |  0 |  0 |  0 |  0 |   0 | 1 |
|     60 |        |  0 |  1 |  1 |  2 |   1 | 1 |
|        | F      |  0 |  0 |  0 |  0 |   0 | 1 |
|        | F      |  1 |  0 |  2 |  1 |   2 | 6 |
|        | M      |  1 |  0 |  2 |  1 |   2 | 3 |
|        |        |  0 |  1 |  1 |  2 |   1 | 1 |
|        |        |  1 |  1 |  3 |  3 |   3 | 9 |
+--------+--------+----+----+----+----+-----+---+
(17 rows)

!ok

!use scott

# Aggregate FILTER
select deptno,
  sum(sal) filter (where job = 'CLERK') c_sal,
  sum(sal) filter (where job = 'CLERK' and deptno > 10) c10_sal,
  max(sal) filter (where job = 'CLERK') as max_c,
  min(sal) filter (where job = 'CLERK') as min_c,
  max(sal) filter (where job = 'CLERK')
    - min(sal) filter (where job = 'CLERK') as range_c,
  max(sal) filter (where job = 'SALESMAN')
    - min(sal) filter (where job = 'SALESMAN') as range_m
from "scott".emp
group by deptno;
+--------+---------+---------+---------+---------+---------+---------+
| DEPTNO | C_SAL   | C10_SAL | MAX_C   | MIN_C   | RANGE_C | RANGE_M |
+--------+---------+---------+---------+---------+---------+---------+
|     10 | 1300.00 |         | 1300.00 | 1300.00 |    0.00 |         |
|     20 | 1900.00 | 1900.00 | 1100.00 |  800.00 |  300.00 |         |
|     30 |  950.00 |  950.00 |  950.00 |  950.00 |    0.00 |  350.00 |
+--------+---------+---------+---------+---------+---------+---------+
(3 rows)

!ok

# Aggregate FILTER on condition in GROUP BY
select deptno,
  sum(sal) filter (where deptno = 10) sal_10
from "scott".emp
group by deptno;
+--------+---------+
| DEPTNO | SAL_10  |
+--------+---------+
|     10 | 8750.00 |
|     20 |         |
|     30 |         |
+--------+---------+
(3 rows)

!ok

# Aggregate FILTER with HAVING
select deptno
from "scott".emp
group by deptno
having sum(sal) filter (where job = 'CLERK') > 1000;
+--------+
| DEPTNO |
+--------+
|     10 |
|     20 |
+--------+
(2 rows)

!ok

# Aggregate FILTER with ORDER BY
select deptno
from "scott".emp
group by deptno
order by sum(sal) filter (where job = 'CLERK');
+--------+
| DEPTNO |
+--------+
|     30 |
|     10 |
|     20 |
+--------+
(3 rows)

!ok

# Aggregate FILTER with JOIN
select dept.deptno,
  sum(sal) filter (where 1 < 2) as s,
  sum(sal) as s1,
  count(*) filter (where emp.ename < dept.dname) as c
from "scott".emp
join "scott".dept using (deptno)
group by dept.deptno;
+--------+----------+----------+---+
| DEPTNO | S        | S1       | C |
+--------+----------+----------+---+
|     10 |  8750.00 |  8750.00 | 0 |
|     20 | 10875.00 | 10875.00 | 3 |
|     30 |  9400.00 |  9400.00 | 4 |
+--------+----------+----------+---+
(3 rows)

!ok

# Aggregate FILTER with DISTINCT
select deptno,
 count(distinct job) as cdj
from "scott".emp
group by deptno;
+--------+-----+
| DEPTNO | CDJ |
+--------+-----+
|     10 |   3 |
|     20 |   3 |
|     30 |   3 |
+--------+-----+
(3 rows)

!ok

select deptno,
 count(distinct job) filter (where job <> 'SALESMAN') as cdj
from "scott".emp
group by deptno;
+--------+-----+
| DEPTNO | CDJ |
+--------+-----+
|     10 |   3 |
|     20 |   3 |
|     30 |   2 |
+--------+-----+
(3 rows)

!ok

# End agg.oq
