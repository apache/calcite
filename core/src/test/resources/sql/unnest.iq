# unnest.iq - Tests for UNNEST
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use scott
!set outputformat mysql

select *
from unnest(array [(1, 'a'), (2, 'b')]) as t (x, y);
+---+---+
| X | Y |
+---+---+
| 1 | a |
| 2 | b |
+---+---+
(2 rows)

!ok

select *
from UNNEST(array ['apple', 'banana']) as fruit (fruit);
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

# When UNNEST produces a single column, and you use an alias for the
# relation, that alias becomes the name of the column.
select *
from UNNEST(array ['apple', 'banana']) as fruit;
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

select fruit.*
from UNNEST(array ['apple', 'banana']) as fruit;
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

select fruit
from UNNEST(array ['apple', 'banana']) as fruit;
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

select fruit.fruit
from UNNEST(array ['apple', 'banana']) as fruit;
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

# As previous, but quoted
select *
from UNNEST(array ['apple', 'banana']) as "fruit";
+--------+
| fruit  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

# If UNNEST is not the direct child of the AS, aliasing doesn't happen.
SELECT fruit.*
FROM (
  SELECT *
  FROM UNNEST(array ['apple', 'banana']) as x) as fruit;
+--------+
| X      |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

# If UNNEST applies to a value that is not an array constructor,
# aliasing doesn't happen. Thus the last column is 'EXPR$0', not 'z'.
SELECT *
FROM (
    SELECT x, collect(y) as ys
    FROM (VALUES (1, 1), (2, 2), (1, 3)) AS t (x, y)
    GROUP BY x) AS u,
  UNNEST(u.ys) AS z;
+---+--------+--------+
| X | YS     | EXPR$0 |
+---+--------+--------+
| 1 | [1, 3] |      1 |
| 1 | [1, 3] |      3 |
| 2 | [2]    |      2 |
+---+--------+--------+
(3 rows)

!ok

# If VALUES is not the direct child of the AS, aliasing doesn't happen.
SELECT fruit.*
FROM (
  SELECT *
  FROM (VALUES 'apple', 'banana') as x) as fruit;
+--------+
| X      |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

# If UNNEST yields more than one column, the aliasing doesn't happen.
select *
from UNNEST(array [('apple', 1), ('banana', 2)]) as fruit;
+--------+--------+
| EXPR$0 | EXPR$1 |
+--------+--------+
| apple  |      1 |
| banana |      2 |
+--------+--------+
(2 rows)

!ok

# MULTISET gets the same treatment as UNNEST.
select *
from unnest(multiset [1, 2, 1]) as v;
+---+
| V |
+---+
| 1 |
| 1 |
| 2 |
+---+
(3 rows)

!ok

# VALUES gets the same treatment as UNNEST.
#
# This goes beyond PostgreSQL. In PostgreSQL, the following
# query yields a column called "column1", not "fruit":
#     select * from (values (1), (2)) as fruit
#
select *
from (values ('apple'), ('banana')) as fruit;
+--------+
| FRUIT  |
+--------+
| apple  |
| banana |
+--------+
(2 rows)

!ok

select upper(f)
from (values 'apple', 'banana', 'pear') as f;
+--------+
| EXPR$0 |
+--------+
| APPLE  |
| BANANA |
| PEAR   |
+--------+
(3 rows)

!ok

SELECT AVG(x) as "avg"
FROM UNNEST(array [0, 2, 4, 4, 5]) as x;
+-----+
| avg |
+-----+
|   3 |
+-----+
(1 row)

!ok


WITH tab(field1, field2) AS (VALUES 
	(1, ARRAY[ ROW(0), ROW(NULL)]), 
	(2, ARRAY[ ROW(1)])
)
SELECT field1 FROM tab
WHERE field1 IS NOT NULL 
AND field1 NOT IN (
 	SELECT subfield
	FROM  UNNEST(field2) AS L(subfield)
);
+--------+
| FIELD1 |
+--------+
|      2 |
+--------+
(1 row)

!ok


# End unnest.iq
