# planner.iq - planner tests can customizable optimization rules
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# The following line is used to update the default planner rules.
# "+" means add a rule, "-" means remove a rule. Only the "CoreRules." can be omitted.
!set planner-rules "-INTERSECT_TO_DISTINCT,-EnumerableRules.ENUMERABLE_INTERSECT_RULE,+CoreRules.INTERSECT_TO_SEMI_JOIN"

# Test INTERSECT_TO_SEMI_JOIN
with t (i) as (values (0), (1))
select * from t as t1
intersect
select * from t as t2 where t2.i > 0;
+---+
| I |
+---+
| 1 |
+---+
(1 row)

!ok

EnumerableNestedLoopJoin(condition=[IS NOT DISTINCT FROM($0, $1)], joinType=[semi])
  EnumerableValues(tuples=[[{ 0 }, { 1 }]])
  EnumerableCalc(expr#0=[{inputs}], expr#1=[0], expr#2=[>($t0, $t1)], EXPR$0=[$t0], $condition=[$t2])
    EnumerableValues(tuples=[[{ 0 }, { 1 }]])
!plan

# Test that rules set by "!set planner-rules" are sticky
with t (i) as (values (0), (1))
select * from t as t1
intersect
select * from t as t2 where t2.i > 0;
+---+
| I |
+---+
| 1 |
+---+
(1 row)

!ok

EnumerableNestedLoopJoin(condition=[IS NOT DISTINCT FROM($0, $1)], joinType=[semi])
  EnumerableValues(tuples=[[{ 0 }, { 1 }]])
  EnumerableCalc(expr#0=[{inputs}], expr#1=[0], expr#2=[>($t0, $t1)], EXPR$0=[$t0], $condition=[$t2])
    EnumerableValues(tuples=[[{ 0 }, { 1 }]])
!plan

# This command is used to reset the planner rules to the original state.
# Before running this command, the planner rules by "!set planner-rules" are sticky.
!set planner-rules original

# Test that rules set by "!set planner-rules original" are reset
with t (i) as (values (0), (1))
select * from t as t1
intersect
select * from t as t2 where t2.i > 0;
+---+
| I |
+---+
| 1 |
+---+
(1 row)

!ok

EnumerableIntersect(all=[false])
  EnumerableValues(tuples=[[{ 0 }, { 1 }]])
  EnumerableCalc(expr#0=[{inputs}], expr#1=[0], expr#2=[>($t0, $t1)], EXPR$0=[$t0], $condition=[$t2])
    EnumerableValues(tuples=[[{ 0 }, { 1 }]])
!plan

# End planner.iq
