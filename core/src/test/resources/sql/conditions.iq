# conditions.iq - conditions
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use catchall
!set outputformat mysql

# OR test

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where a = 1 or b = 1
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 1 |
| 1 | 0 |
| 1 | 1 |
| 1 |   |
|   | 1 |
+---+---+
(5 rows)

!ok

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where not (a = 1 or b = 1)
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 0 |
+---+---+
(1 row)

!ok

# AND test

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where a = 1 AND b = 1
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 1 | 1 |
+---+---+
(1 row)

!ok

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where not (a = 1 AND b = 1)
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 0 |
| 0 | 1 |
| 0 |   |
| 1 | 0 |
|   | 0 |
+---+---+
(5 rows)

!ok

# Test cases for CALCITE-980

select "value" from "nullables" a where "value" = 'A' or "value" = 'B' order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
+-------+
(2 rows)

!ok

select "value" from "nullables" a where not ("value" = 'A' or "value" = 'B') order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a where not (not ("value" = 'A' or "value" = 'B')) order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
+-------+
(2 rows)

!ok

select "value" from "nullables" a where "value" = 'A' and "value" = 'B' order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

select "value" from "nullables" a where not ("value" = 'A' and "value" = 'B') order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
| C     |
+-------+
(3 rows)

!ok

select "value" from "nullables" a where not (not ("value" = 'A' and "value" = 'B')) order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

select "value" from "nullables" a
 where case when not ("value" = 'A' or "value" = 'B') then 1 else 0 end = 1
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 2
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not /* <--diff from above */ ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 1 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 0 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
|       |
+-------+
(3 rows)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 2 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

# Test case for [CALCITE-2726] based on [HIVE-20617]
with ax(s, t) as (values ('a','a'),('a','a '),('b','bb'))
select 'expected 1' as e,count(*) as c
from ax where ((s,t) in (('a','a'),(null, 'bb'))) is null;
+------------+---+
| E          | C |
+------------+---+
| expected 1 | 1 |
+------------+---+
(1 row)

!ok

with ax(s) as (values (1),(0))
select case when s=0 then false else 100/s > 0 end from ax;

+--------+
| EXPR$0 |
+--------+
| false  |
| true   |
+--------+
(2 rows)

!ok

# Test case for CALCITE-2783
with ax(s) as (values (true),(false),(cast(null as boolean)))
select s, (s or s is null), (s and s is not null) from ax;

+-------+--------+--------+
| S     | EXPR$1 | EXPR$2 |
+-------+--------+--------+
| false | false  | false  |
| true  | true   | true   |
|       | true   | false  |
+-------+--------+--------+
(3 rows)

!ok


# End conditions.iq
