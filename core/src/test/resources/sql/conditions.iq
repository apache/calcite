# conditions.iq - conditions
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use catchall
!set outputformat mysql

# OR test

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where a = 1 or b = 1
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 1 |
| 1 | 0 |
| 1 | 1 |
| 1 |   |
|   | 1 |
+---+---+
(5 rows)

!ok

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where not (a = 1 or b = 1)
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 0 |
+---+---+
(1 row)

!ok

# AND test

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where a = 1 AND b = 1
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 1 | 1 |
+---+---+
(1 row)

!ok

with tmp(a, b) as (
  values (1, 1), (1, 0), (1, cast(null as int))
       , (0, 1), (0, 0), (0, cast(null as int))
       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))
select *
  from tmp
 where not (a = 1 AND b = 1)
 order by 1, 2;

+---+---+
| A | B |
+---+---+
| 0 | 0 |
| 0 | 1 |
| 0 |   |
| 1 | 0 |
|   | 0 |
+---+---+
(5 rows)

!ok

# Test cases for CALCITE-980

select "value" from "nullables" a where "value" = 'A' or "value" = 'B' order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
+-------+
(2 rows)

!ok

select "value" from "nullables" a where not ("value" = 'A' or "value" = 'B') order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a where not (not ("value" = 'A' or "value" = 'B')) order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
+-------+
(2 rows)

!ok

select "value" from "nullables" a where "value" = 'A' and "value" = 'B' order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

select "value" from "nullables" a where not ("value" = 'A' and "value" = 'B') order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
| C     |
+-------+
(3 rows)

!ok

select "value" from "nullables" a where not (not ("value" = 'A' and "value" = 'B')) order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

select "value" from "nullables" a
 where case when not ("value" = 'A' or "value" = 'B') then 1 else 0 end = 1
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 2
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not /* <--diff from above */ ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 1 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
| C     |
+-------+
(1 row)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 0 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
| A     |
| B     |
|       |
+-------+
(3 rows)

!ok

select "value" from "nullables" a
 where
   case when not ("value"='A' or "value"='B')
     then
       case when not ("value"='A' or "value"='B') then 1 else 2 end
     else 0
   end = 2 /* <- diff from above*/
 order by 1;

+-------+
| value |
+-------+
+-------+
(0 rows)

!ok

# Test case for [CALCITE-2726] based on [HIVE-20617]
with ax(s, t) as (values ('a','a'),('a','a '),('b','bb'))
select 'expected 1' as e,count(*) as c
from ax where ((s,t) in (('a','a'),(null, 'bb'))) is null;
+------------+---+
| E          | C |
+------------+---+
| expected 1 | 1 |
+------------+---+
(1 row)

!ok

with ax(s) as (values (1),(0))
select case when s=0 then false else 100/s > 0 end from ax;

+--------+
| EXPR$0 |
+--------+
| false  |
| true   |
+--------+
(2 rows)

!ok

# Test case for CALCITE-2783
with ax(s) as (values (true),(false),(cast(null as boolean)))
select s, (s or s is null), (s and s is not null) from ax;

+-------+--------+--------+
| S     | EXPR$1 | EXPR$2 |
+-------+--------+--------+
| false | false  | false  |
| true  | true   | true   |
|       | true   | false  |
+-------+--------+--------+
(3 rows)

!ok

!use scott

# Test case for [CALCITE-4352] "IS NOT NULL" condition gets dropped
select *
from "scott".emp
where deptno > 5 AND deptno < 20 AND mgr IS NOT NULL;
+-------+--------+---------+------+------------+---------+------+--------+
| EMPNO | ENAME  | JOB     | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+--------+---------+------+------------+---------+------+--------+
|  7782 | CLARK  | MANAGER | 7839 | 1981-06-09 | 2450.00 |      |     10 |
|  7934 | MILLER | CLERK   | 7782 | 1982-01-23 | 1300.00 |      |     10 |
+-------+--------+---------+------+------------+---------+------+--------+
(2 rows)

!ok

select *
from "scott".emp
where deptno > 5 AND deptno < 20 AND mgr IS NULL;
+-------+-------+-----------+-----+------------+---------+------+--------+
| EMPNO | ENAME | JOB       | MGR | HIREDATE   | SAL     | COMM | DEPTNO |
+-------+-------+-----------+-----+------------+---------+------+--------+
|  7839 | KING  | PRESIDENT |     | 1981-11-17 | 5000.00 |      |     10 |
+-------+-------+-----------+-----+------------+---------+------+--------+
(1 row)

!ok

# [CALCITE-1794] Expressions with numeric comparisons are not simplified when CAST is present

# Pull up predicate simplified plan has only 'deptno = 25' and has dropped the 'deptno <> 20' condition.
select * from "scott".emp where deptno = 25 and deptno <> 20;
+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t7):INTEGER], expr#9=[25], expr#10=[=($t8, $t9)], proj#0..7=[{exprs}], $condition=[$t10])
  EnumerableTableScan(table=[[scott, EMP]])
!plan

# SARGs simplified plan has only 'deptno = 25' and has dropped the 'deptno <> 20' condition.
select * from "scott".emp where deptno <> 20 and deptno = 25;
+-------+-------+-----+-----+----------+-----+------+--------+
| EMPNO | ENAME | JOB | MGR | HIREDATE | SAL | COMM | DEPTNO |
+-------+-------+-----+-----+----------+-----+------+--------+
+-------+-------+-----+-----+----------+-----+------+--------+
(0 rows)

!ok

EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t7):INTEGER], expr#9=[25], expr#10=[=($t8, $t9)], proj#0..7=[{exprs}], $condition=[$t10])
  EnumerableTableScan(table=[[scott, EMP]])
!plan

# [CALCITE-5138] Join on condition generates wrong plan when the condition is sub-query

# Bad: more than one value returned by sub-query
select empno
from emp as r
         left join dept as s on (select empno > 0 from emp);
more than one value in agg SINGLE_VALUE
!error

# Bad: more than one value returned by sub-query
select empno
from emp as r
         left join dept as s on (select true from emp);
more than one value in agg SINGLE_VALUE
!error

# Bad: more than one column returned by sub-query
select empno
from emp as r
         left join dept as s on (select true,true from emp);
sub-query as condition must return only one column
!error

# Bad: column returned by sub-query is not a conditon
select empno
from emp as r
         left join dept as s on (select empno from emp);
ON clause must be a condition
!error

# sub-query return true
select empno
from emp as r
         left join dept as s on (select count(true) > 0 from emp)
where empno = 7369;
+-------+
| EMPNO |
+-------+
|  7369 |
|  7369 |
|  7369 |
|  7369 |
+-------+
(4 rows)

!ok

EnumerableCalc(expr#0..2=[{inputs}], EMPNO=[$t0])
  EnumerableNestedLoopJoin(condition=[true], joinType=[left])
    EnumerableCalc(expr#0..7=[{inputs}], expr#8=[CAST($t0):INTEGER NOT NULL], expr#9=[7369], expr#10=[=($t8, $t9)], EMPNO=[$t0], $condition=[$t10])
      EnumerableTableScan(table=[[scott, EMP]])
    EnumerableCalc(expr#0..1=[{inputs}], proj#0..1=[{exprs}], $condition=[$t1])
      EnumerableNestedLoopJoin(condition=[true], joinType=[left])
        EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
          EnumerableTableScan(table=[[scott, DEPT]])
        EnumerableAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
          EnumerableCalc(expr#0=[{inputs}], expr#1=[0], expr#2=[>($t0, $t1)], EXPR$0=[$t2])
            EnumerableAggregate(group=[{}], agg#0=[COUNT()])
              EnumerableTableScan(table=[[scott, EMP]])
!plan

# sub-query return true with Equal condition
select r.empno, s.deptno
from emp as r
         left join dept as s on (select count(true) > 0 from emp) and s.deptno = r.deptno;

+-------+--------+
| EMPNO | DEPTNO |
+-------+--------+
|  7369 |     20 |
|  7499 |     30 |
|  7521 |     30 |
|  7566 |     20 |
|  7654 |     30 |
|  7698 |     30 |
|  7782 |     10 |
|  7788 |     20 |
|  7839 |     10 |
|  7844 |     30 |
|  7876 |     20 |
|  7900 |     30 |
|  7902 |     20 |
|  7934 |     10 |
+-------+--------+
(14 rows)

!ok

# sub-query return false
select r.empno, s.deptno
from emp as r
         left join dept as s on (select count(job) > 0 from bonus);

+-------+--------+
| EMPNO | DEPTNO |
+-------+--------+
|  7369 |        |
|  7499 |        |
|  7521 |        |
|  7566 |        |
|  7654 |        |
|  7698 |        |
|  7782 |        |
|  7788 |        |
|  7839 |        |
|  7844 |        |
|  7876 |        |
|  7900 |        |
|  7902 |        |
|  7934 |        |
+-------+--------+
(14 rows)

!ok

# ON condition is a column
select *
from dept
         LEFT JOIN (SELECT COUNT(*) > 0 AS "EXPR$0"
                    FROM emp) AS "t0" ON "EXPR$0";
+--------+------------+----------+--------+
| DEPTNO | DNAME      | LOC      | EXPR$0 |
+--------+------------+----------+--------+
|     10 | ACCOUNTING | NEW YORK | true   |
|     20 | RESEARCH   | DALLAS   | true   |
|     30 | SALES      | CHICAGO  | true   |
|     40 | OPERATIONS | BOSTON   | true   |
+--------+------------+----------+--------+
(4 rows)

!ok

# As above, but complicated
SELECT emp.empno
FROM emp
         LEFT JOIN (select *
                    from dept
                             LEFT JOIN (SELECT COUNT(*) > 0 AS "EXPR$0"
                                        FROM emp) AS "t0" ON TRUE) as "dt0*" ON "EXPR$0"
where emp.empno = 7902;
+-------+
| EMPNO |
+-------+
|  7902 |
|  7902 |
|  7902 |
|  7902 |
+-------+
(4 rows)

!ok


# End conditions.iq
