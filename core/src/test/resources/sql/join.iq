# join.iq - Join query tests
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# Various combinations of comma and cross join
with t (i) as (values (0), (1))
select *
from t as t1
   cross join t as t2,
 t as t3
   cross join t as t4
where t1.i + t2.i + t3.i + t4.i = 1;
+---+----+----+----+
| I | I0 | I1 | I2 |
+---+----+----+----+
| 0 |  0 |  0 |  1 |
| 0 |  0 |  1 |  0 |
| 0 |  1 |  0 |  0 |
| 1 |  0 |  0 |  0 |
+---+----+----+----+
(4 rows)

!ok

with t (i) as (values (0), (1))
select *
from t as t1
   cross join t as t2,
 t as t3
where t1.i + t2.i + t3.i = 1;
+---+----+----+
| I | I0 | I1 |
+---+----+----+
| 0 |  0 |  1 |
| 0 |  1 |  0 |
| 1 |  0 |  0 |
+---+----+----+
(3 rows)

!ok

with t (i) as (values (0), (1))
select *
from t as t1,
 t as t2
   cross join t as t3
where t1.i + t2.i + t3.i = 1;
+---+----+----+
| I | I0 | I1 |
+---+----+----+
| 0 |  0 |  1 |
| 0 |  1 |  0 |
| 1 |  0 |  0 |
+---+----+----+
(3 rows)

!ok

with t (i) as (values (0), (1))
select *
from t as t1
 cross join t as t2
 cross join t as t3
 cross join t as t4
where t1.i + t2.i + t3.i + t4.i = 1;
+---+----+----+----+
| I | I0 | I1 | I2 |
+---+----+----+----+
| 0 |  0 |  0 |  1 |
| 0 |  0 |  1 |  0 |
| 0 |  1 |  0 |  0 |
| 1 |  0 |  0 |  0 |
+---+----+----+----+
(4 rows)

!ok

# OR is a nestedLoop join
select *
from emp
join dept
on emp.deptno = dept.deptno or emp.ename = dept.dname;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Alice |     30 | F      |      30 | Engineering |
| Bob   |     10 | M      |      10 | Sales       |
| Eric  |     20 | M      |      20 | Marketing   |
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
+-------+--------+--------+---------+-------------+
(5 rows)

!ok

EnumerableNestedLoopJoin(condition=[OR(=($1, $3), =(CAST($0):CHAR(11) NOT NULL, $4))], joinType=[inner])
  EnumerableValues(tuples=[[{ 'Jane', 10, 'F' }, { 'Bob', 10, 'M' }, { 'Eric', 20, 'M' }, { 'Susan', 30, 'F' }, { 'Alice', 30, 'F' }, { 'Adam', 50, 'M' }, { 'Eve', 50, 'F' }, { 'Grace', 60, 'F' }, { 'Wilma', null, 'F' }]])
  EnumerableValues(tuples=[[{ 10, 'Sales      ' }, { 20, 'Marketing  ' }, { 30, 'Engineering' }, { 40, 'Empty      ' }]])
!plan

# Now the same, but LEFT join
select *
from emp
left join dept
on emp.deptno = dept.deptno or emp.ename = dept.dname;
+-------+--------+--------+---------+-------------+
| ENAME | DEPTNO | GENDER | DEPTNO0 | DNAME       |
+-------+--------+--------+---------+-------------+
| Adam  |     50 | M      |         |             |
| Alice |     30 | F      |      30 | Engineering |
| Bob   |     10 | M      |      10 | Sales       |
| Eric  |     20 | M      |      20 | Marketing   |
| Eve   |     50 | F      |         |             |
| Grace |     60 | F      |         |             |
| Jane  |     10 | F      |      10 | Sales       |
| Susan |     30 | F      |      30 | Engineering |
| Wilma |        | F      |         |             |
+-------+--------+--------+---------+-------------+
(9 rows)

!ok

# Cannot be decomposed into an equi-join; plan uses EnumerableNestedLoopJoin
EnumerableNestedLoopJoin(condition=[OR(=($1, $3), =(CAST($0):CHAR(11) NOT NULL, $4))], joinType=[left])
  EnumerableValues(tuples=[[{ 'Jane', 10, 'F' }, { 'Bob', 10, 'M' }, { 'Eric', 20, 'M' }, { 'Susan', 30, 'F' }, { 'Alice', 30, 'F' }, { 'Adam', 50, 'M' }, { 'Eve', 50, 'F' }, { 'Grace', 60, 'F' }, { 'Wilma', null, 'F' }]])
  EnumerableValues(tuples=[[{ 10, 'Sales      ' }, { 20, 'Marketing  ' }, { 30, 'Engineering' }, { 40, 'Empty      ' }]])
!plan

!use foodmart
# [CALCITE-35] Support parenthesized sub-clause in JOIN
select
   "product_class"."product_family" as "c0",
   "product_class"."product_department" as "c1",
   "customer"."country" as "c2",
   "customer"."state_province" as "c3",
   "customer"."city" as "c4"
from
   "sales_fact_1997" as "sales_fact_1997"
join ("product" as "product"
     join "product_class" as "product_class"
     on "product"."product_class_id" = "product_class"."product_class_id")
on  "sales_fact_1997"."product_id" = "product"."product_id"
join "customer" as "customer"
on  "sales_fact_1997"."customer_id" = "customer"."customer_id"
join "promotion" as "promotion"
on "sales_fact_1997"."promotion_id" = "promotion"."promotion_id"
where ("promotion"."media_type" = 'Radio'
 or "promotion"."media_type" = 'TV'
 or "promotion"."media_type" = 'Sunday Paper'
 or "promotion"."media_type" = 'Street Handout')
 and ("product_class"."product_family" = 'Drink')
 and ("customer"."country" = 'USA'
   and "customer"."state_province" = 'WA'
   and "customer"."city" = 'Bellingham')
group by "product_class"."product_family",
   "product_class"."product_department",
   "customer"."country",
   "customer"."state_province",
   "customer"."city"
order by "product_class"."product_family" asc nulls first,
   "product_class"."product_department" asc nulls first,
   "customer"."country" asc nulls first,
   "customer"."state_province" asc nulls first,
   "customer"."city" asc nulls first;
+-------+---------------------+-----+----+------------+
| c0    | c1                  | c2  | c3 | c4         |
+-------+---------------------+-----+----+------------+
| Drink | Alcoholic Beverages | USA | WA | Bellingham |
| Drink | Dairy               | USA | WA | Bellingham |
+-------+---------------------+-----+----+------------+
(2 rows)

!ok

!use scott

# [CALCITE-35] Support parenthesized sub-clause in JOIN
with clerk as (select * from emp where job = 'CLERK')
select e.ename, d.dname, c.ename
from dept as d
 left join (emp as e
   left join clerk as c using (empno))
 on d.deptno = e.deptno;
+--------+------------+--------+
| ENAME  | DNAME      | ENAME  |
+--------+------------+--------+
| ADAMS  | RESEARCH   | ADAMS  |
| ALLEN  | SALES      |        |
| BLAKE  | SALES      |        |
| CLARK  | ACCOUNTING |        |
| FORD   | RESEARCH   |        |
| JAMES  | SALES      | JAMES  |
| JONES  | RESEARCH   |        |
| KING   | ACCOUNTING |        |
| MARTIN | SALES      |        |
| MILLER | ACCOUNTING | MILLER |
| SCOTT  | RESEARCH   |        |
| SMITH  | RESEARCH   | SMITH  |
| TURNER | SALES      |        |
| WARD   | SALES      |        |
|        | OPERATIONS |        |
+--------+------------+--------+
(15 rows)

!ok

# Similar to previous; should be invalid because emp-join-clerk
# returns duplicate "deptno" columns but Calcite currently allows it.
with clerk as (select * from emp where job = 'CLERK')
select e.ename, d.dname, c.ename
from dept as d
 natural left join (emp as e
 left join clerk as c using (empno));
Column name 'DEPTNO' in NATURAL join or USING clause is not unique on one side of join
!error

with clerk as (select * from emp where job = 'CLERK')
select e.ename, d.dname, c.ename
from dept as d
 natural left join emp as e
 left join clerk as c using (empno);
+--------+------------+--------+
| ENAME  | DNAME      | ENAME  |
+--------+------------+--------+
| ADAMS  | RESEARCH   | ADAMS  |
| ALLEN  | SALES      |        |
| BLAKE  | SALES      |        |
| CLARK  | ACCOUNTING |        |
| FORD   | RESEARCH   |        |
| JAMES  | SALES      | JAMES  |
| JONES  | RESEARCH   |        |
| KING   | ACCOUNTING |        |
| MARTIN | SALES      |        |
| MILLER | ACCOUNTING | MILLER |
| SCOTT  | RESEARCH   |        |
| SMITH  | RESEARCH   | SMITH  |
| TURNER | SALES      |        |
| WARD   | SALES      |        |
|        | OPERATIONS |        |
+--------+------------+--------+
(15 rows)

!ok

# Without parentheses (i.e joining b to d, then (b-d) to e),
# query would be invalid
select d.dname, b.ename, b.job, e.job, e.ename
from dept as d
join (bonus as b
  right join emp as e
  on b.job = e.job)
on d.deptno = e.deptno;
+------------+-------+-----+-----------+--------+
| DNAME      | ENAME | JOB | JOB       | ENAME  |
+------------+-------+-----+-----------+--------+
| ACCOUNTING |       |     | CLERK     | MILLER |
| ACCOUNTING |       |     | MANAGER   | CLARK  |
| ACCOUNTING |       |     | PRESIDENT | KING   |
| RESEARCH   |       |     | ANALYST   | FORD   |
| RESEARCH   |       |     | ANALYST   | SCOTT  |
| RESEARCH   |       |     | CLERK     | ADAMS  |
| RESEARCH   |       |     | CLERK     | SMITH  |
| RESEARCH   |       |     | MANAGER   | JONES  |
| SALES      |       |     | CLERK     | JAMES  |
| SALES      |       |     | MANAGER   | BLAKE  |
| SALES      |       |     | SALESMAN  | ALLEN  |
| SALES      |       |     | SALESMAN  | MARTIN |
| SALES      |       |     | SALESMAN  | TURNER |
| SALES      |       |     | SALESMAN  | WARD   |
+------------+-------+-----+-----------+--------+
(14 rows)

!ok

# As previous, but CROSS JOIN;
# empty only because "bonus" is empty.
select d.dname, b.ename, b.job, e.job, e.ename
from dept as d
cross join (bonus as b
  cross join emp as e);
+-------+-------+-----+-----+-------+
| DNAME | ENAME | JOB | JOB | ENAME |
+-------+-------+-----+-----+-------+
+-------+-------+-----+-----+-------+
(0 rows)

!ok

# Join plus TABLE
select e.ename, d.dname
from emp as e
natural join (table dept) as d;
+--------+------------+
| ENAME  | DNAME      |
+--------+------------+
| ADAMS  | RESEARCH   |
| ALLEN  | SALES      |
| BLAKE  | SALES      |
| CLARK  | ACCOUNTING |
| FORD   | RESEARCH   |
| JAMES  | SALES      |
| JONES  | RESEARCH   |
| KING   | ACCOUNTING |
| MARTIN | SALES      |
| MILLER | ACCOUNTING |
| SCOTT  | RESEARCH   |
| SMITH  | RESEARCH   |
| TURNER | SALES      |
| WARD   | SALES      |
+--------+------------+
(14 rows)

!ok

# Join plus INTERSECT and TABLE
with clerk as (select * from emp where job = 'CLERK'),
  ancient as (select * from emp where hiredate < '1982-01-01')
select d.deptno, e.ename
from (table dept) as d
natural join (select * from clerk
  intersect
  select * from ancient) as e;
+--------+-------+
| DEPTNO | ENAME |
+--------+-------+
|     20 | SMITH |
|     30 | JAMES |
+--------+-------+
(2 rows)

!ok

# Full join with USING
select *
from (select * from emp where deptno <> 10) as e
full join (select * from dept where deptno <> 20) as d
  using (deptno);
+--------+-------+--------+----------+------+------------+---------+---------+------------+----------+
| DEPTNO | EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DNAME      | LOC      |
+--------+-------+--------+----------+------+------------+---------+---------+------------+----------+
|     10 |       |        |          |      |            |         |         | ACCOUNTING | NEW YORK |
|     20 |  7369 | SMITH  | CLERK    | 7902 | 1980-12-17 |  800.00 |         |            |          |
|     20 |  7566 | JONES  | MANAGER  | 7839 | 1981-02-04 | 2975.00 |         |            |          |
|     20 |  7788 | SCOTT  | ANALYST  | 7566 | 1987-04-19 | 3000.00 |         |            |          |
|     20 |  7876 | ADAMS  | CLERK    | 7788 | 1987-05-23 | 1100.00 |         |            |          |
|     20 |  7902 | FORD   | ANALYST  | 7566 | 1981-12-03 | 3000.00 |         |            |          |
|     30 |  7499 | ALLEN  | SALESMAN | 7698 | 1981-02-20 | 1600.00 |  300.00 | SALES      | CHICAGO  |
|     30 |  7521 | WARD   | SALESMAN | 7698 | 1981-02-22 | 1250.00 |  500.00 | SALES      | CHICAGO  |
|     30 |  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 | SALES      | CHICAGO  |
|     30 |  7698 | BLAKE  | MANAGER  | 7839 | 1981-01-05 | 2850.00 |         | SALES      | CHICAGO  |
|     30 |  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 | SALES      | CHICAGO  |
|     30 |  7900 | JAMES  | CLERK    | 7698 | 1981-12-03 |  950.00 |         | SALES      | CHICAGO  |
|     40 |       |        |          |      |            |         |         | OPERATIONS | BOSTON   |
+--------+-------+--------+----------+------+------------+---------+---------+------------+----------+
(13 rows)

!ok

# Unqualified column names and USING
select distinct deptno, dept.deptno, emp.deptno
from emp
right join dept using (deptno);
+--------+--------+--------+
| DEPTNO | DEPTNO | DEPTNO |
+--------+--------+--------+
|     10 |     10 |     10 |
|     20 |     20 |     20 |
|     30 |     30 |     30 |
|     40 |     40 |        |
+--------+--------+--------+
(4 rows)

!ok

# Push aggregate through join
select distinct dept.deptno, emp.deptno
from "scott".emp join "scott".dept using (deptno);
+--------+--------+
| DEPTNO | DEPTNO |
+--------+--------+
|     10 |     10 |
|     20 |     20 |
|     30 |     30 |
+--------+--------+
(3 rows)

!ok
EnumerableAggregate(group=[{0, 2}])
  EnumerableHashJoin(condition=[=($0, $2)], joinType=[inner])
    EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
      EnumerableTableScan(table=[[scott, DEPT]])
    EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

select distinct dept.deptno
from "scott".emp join "scott".dept using (deptno);
+--------+
| DEPTNO |
+--------+
|     10 |
|     20 |
|     30 |
+--------+
(3 rows)

!ok
EnumerableAggregate(group=[{0}])
  EnumerableHashJoin(condition=[=($0, $2)], joinType=[inner])
    EnumerableCalc(expr#0..2=[{inputs}], DEPTNO=[$t0])
      EnumerableTableScan(table=[[scott, DEPT]])
    EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

# [CALCITE-676] AssertionError in GROUPING SETS query
select emp.deptno as e, dept.deptno as d
from "scott".emp join "scott".dept using (deptno)
group by cube(emp.deptno, dept.deptno);
+----+----+
| E  | D  |
+----+----+
| 10 | 10 |
| 10 |    |
| 20 | 20 |
| 20 |    |
| 30 | 30 |
| 30 |    |
|    | 10 |
|    | 20 |
|    | 30 |
|    |    |
+----+----+
(10 rows)

!ok

# [CALCITE-688] splitCondition does not behave correctly
# when one side of the condition references columns from
# different inputs
select distinct emp1.deptno, emp3.ename
from "scott".emp emp1 join "scott".emp emp2 on (emp1.deptno = emp2.deptno)
join "scott".emp emp3 on (emp1.deptno + emp2.deptno = emp3.deptno + 10);
+--------+--------+
| DEPTNO | ENAME  |
+--------+--------+
|     10 | CLARK  |
|     10 | KING   |
|     10 | MILLER |
|     20 | ALLEN  |
|     20 | BLAKE  |
|     20 | JAMES  |
|     20 | MARTIN |
|     20 | TURNER |
|     20 | WARD   |
+--------+--------+
(9 rows)

!ok

EnumerableCalc(expr#0..1=[{inputs}], DEPTNO=[$t1], ENAME=[$t0])
  EnumerableAggregate(group=[{1, 3}])
    EnumerableHashJoin(condition=[=($2, $4)], joinType=[inner])
      EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], proj#0..1=[{exprs}], $f8=[$t9])
        EnumerableTableScan(table=[[scott, EMP]])
      EnumerableCalc(expr#0..3=[{inputs}], expr#4=[+($t1, $t3)], expr#5=[CAST($t4):INTEGER], DEPTNO=[$t1], $f16=[$t5])
        EnumerableHashJoin(condition=[=($1, $3)], joinType=[inner])
          EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
            EnumerableTableScan(table=[[scott, EMP]])
          EnumerableCalc(expr#0..7=[{inputs}], EMPNO=[$t0], DEPTNO=[$t7])
            EnumerableTableScan(table=[[scott, EMP]])
!plan



# [CALCITE-457] Non-ansi join should push condition with expression into join
select e.deptno, d.deptno
from "scott".dept D ,  "scott".emp E
where e.deptno + 10 = d.deptno * 2;
+--------+--------+
| DEPTNO | DEPTNO |
+--------+--------+
|     10 |     10 |
|     10 |     10 |
|     10 |     10 |
|     30 |     20 |
|     30 |     20 |
|     30 |     20 |
|     30 |     20 |
|     30 |     20 |
|     30 |     20 |
+--------+--------+
(9 rows)

!ok
EnumerableCalc(expr#0..4=[{inputs}], DEPTNO=[$t3], DEPTNO0=[$t0])
  EnumerableHashJoin(condition=[=($1, $4)], joinType=[inner])
    EnumerableCalc(expr#0..2=[{inputs}], expr#3=[2], expr#4=[*($t0, $t3)], DEPTNO=[$t0], $f1=[$t4])
      EnumerableTableScan(table=[[scott, DEPT]])
    EnumerableCalc(expr#0..7=[{inputs}], expr#8=[10], expr#9=[+($t7, $t8)], EMPNO=[$t0], DEPTNO=[$t7], $f2=[$t9])
      EnumerableTableScan(table=[[scott, EMP]])
!plan

### [CALCITE-801] NullPointerException using USING on table alias with column aliases
select *
from (values (100, 'Bill', 1),
             (200, 'Eric', 1),
             (150, 'Sebastian', 3)) as e(empid, name, deptno)
join (values (1, 'LeaderShip'),
             (2, 'TestGroup'),
             (3, 'Development')) as d(deptno, name)
using (deptno);
+--------+-------+-----------+-------------+
| DEPTNO | EMPID | NAME      | NAME0       |
+--------+-------+-----------+-------------+
|      1 |   100 | Bill      | LeaderShip  |
|      1 |   200 | Eric      | LeaderShip  |
|      3 |   150 | Sebastian | Development |
+--------+-------+-----------+-------------+
(3 rows)

!ok

### [CALCITE-1018] SortJoinTransposeRule not firing due to getMaxRowCount(RelSubset) returning null
select * from (select * from "scott".emp) e left join (
  select * from "scott".dept d) using (deptno)
order by empno limit 10;
+--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+
| DEPTNO | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DNAME      | LOC      |
+--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+
|     20 |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         | RESEARCH   | DALLAS   |
|     30 |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 | SALES      | CHICAGO  |
|     30 |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 | SALES      | CHICAGO  |
|     20 |  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         | RESEARCH   | DALLAS   |
|     30 |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 | SALES      | CHICAGO  |
|     30 |  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         | SALES      | CHICAGO  |
|     10 |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         | ACCOUNTING | NEW YORK |
|     20 |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         | RESEARCH   | DALLAS   |
|     10 |  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         | ACCOUNTING | NEW YORK |
|     30 |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 | SALES      | CHICAGO  |
+--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+
(10 rows)

!ok
EnumerableCalc(expr#0..10=[{inputs}], expr#11=[COALESCE($t7, $t8)], DEPTNO=[$t11], EMPNO=[$t0], ENAME=[$t1], JOB=[$t2], MGR=[$t3], HIREDATE=[$t4], SAL=[$t5], COMM=[$t6], DNAME=[$t9], LOC=[$t10])
  EnumerableLimit(fetch=[10])
    EnumerableHashJoin(condition=[=($7, $8)], joinType=[left])
      EnumerableLimit(fetch=[10])
        EnumerableTableScan(table=[[scott, EMP]])
      EnumerableTableScan(table=[[scott, DEPT]])
!plan

# End join.iq
