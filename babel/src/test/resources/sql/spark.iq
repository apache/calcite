# spark.iq - Babel test for Spark dialect of SQL
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use scott-spark
!set outputformat csv

#####################################################################
# String functions ######################

#####################################################################
# RLIKE
#
# string1 RLIKE string2
# Returns true if str matches regexp, or false otherwise.
#
# Returns BOOLEAN

select NULL RLIKE 'abc*';
EXPR$0
null
!ok

select 'abc' RLIKE NULL;
EXPR$0
null
!ok

select 'abc' RLIKE '';
EXPR$0
true
!ok

SELECT 'abc def ghi' RLIKE 'abc';
EXPR$0
true
!ok

SELECT 'abc def ghi' RLIKE 'abcd';
EXPR$0
false
!ok

select 'abc' RLIKE '^\abc$';
EXPR$0
false
!ok

select '\abc' RLIKE '\abc$';
EXPR$0
false
!ok

select '\abc' RLIKE '^\abc$';
EXPR$0
false
!ok

select '\abc' RLIKE '^\\abc$';
EXPR$0
true
!ok

select 'abc' RLIKE '^abc$';
EXPR$0
true
!ok

select 'abc' RLIKE 'abz*';
EXPR$0
true
!ok

SELECT '%SystemDrive%\\Users\\John' RLIKE '%SystemDrive%\\\\Users.*';
EXPR$0
true
!ok

select '%SystemDrive%\Users\John' RLIKE '%SystemDrive%\\Users.*';
EXPR$0
true
!ok

#####################################################################
# REGEXP
#
# REGEXP(str, regexp)
# Returns true if str matches regexp, or false otherwise.
#
# Returns BOOLEAN

select REGEXP(NULL, 'abc*');
EXPR$0
null
!ok

select REGEXP('abc', NULL);
EXPR$0
null
!ok

select REGEXP('abc', '');
EXPR$0
true
!ok

SELECT REGEXP('abc def ghi', 'abc');
EXPR$0
true
!ok

SELECT REGEXP('abc def ghi', 'abcd');
EXPR$0
false
!ok

select REGEXP('abc', '^\abc$');
EXPR$0
false
!ok

select REGEXP('\abc', '\abc$');
EXPR$0
false
!ok

select REGEXP('\abc', '^\abc$');
EXPR$0
false
!ok

select REGEXP('\abc', '^\\abc$');
EXPR$0
true
!ok

select REGEXP('abc', '^abc$');
EXPR$0
true
!ok

select REGEXP('abc', 'abz*');
EXPR$0
true
!ok

SELECT REGEXP('%SystemDrive%\\Users\\John', '%SystemDrive%\\\\Users.*');
EXPR$0
true
!ok

SELECT REGEXP('%SystemDrive%\Users\John', '%SystemDrive%\\Users.*');
EXPR$0
true
!ok

#####################################################################
# REGEXP_LIKE
#
# REGEXP_LIKE(str, regexp)
# Returns true if str matches regexp, or false otherwise.
#
# Returns BOOLEAN

select REGEXP_LIKE(NULL, 'abc*');
EXPR$0
null
!ok

select REGEXP_LIKE('abc', NULL);
EXPR$0
null
!ok

select REGEXP_LIKE('abc', '');
EXPR$0
true
!ok

SELECT REGEXP_LIKE('abc def ghi', 'abc');
EXPR$0
true
!ok

SELECT REGEXP_LIKE('abc def ghi', 'abcd');
EXPR$0
false
!ok

select REGEXP_LIKE('abc', '^\abc$');
EXPR$0
false
!ok

select REGEXP_LIKE('\abc', '\abc$');
EXPR$0
false
!ok

select REGEXP_LIKE('\abc', '^\abc$');
EXPR$0
false
!ok

select REGEXP_LIKE('\abc', '^\\abc$');
EXPR$0
true
!ok

select REGEXP_LIKE('abc', '^abc$');
EXPR$0
true
!ok

select REGEXP_LIKE('abc', 'abz*');
EXPR$0
true
!ok

SELECT REGEXP_LIKE('%SystemDrive%\\Users\\John', '%SystemDrive%\\\\Users.*');
EXPR$0
true
!ok

SELECT REGEXP_LIKE('%SystemDrive%\Users\John', '%SystemDrive%\\Users.*');
EXPR$0
true
!ok

#####################################################################
# CONCAT_WS
#
# CONCAT_WS(sep[, str | array(str)]+)
# Returns the concatenation of the strings separated by sep, skipping null values.
# If sep is null, returns null directly
#
# Returns STRING

SELECT CONCAT_WS('s');
EXPR$0

!ok

SELECT CONCAT_WS(',', null);
EXPR$0

!ok

SELECT CONCAT_WS(',', null, null);
EXPR$0

!ok

SELECT CONCAT_WS(',', null, 'a');
EXPR$0
a
!ok

SELECT CONCAT_WS(',', 'a', 'b');
EXPR$0
a,b
!ok

SELECT CONCAT_WS(',', 'a', null, 'b');
EXPR$0
a,b
!ok

SELECT CONCAT_WS(null, 'a', 'b');
EXPR$0
null
!ok

SELECT CONCAT_WS(',', 'a', 100, 'b');
EXPR$0
a,100,b
!ok

SELECT CONCAT_WS(',', 'a', 100.0, 'b');
EXPR$0
a,100.0,b
!ok

SELECT CONCAT_WS('', cast('a' as varchar(2)), cast('b' as varchar(1)));
EXPR$0
ab
!ok

SELECT CONCAT_WS(',', array('a', 'b', 'c'));
EXPR$0
a,b,c
!ok

SELECT CONCAT_WS(',', array('a', null, 'c'));
EXPR$0
a,c
!ok

SELECT CONCAT_WS(',', array('a'));
EXPR$0
a
!ok

SELECT CONCAT_WS(null, array('a'));
EXPR$0
null
!ok

SELECT CONCAT_WS(null, array('a'), array('b'), array('c'));
EXPR$0
null
!ok

SELECT CONCAT_WS(',', array('a'), array('b'), array('c'));
EXPR$0
a,b,c
!ok

SELECT CONCAT_WS(',', 'a1', 'b1', 'c1', array('a'), array('b'), array('c'));
EXPR$0
a1,b1,c1,a,b,c
!ok

SELECT CONCAT_WS(',', null, 'a1', 'b1', null, 'c1', array('a'), array('b'), array('c'));
EXPR$0
a1,b1,c1,a,b,c
!ok

SELECT CONCAT_WS(',', null,'a1', 'b1', null, 'c1', array('a'), array('b'), array('c', null, 'd'));
EXPR$0
a1,b1,c1,a,b,c,d
!ok

SELECT CONCAT_WS(',', 100, 'b', array('c'));
EXPR$0
100,b,c
!ok

SELECT CONCAT_WS(',', array(null, null));
EXPR$0

!ok


#####################################################################
# REVERSE
#
# REVERSE(str | array)
# Returns a reversed string or an array with reverse order of elements.
#
# Returns STRING or ARRAY

SELECT REVERSE('Spark SQL');
EXPR$0
LQS krapS
!ok

SELECT REVERSE('#c@b!a');
EXPR$0
a!b@c#
!ok

SELECT REVERSE(5);
EXPR$0
5
!ok

SELECT REVERSE(array(2, 1, 4, 3));
EXPR$0
[3, 4, 1, 2]
!ok

SELECT REVERSE(NULL);
EXPR$0
null
!ok

SELECT REVERSE(cast(NULL as tinyint));
EXPR$0
null
!ok

SELECT REVERSE(array(NULL));
EXPR$0
[null]
!ok

SELECT REVERSE(cast(NULL as integer array));
EXPR$0
null
!ok

SELECT REVERSE(array(cast(NULL as tinyint)));
EXPR$0
[null]
!ok

SELECT REVERSE('');
EXPR$0

!ok

SELECT REVERSE(array(cast(1 as tinyint), 2));
EXPR$0
[2, 1]
!ok

SELECT REVERSE(array(2.1, 2.2));
EXPR$0
[2.2, 2.1]
!ok

SELECT REVERSE(array(2.1, NULL));
EXPR$0
[null, 2.1]
!ok

SELECT REVERSE(array(2, CAST(2.2 AS double)));
EXPR$0
[2.2, 2.0]
!ok

SELECT REVERSE(array(2, CAST(NULL AS double)));
EXPR$0
[null, 2.0]
!ok

SELECT REVERSE(array(CAST(2.1 as decimal(17)), 2.1111111111111119));
EXPR$0
[2.1111111111111119, 2.1]
!ok

SELECT REVERSE(array(CAST(2.1 as double), 2.1111111111111119));
EXPR$0
[2.111111111111112, 2.1]
!ok

# End spark.iq
