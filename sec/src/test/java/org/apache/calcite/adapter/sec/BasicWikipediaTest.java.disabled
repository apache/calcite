/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.calcite.adapter.sec;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Basic test for DJI constituents via JDBC.
 */
@Tag("integration")
public class BasicWikipediaTest {
  private String testDataDir;
  private String modelPath;
  
  @BeforeEach
  void setUp(TestInfo testInfo) throws Exception {
    // Create unique test directory - NEVER use @TempDir
    String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
    String testName = testInfo.getTestMethod().get().getName();
    testDataDir = "build/test-data/" + getClass().getSimpleName() + "/" + testName + "_" + timestamp;
    Files.createDirectories(Paths.get(testDataDir));
    
    // Create test model
    modelPath = createTestModel();
  }
  
  @AfterEach
  void tearDown() {
    // Manual cleanup
    try {
      if (testDataDir != null && Files.exists(Paths.get(testDataDir))) {
        Files.walk(Paths.get(testDataDir))
            .sorted(Comparator.reverseOrder())
            .map(Path::toFile)
            .forEach(File::delete);
      }
    } catch (IOException e) {
      // Log but don't fail test
      System.err.println("Warning: Could not clean test directory: " + e.getMessage());
    }
  }
  
  @Test
  public void testFetchDJIConstituents() throws Exception {
    // Register driver
    Class.forName("org.apache.calcite.jdbc.Driver");
    
    Properties props = new Properties();
    props.setProperty("lex", "ORACLE");
    props.setProperty("unquotedCasing", "TO_LOWER");
    
    try (Connection conn = DriverManager.getConnection(
            "jdbc:calcite:model=" + modelPath, props)) {
      
      // Query DJI constituents
      String sql = "SELECT DISTINCT cik, company_name FROM sec.sec_filings ORDER BY company_name";
      
      try (Statement stmt = conn.createStatement();
           ResultSet rs = stmt.executeQuery(sql)) {
        
        // Validate metadata
        assertEquals(2, rs.getMetaData().getColumnCount());
        assertEquals("cik", rs.getMetaData().getColumnName(1).toLowerCase());
        assertEquals("company_name", rs.getMetaData().getColumnName(2).toLowerCase());
        
        // Count constituents
        int count = 0;
        while (rs.next()) {
          count++;
          String cik = rs.getString("cik");
          assertNotNull(cik, "CIK should not be null");
          assertEquals(10, cik.length(), "CIK should be 10 digits");
          
          String companyName = rs.getString("company_name");
          assertNotNull(companyName, "Company name should not be null");
        }
        
        // Should have some constituents (either from data or test mode)
        assertTrue(count >= 0, "Query should execute without error");
      }
    }
  }
  
  private String createTestModel() throws Exception {
    String model = String.format("""
        {
          "version": "1.0",
          "defaultSchema": "SEC",
          "schemas": [{
            "name": "SEC",
            "type": "custom",
            "factory": "org.apache.calcite.adapter.sec.SecSchemaFactory",
            "operand": {
              "directory": "%s",
              "ciks": ["_DJI_CONSTITUENTS"],
              "testMode": true,
              "ephemeralCache": true,
              "sec.fallback.enabled": false,
              "executionEngine": "duckdb"
            }
          }]
        }
        """, testDataDir);
    
    Path modelFile = Paths.get(testDataDir, "model.json");
    Files.writeString(modelFile, model);
    return modelFile.toString();
  }
}